/- minimalGUI2.dog

/-LinuxBuild: Platform='Linux' CPU='amd64' Lang='CPP' optimize='speed';
/-SwingBuild: Platform='Java' CPU='JavaVM' Lang='Java' optimize='speed';
AndroidBuild: Platform='Android' CPU='JavaVM' Lang='Java' optimize='power';
/-iPhoneBuild: Platform='IOS' CPU='amd64' Lang='Swift' optimize='speed';

Title = "minimalGUI2"
FileName = "minimalGUI2"
Version = "1.0"
CopyrightMesg = "Public Domain"
Authors = "Bruce Long"
Description = "This is an example of a very minimal GUI"
ProgramOrLibrary = "program"

featuresNeeded = [GUI_ToolKit]

LicenseText = `Public Domain`

runCode=``

do makeGUI(GUI_Spec)

/-//////////   A p p l i c a t i o n   a n d   G l o b a l s

struct testWidget: inherits = 'widget'{

    void: draw(me GUI_ctxt: cr) <- {
        print("In DRAW()\n")
        cr.setColor(GUI.DarkMagenta)
        cr.moveTo(0, 0)
        cr.lineTo(1200, 1200)
        cr.moveTo(1200, 0)
        cr.lineTo(0, 1200)
        cr.strokeNow()

        cr.setColor(GUI.DarkSlateBlue)
        renderText(cr, "Hello World!", "Ariel",  50, 150, 100)
        cr.strokeNow()

        /- Here you can add tests for other drawing functions:
        /-    setRGB(), setRGBA()
        /-    setLineWidth()
        /-    setScale()
        /-    moveRel(), lineRel()
        /-    curveTo(), curveRel()
        /-    closePath()
        /-    rectangle()
        /-    fillNow(), etc
        /-    setFillPattern() and gradient control functions.
    }

    me bool: primaryClick(their GUI_ButtonEvent: event) <- {
        me GUI_scalar: eventX <- event.x
        me GUI_scalar: eventY <- event.y
        print("CLICK! (x:", eventX, ", y:", eventY, ")\n")
        return(true)
    }

    me bool: secondaryClick(their GUI_ButtonEvent: event) <- {
        me GUI_scalar: eventX <- event.x
        me GUI_scalar: eventY <- event.y
        print("SECONDARY CLICK! (x:", eventX, ", y:", eventY, ")\n")
        return(true)
    }
}

struct GLOBAL{
    me GUI_canvas: drawing_area
    our testWidget: drawAnX
    me int: fontSize
}

struct APP{
    my GUI: gui
    me GUI_ScrollingWindow: scrollerRef

    me void: createAppMenu(me GUI_Frame: frame) <- {}

    me void: createAppArea(me GUI_Frame: frame) <- {
        drawing_area  <- gui.newCanvas()
        me GUI_ScrollingWindow:: scrollerFrame(gui.newScrollingWindow(NULL, NULL))
        scrollerRef <- scrollerFrame
        gui.addToContainer(scrollerFrame, drawing_area)
        gui.setWidgetSize(drawing_area, 1200, 1200)
        Allocate(drawAnX)
        EventDispatcher.registerWidgetForEventDispatcher(drawing_area, drawAnX)
        gui.addToContainerAndExpand (frame, scrollerFrame)
    }
}
