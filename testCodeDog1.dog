// Test dog file

BuildCmd = `g++ -std=gnu++11 test.cpp -o test`
Title = "CodeDog test suite"
FileName = "test.cpp"
Version = "0.8"
CopyrightMesg = "Copyright (c) 2015-2016 Bruce Long"
Authors = "Bruce Long, Tiffany Lawrence"
Description = "This test file is for testing CodeDog."

LicenseText = `This file is part of the "CodeDog test suite"
The CodeDog test suite is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
The CodeDog test suite is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
You should have received a copy of the GNU General Public License along with the CodeDog test suite.  If not, see www.gnu.org/licenses.`

langToGen="CPP"

TestList = [abc, def, ghi, jkl]
TestMap = {abc=123 def='hi' LST=[12, 34, 56] MP = {a=b c=d}}

testEventHandling = {ID='testEvH' maxEvents='100000' types=[GUI, LogicAtom] runFromMain=1}

initCode="SDL_Init(SDL_INIT_VIDEO+SDL_INIT_AUDIO+SDL_INIT_TIMER)"
deinitCode="SDL_Quit()"

Include=`<memory>, <fstream>, <cstdint>, <string>, <cstring>, <vector>, <map>, <cstdarg>, <iostream>`

#include libraryTags.dog

LinuxBuild: CPU='amd64' Lang='c++' optimize='speed';
//AndroidBuild: CPU='arm7' Lang='java' optimize='speed';
//AppleBuild: CPU='i386' Lang='objectiveC' optimize='clarity';
//
//do useBigNums(tags)

model month {mode [January, February, March, April, May, June, July, August, September, October, November, December] : month}

model date [
    me int32: month
    me int32: date
    me int32: year
]
struct date::mem auto

model personRec {
    flag: hired
    me int32:  age
    me string: name
    me string: address
    me date:   birthday
}

struct personRec::HRForm auto

string date::strForm {
    > int32:month
    ". "
    > int32:date
    > int32:year
}

string personRec::strForm {
    flag: hired
    > me int32:  age
    > me string: name
    > me string: address
    > me date_mem:   birthday
}

struct testObject {
    my flag: isOK
    me flag: isBig
    flag: isBare <- true
    flag: isOne <- 1
    const string: text <- "BEGIN"
    const int32: height <- 4321
    me uint32: offset <- 5
    my uint32: length
    our uint32: distance
    their uint32: age
    me uint32: addOne(me uint32: X) <- {
        X <- 123+34
        if(true) {
            X <- 123+345

        }
        else if(false) {X <- 123+346} else { X <- 123+3457 if(false) {X <- 123+3458}}

///////  Uncomment these lines to test things
      our testObject: span
      const uint32: age <- 30

      print(1234 or 567 or 789 or 654, age, 23, 2+3*(5-4/3) % sqrt(81, "hello"), addOne[5].next, FUNC(821, name, 'hi'), noArgs( ), -23 , !true)
      disLodge()
      windPipe[3].dislodge()
      MoreArgs('abc', def, 234)
      print('Hello %s`table[T].patron.name`! Thanx for your donation of %i`table[t].miminumDonation`. enjoy your meal.', 2+3, "HOLA")
    }
    their uint32: age2
}
do Gen_EventHandler(testEventHandling)
do Write_Main(eventLoop)
