// Test dog file

//LinuxBuild: CPU='amd64' Lang='CPP' optimize='speed';
//AndroidBuild: CPU='arm7' Lang='java' optimize='speed';
//AppleBuild: CPU='i386' Lang='objectiveC' optimize='clarity';
// g++ -g -std=gnu++11 `pkg-config --cflags gtk+-3.0` test.cpp
SwingBuild: Platform='Java' CPU='JavaVM' Lang='Java' optimize='speed';

BuildCmd = `g++ -std=gnu++11 test.cpp -o test`
Title = "CodeDog test suite"
FileName = "test"
Version = "0.8"
CopyrightMesg = "Copyright (c) 2015-2016 Bruce Long"
Authors = "Bruce Long, Tiffany Lawrence"
Description = "This test file is for testing CodeDog."

featuresNeeded = {}

LicenseText = `This file is part of the "CodeDog test suite"
The CodeDog test suite is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
The CodeDog test suite is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
You should have received a copy of the GNU General Public License along with the CodeDog test suite.  If not, see www.gnu.org/licenses.`


TestList = [abc, def, ghi, jkl]
TestMap = {abc=123 def='hi' LST=[12, 34, 56] MP = {a=b c=d}}

testEventHandling = {ID='testEvH' maxEvents='100000' types=[GUI, LogicAtom] runFromMain=1}

initCode=''
runCode='testFunc()'
deinitCode=''

Include=`<memory>, <fstream>, <cstdint>, <string>, <cstring>, <vector>, <map>, <cstdarg>, <iostream>, <deque>`

#include libraryTags.dog



// test class
struct GLOBAL  {
    me void: testFunc() <- {
        me string: myMessage <- "Hello, World!"
        logMesg(myMessage)

        me uint32: numItems <- 8
        countRange(numItems)

        //me studentManager: studentMgr
        //studentMgr.fillStudentInfo(8)
    }

    me void: countRange(me uint32: numItems) <- {
        me uint32: i <- 0
        withEach item in RANGE(0 .. numItems):{
            logMesg(i)
            i <- i + 1
        }
    }

    me void: printMessage(me string: myMessage) <- {
        logMesg(myMessage)
    }
}

struct test{
    me string: testSubject
    me double: testNumber
    me float: testScore
}

struct student{
    me string: studentName
    me string: email
    me test[multimap uint32]: studentTests


}

struct dataStudentPtr{our dataStudent: dataStudentPtr}

struct studentManager{

    me string[list uint32]: studentDisplayOrder

}

struct thisApp{
    me studentManager: studentMgr

}

do Write_Main(eventLoop)
