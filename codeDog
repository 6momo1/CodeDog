#!/usr/bin/env python
# CodeDog Program Maker

import progSpec
import codeDogParser
import buildDog
import TestDog

import pattern_GUI_Toolkit
import pattern_ManageCmdLine

import stringStructs

##########  Library Shells
import Lib_GTK3
import Lib_Java
import Lib_CPP
import Lib_Swing
import Lib_Android
import Lib_AndroidGUI
import Lib_Swift

import Lib_CodeDog

import CodeGenerator
import xlator_CPP
import xlator_Java
#import xlator_JavaScript
import xlator_Swift


import re
import os
import sys
import errno
import platform
import copy
import atexit
from progSpec import cdlog, cdErr
from inspect import getsourcefile
from os.path import abspath
from timeit import default_timer as timer

atexit.register(progSpec.whenExit)

startTime = timer()

'''
def writeFile(path, fileName, outStr, fileExtension):
    try:
        os.makedirs(path)
    except OSError as exception:
        if exception.errno != errno.EEXIST: raise
    fileName += fileExtension
    fo=open(path + os.sep + fileName, 'w')
    fo.write(outStr)
    fo.close()
    '''

def processIncludedFiles(fileString):
    pattern = re.compile(r'#include +([\w -\.\/\\]+)')
    return pattern.sub(replaceFileName, fileString)

def replaceFileName(fileMatch):
    dirname, filename = os.path.split(abspath(getsourcefile(lambda:0)))
    includedStr = progSpec.stringFromFile(dirname +"/"+fileMatch.group(1))
    includedStr = processIncludedFiles(includedStr)
    return includedStr


def ScanAndApplyPatterns(objects, tags):
    cdlog(1, "Applying Patterns...")
    for item in objects[1]:
        if item[0]=='!':
            pattName=item[1:]
            patternArgs=objects[0][pattName]['parameters']
            cdlog(2, "PATTERN: {}: {}".format( pattName, patternArgs))

            if pattName=='Write_Main': pattern_Write_Main.apply(objects, tags, patternArgs[0])
            elif pattName=='Gen_EventHandler': pattern_Gen_EventHandler.apply(objects, tags, patternArgs[0])
            #elif pattName=='writeParser': pattern_Gen_ParsePrint.apply(objects, tags, patternArgs[0], patternArgs[1])
            elif pattName=='useBigNums': pattern_BigNums.apply(tags)
            elif pattName=='makeGUI': pattern_GUI_Toolkit.apply(objects, tags)
            elif pattName=='ManageCmdLine': pattern_ManageCmdLine.apply(objects, tags)
            else:
                cdEre("\nPattern {} not recognized.\n\n".format(pattName))
                exit()

def AutoGenerateStructsFromModels(objects, tags):
    #TODO: Convert ranges and deduce field types if possible.
    cdlog(1,  "Generating Auto-structs...")
    for objName in objects[1]:
        if objName[0]!='!':
            autoFlag = 'autoGen' in objects[0][objName]
            stateType=objects[0][objName]['stateType']
            if(autoFlag and stateType=='struct'):
                cdlog(2, "Object: {}".format(objName))
                thisModel=progSpec.findModelOf(objects, objName)
                newFields=[]
                for F in thisModel['fields']:
                    baseType=progSpec.TypeSpecsMinimumBaseType(objects, F['typeSpec'])
                    G = F.copy()
                    if baseType!=None:
                        G['typeSpec']=F['typeSpec'].copy()
                        G['typeSpec']['fieldType']=baseType
                    newFields.append(G)
                objects[0][objName]['fields'] = newFields


def GroomTags(tags):
    # Set tag defaults as needed
    tags['featuresNeeded']['System'] = 'system'
    # TODO: default to localhost for Platform, and CPU, etc. Add more combinations as needed.
    if not ('Platform' in tags):
        platformID=platform.system()
        if platformID=='Darwin': platformID="OSX_Devices"
        tags['Platform']=platformID

    # Find any needed features based on types used
    for typeName in progSpec.storeOfBaseTypesUsed:
        if(typeName=='BigNum' or typeName=='BigFrac'):
            print 'NOTE: Need Large Numbers'
            progSpec.setFeatureNeeded(tags, 'largeNumbers', progSpec.storeOfBaseTypesUsed[typeName])


def GenerateProgram(objects, buildTags, tagsList, libsToUse):
    result='No Language Generator Found for '+buildTags['Lang']
    langGenTag = buildTags['Lang']
    if(langGenTag == 'CPP'):
        cdlog(0, "\n##############  G E N E R A T I N G   C + +   P R O G R A M . . .")
        xlator = xlator_CPP.fetchXlators()
    elif(langGenTag == 'Java'):
        cdlog(0, "\n##############  G E N E R A T I N G   J A V A   P R O G R A M . . .")
        xlator = xlator_Java.fetchXlators()
    elif(langGenTag == 'Swift'):
        cdlog(0,"\n##############  G E N E R A T I N G   S W I F T   P R O G R A M . . .")
        xlator = xlator_Swift.fetchXlators()
    else:
        cdErr( "ERROR: No language generator found for ".format( langGenTag))
        exit(1)
    result=CodeGenerator.generate(objects, tagsList, libsToUse, xlator)
    return result

def ChooseLibs(objects, buildTags, tags):
    cdlog(0,  "\n##############   C H O O S I N G   L I B R A R I E S")
    # TODO: Why is fetchTagValue called with tags, not [tags]?
    libList = progSpec.fetchTagValue([tags], 'libraries')
    Platform= progSpec.fetchTagValue([tags, buildTags], 'Platform')
    Language= progSpec.fetchTagValue([tags, buildTags], 'Lang')
    CPU     = progSpec.fetchTagValue([tags, buildTags], 'CPU')
    cdlog(1, "PLATFORM: {}   LANGUAGE: {}   CPU:{}".format(Platform, Language, CPU))

    compatibleLibs=[]
    for lib in libList:
        libPlatforms=progSpec.fetchTagValue([tags], "libraries."+lib+".platforms")
        libBindings =progSpec.fetchTagValue([tags], "libraries."+lib+".bindings")
        libCPUs     =progSpec.fetchTagValue([tags], "libraries."+lib+".CPUs")
        libFeatures =progSpec.fetchTagValue([tags], "libraries."+lib+".features")

        LibCanWork=True
        if not (libPlatforms and Platform in libPlatforms): LibCanWork=False;
        if not (libBindings and Language in libBindings): LibCanWork=False;
      #  if not (libCPUs and CPU in libCPUs): LibCanWork=False;

        if(LibCanWork):
            cdlog(2, "NOTE: {} would work for this system.".format(lib))
            compatibleLibs.append([lib, libFeatures])

    # TODO: This should cause error if a need isn't met. And, it should resolve when multiple libraries can meet a need.
    featuresNeeded = progSpec.fetchTagValue([tags], 'featuresNeeded')
    cdlog(2, "NOTE: Features Needed: {}".format( featuresNeeded.keys()))
    progSpec.libsToUse={}
    for need in featuresNeeded:
        cdlog(3,str(need))
        for LIB in compatibleLibs:
            if(need in LIB[1]):
                progSpec.libsToUse[LIB[0]] = True
                cdlog(4, str(LIB[0]))

    cdlog(2, "NOTE: USING LIBS: {}".format(progSpec.libsToUse.keys()))
    for Lib in progSpec.libsToUse:
        if   (Lib=="GTK3"): Lib_GTK3.use(objects, buildTags, [tags, buildTags], Platform)
        elif (Lib=="SDL2"): Lib_SDL2.use(objects, buildTags, [tags, buildTags], Platform)
        elif (Lib=="Java"): Lib_Java.use(objects, buildTags, [tags, buildTags], Platform)
        elif (Lib=="CPP"):  Lib_CPP.use(objects, buildTags, [tags, buildTags], Platform)
        elif (Lib=="Swing"):  Lib_Swing.use(objects, buildTags, [tags, buildTags], Platform)
        elif (Lib=="Android"):  Lib_Android.use(objects, buildTags, [tags, buildTags], Platform)
        elif (Lib=="AndroidGUI"):  Lib_AndroidGUI.use(objects, buildTags, [tags, buildTags], Platform)
        elif (Lib=="Swift"):  Lib_Swift.use(objects, buildTags, [tags, buildTags], Platform)

    Lib_CodeDog.use(objects, buildTags, [tags, buildTags])

    return progSpec.libsToUse

def GenerateSystem(objects, buildSpecs, tags, macroDefs):
    cdlog(0, "\n######################   G E N E R A T I N G   P R O G R A M   S P E C I F I C A T I O N")
    ScanAndApplyPatterns(objects, tags)
    AutoGenerateStructsFromModels(objects, tags)
    stringStructs.CreateStructsForStringModels(objects, tags)
    GroomTags(tags)

    count=0
    for buildSpec in buildSpecs:
        count+=1
        buildName=buildSpec[0]
        buildTags=buildSpec[1]
        testMode=progSpec.fetchTagValue([tags, buildTags], 'testMode')
        progSpec.MarkItems=True
        if testMode=='makeTests' or testMode=='runTests':
            testTagStore=TestDog.generateTestCode(objects, buildTags, tags, macroDefs)
            tagsList=[tags, buildTags, testTagStore]
        else:
            tagsList=[tags, buildTags]
        cdlog(0, "\n######################   G E N E R A T I N G   S O U R C E   C O D E   S Y S T E M   {}   o f   {}...   ({})".format(count, len(buildSpecs), buildName))
        libsToUse=ChooseLibs(objects, buildTags, tags)
        fileSpecs = GenerateProgram(objects, buildTags, tagsList, libsToUse)

        #GenerateBuildSystem()###################################################
        fileName = progSpec.fetchTagValue(tagsList, 'FileName')
        langGenTag = buildTags['Lang']
        libFiles=[]
        for lib in libsToUse:
            tmpLibFiles=(progSpec.fetchTagValue([tags, buildTags], 'libraries.'+ lib +'.libFiles'))
            libFiles+=tmpLibFiles
        #TODO: need debug mode and minimum version
        platform=progSpec.fetchTagValue([tags, buildTags], 'Platform')
        #cdlog(1, "\nWRITING {} FILE(S) AND COMPILING...".format(len(fileSpecs)))
        buildDog.build("-g", '14',  fileName, libFiles, buildName, platform, fileSpecs)
        progSpec.rollBack(objects)
    # GenerateDocuments()


#############################################    L o a d / P a r s e   P r o g r a m   S p e c

if(len(sys.argv) < 2):
    cdErr( "No Filename given.\n")
    exit(1)

file_name = abspath(os.getcwd()) + "/" + sys.argv[1]
codeDogStr = progSpec.stringFromFile(file_name)
codeDogStr = processIncludedFiles(codeDogStr)


# objectSpecs is like: [ProgSpec, objNames]
cdlog(0, "######################   P A R S I N G   C O D E D O G  ({})".format(file_name))
ProgSpec = {}
objNames = []
macroDefs= {}
[tagStore, buildSpecs, objectSpecs] = codeDogParser.parseCodeDogString(codeDogStr, ProgSpec, objNames, macroDefs)
tagStore['dogFilename']=file_name

GenerateSystem(objectSpecs, buildSpecs, tagStore, macroDefs)
cdlog(0, "\n######################   D O N E")
endTime = timer()
cdlog(0, "\nTIME: {0:.2f} seconds".format(endTime-startTime))
progSpec.noError=True
