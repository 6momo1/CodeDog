#!/usr/bin/env python
# CodeDog Program Maker

import progSpec
import codeDogParser
import buildDog
import TestDog


##########  Library Shells
import libraryMngr
import Lib_GTK3
import Lib_Java
import Lib_CPP
import Lib_Swing
import Lib_Android
import Lib_AndroidGUI
import Lib_Swift

import Lib_CodeDog

import CodeGenerator
import xlator_CPP
import xlator_Java
#import xlator_JavaScript
import xlator_Swift


import re
import os
import sys
import errno
import platform
import copy
import atexit
from progSpec import cdlog, cdErr
from os.path import abspath
from timeit import default_timer as timer

atexit.register(progSpec.whenExit)
sys.setrecursionlimit(2000)
startTime = timer()

'''
def writeFile(path, fileName, outStr, fileExtension):
    try:
        os.makedirs(path)
    except OSError as exception:
        if exception.errno != errno.EEXIST: raise
    fileName += fileExtension
    fo=open(path + os.sep + fileName, 'w')
    fo.write(outStr)
    fo.close()
    '''

def GenerateProgram(objects, buildTags, tagsList, libsToUse):
    result='No Language Generator Found for '+buildTags['Lang']
    langGenTag = buildTags['Lang']
    if(langGenTag == 'CPP'):
        cdlog(0, "\n##############  G E N E R A T I N G   C + +   P R O G R A M . . .")
        xlator = xlator_CPP.fetchXlators()
    elif(langGenTag == 'Java'):
        cdlog(0, "\n##############  G E N E R A T I N G   J A V A   P R O G R A M . . .")
        xlator = xlator_Java.fetchXlators()
    elif(langGenTag == 'Swift'):
        cdlog(0,"\n##############  G E N E R A T I N G   S W I F T   P R O G R A M . . .")
        xlator = xlator_Swift.fetchXlators()
    else:
        cdErr( "ERROR: No language generator found for ".format( langGenTag))
        exit(1)
    result=CodeGenerator.generate(objects, tagsList, libsToUse, xlator)
    return result

def GenerateSystem(objects, buildSpecs, tags, macroDefs):
    cdlog(0, "\n######################   G E N E R A T I N G   P R O G R A M   S P E C I F I C A T I O N")
#    ScanAndApplyPatterns(objects, tags)
#    stringStructs.CreateStructsForStringModels(objects, tags)
#    GroomTags(tags)

    count=0
    for buildSpec in buildSpecs:
        count+=1
        buildName=buildSpec[0]
        buildTags=buildSpec[1]
        testMode=progSpec.fetchTagValue([tags, buildTags], 'testMode')
        progSpec.MarkItems=True
        if testMode=='makeTests' or testMode=='runTests':
            testTagStore=TestDog.generateTestCode(objects, buildTags, tags, macroDefs)
            tagsList=[tags, buildTags, testTagStore]
        else:
            tagsList=[tags, buildTags]
        cdlog(0, "\n######################   G E N E R A T I N G   S O U R C E   C O D E   S Y S T E M   {}   o f   {}...   ({})".format(count, len(buildSpecs), buildName))
        libsToUse=libraryMngr.ChooseLibs(objects, buildTags, tags)
        fileSpecs = GenerateProgram(objects, buildTags, tagsList, libsToUse)

        #GenerateBuildSystem()###################################################
        fileName = progSpec.fetchTagValue(tagsList, 'FileName')
        langGenTag = buildTags['Lang']
        libFiles=[]
        tagsFromLibFiles = libraryMngr.getTagsFromLibFiles()
        for lib in libsToUse:
            if 'interface' in tagsFromLibFiles[lib] and 'libFiles' in tagsFromLibFiles[lib]['interface']:
                tmpLibFiles = tagsFromLibFiles[lib]['interface']['libFiles']
                libFiles+=tmpLibFiles
        #TODO: need debug mode and minimum version
        platform=progSpec.fetchTagValue([tags, buildTags], 'Platform')
        #cdlog(1, "\nWRITING {} FILE(S) AND COMPILING...".format(len(fileSpecs)))
        buildDog.build("-g", '14',  fileName, libFiles, buildName, platform, fileSpecs)
        progSpec.rollBack(objects)
    # GenerateDocuments()


#############################################    L o a d / P a r s e   P r o g r a m   S p e c

if(len(sys.argv) < 2): cdErr( "No Filename given.\n")

libraryMngr.findLibraryFiles()

filename = abspath(os.getcwd()) + "/" + sys.argv[1]
[ProgSpec, objNames, macroDefs] = [ {}, [], {} ]
[tagStore, buildSpecs, objectSpecs] = CodeGenerator.loadProgSpecFromDogFile(filename, ProgSpec, objNames, macroDefs)
tagStore['dogFilename']=filename

macroDefs= {}
GenerateSystem(objectSpecs, buildSpecs, tagStore, macroDefs)
cdlog(0, "\n######################   D O N E")
endTime = timer()
cdlog(0, "\nTIME: {0:.2f} seconds".format(endTime-startTime))
progSpec.noError=True
