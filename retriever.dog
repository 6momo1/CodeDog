/- retriever.dog

struct aItem{
    me int:           priority
    our infDeepItr:   LHS
    our infDeepItr:   RHS
    our aItem[list]:  predecessors
    our aItem:        successor
    me flag:          copyRHSTypeToLHS
    me flag:          rejected
    me mode[valueFailed, valueVerified, copyValueLHStoRHS, copyValueRHStoLHS]:        valueAction
    me mode[sizeFailed, sizeVerified, copySizeLHStoRHS, copySizeRHStoLHS]:        sizeAction

    me mode[getAllPlusSize, startPos, endPos, query, size, length, first, last, Nth, tagged, typed]:opTypes

    me void: init(me int: Priority, our infDeepItr: lhs, our infDeepItr: rhs)<-{
        priority <- Priority
        Allocate(LHS)
        Allocate(RHS)
        lhs.copyThisTo(LHS)
        rhs.copyThisTo(RHS)
    }

    me string: printAgendaItem()<-{
        if(self == NULL){return("NULL")}
        me agent: a
        me string: itemStr <- "["
        me string: innrStr
        itemStr <- itemStr + toString(priority) + " || "
        if (LHS.crntCursor !=NULL and LHS.crntCursor.item!=NULL){
            innrStr <- a.printInfon(LHS.crntCursor.item)
            if(LHS.state==sSecondVisit) {innrStr <- "<"+innrStr + ">"}
            itemStr <- itemStr + innrStr;
        }
        else{itemStr <- itemStr +" ITEM NULL"}
        itemStr <- itemStr + " |=| "
        if (RHS.crntCursor !=NULL and RHS.crntCursor.item!=NULL){
            innrStr <- a.printInfon(RHS.crntCursor.item)
            if(RHS.state==sSecondVisit) {innrStr <- "<"+innrStr + ">"}
            itemStr <- itemStr + innrStr;
        }else{itemStr <- itemStr +"ITEM NULL"}
        itemStr <- itemStr + "]"
        return(itemStr)
    }

}

struct priorityQ{
    our aItem[multimap int]: PQ

    me void: push(our aItem: newItem) <- {
        PQ.insert(newItem.priority, newItem)
    }

    our aItem: pop() <- {
        our aItem: min <- PQ.front()
        PQ.erase(PQ.front())
        return(min)
    }

    me bool: isEmpty() <- {
        return(PQ.size() == 0)
    }
}

struct retriever{
    me priorityQ: agenda
    me int: errorCode
    me string: errorMsg
    their agent: parentAgent

    void: addItem(our aItem: agendaItem)<-{
/-      prepWorkList(agendaItem.LHS.crntCursor)
/-      prepWorkList(agendaItem.RHS)
/-      doPreMerge(agendaItem)
        /- push onto heap and verify no duplicates
        /-print ("*********retriever.addItem: ", agendaItem.printAgendaItem() ,"\n")
        agenda.push(agendaItem)
    }

    void: printAgenda()<-{
        print("    |PRINT AGENDA____________\n")
        withEach agendaItem in agenda.PQ:{
            print("    |        item: ", agendaItem.printAgendaItem(), "\n")
        }
        print("    |______________________\n")
    }

    our aItem: resolve(our aItem: agendaItem, me string: indent)<-{
        our aItem: retVal
        if(agendaItem.predecessors.size()>0){
            /- Choose pedigree
            me int: pedigreeChosen <- 0
            our aItem: pred <- agendaItem.predecessors[pedigreeChosen]
            pred.successor <- agendaItem
            retVal <- resolve(pred, indent +"    ")
            if(retVal==NULL){retVal<-pred}
        }

        return(retVal)
    }

    void: processAgenda()<-{
        withEach count in WHILE(!agenda.isEmpty()):{
            /-TODO: remove break
            if (count > 200){
                print("Item priority exceded 200!!!!!\n")
                break()
            }
            processItem(agenda.pop())

        }
    }

    void: addItemsToAgenda(our aItem: pred, our infDeepItr: LHSChain, our infDeepItr: RHSChain)<-{
        me int: priority <- pred.priority
        if(pred.LHS.crntCursor.item.value.fType!=LST and pred.RHS.crntCursor.item.value.fType!=LST){priority <- priority+1}
        our infDeepItr: currentLHS <- LHSChain
        withEach count in WHILE(currentLHS != NULL):{
            our infDeepItr: currentRHS <- RHSChain
            withEach count in WHILE(currentRHS != NULL):{
                our aItem: nextItem
                Allocate(nextItem)
                nextItem.init(priority, currentLHS, currentRHS)
                if(pred!=NULL){nextItem.predecessors.pushLast(pred)}
                addItem(nextItem)

                currentRHS <- currentRHS.next
            }
            currentLHS <- currentLHS.next
        }
        /-printAgenda()
    }

    void: processItem(our aItem: agendaItem)<-{
        /-print("_______________________________________\nprocessItem: ", agendaItem.printAgendaItem() ,"\n")
        our agent: a
        me string: S1 <- agendaItem.printAgendaItem()
        me int: agendaLHS_state <- agendaItem.LHS.state
        our infDeepItr: remainder
        if(agendaLHS_state == sNotASeq or agendaLHS_state == sFirstVisit){
          /-parentAgent.prepWorkList(agendaItem.LHS.crntCursor)
          /-parentAgent.addWorkItemsToAgenda(agendaItem.priority, agendaItem, agendaItem.LHS)
            if(agendaItem.RHS.state == sEOL){return()}
            remainder <- parentAgent.tryMERGE(agendaItem)

            if (agendaItem.rejected){
                return()
            }

        } else if(agendaLHS_state == sSecondVisit){
            if(agendaItem.LHS.nestLvl == 0){
                our aItem: topItem <- resolve(agendaItem, "    resolve: ")
                parentAgent.stitch(topItem, "")
            }
            if(agendaItem.RHS.state == sEOL){return()}
        } else if(agendaLHS_state == sEOL){
            return()
        } else {
            print("LHS-STATE:", agendaLHS_state)
            exit(2)
        }

        our infDeepItr: LHSChain <- NULL
        our infDeepItr: RHSChain <- NULL

        me bool: remainderSideRHS <- true  /- Later this may be false if the LHS has a remainder
        if(remainder != NULL){
            if(remainderSideRHS){
                RHSChain <-remainder
            } else {
                LHSChain <-remainder
            }
        }

        me int: LHSfType <- agendaItem.LHS.crntCursor.item.value.fType
        me int: RHSfType <- agendaItem.RHS.crntCursor.item.value.fType
        if (LHSChain == NULL){
            if (LHSfType != LST and RHSfType == LST){
                /-print("    LHSChain <- agendaItem.LHS \n")
                LHSChain <- agendaItem.LHS
            }else {
                /-print("    LHSChain from getNextDeDotted\n")
                LHSChain <- agendaItem.LHS.getNextDeDotted()

            }
        }
        if (RHSChain == NULL){
            if (LHSfType == LST and RHSfType != LST){
                /-print("    RHSChain <- agendaItem.RHS \n")
                RHSChain <- agendaItem.RHS
            }else{
                /-print("    RHSChain from getNextDeDotted\n")
                RHSChain <- agendaItem.RHS.getNextDeDotted()
            }
        }

        if (LHSChain != NULL and RHSChain != NULL){
            addItemsToAgenda(agendaItem, LHSChain, RHSChain)
        }
    }

}
