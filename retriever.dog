/- retriever.dog

struct aItem{
    me int:          priority
    our infDeepItr:  LHS
    our infDeepItr:  RHS
    our aItem[list]: predecessors
    me int:          actionCommand

    me mode[getAllPlusSize, startPos, endPos, query, size, length, first, last, Nth, tagged, typed]:opTypes

    me void: init(me int: Priority, our infDeepItr: lhs, our infDeepItr: rhs)<-{
        priority <- Priority
        Allocate(LHS)
        Allocate(RHS)
        lhs.copyThisTo(LHS)
        rhs.copyThisTo(RHS)
    }

    me string: printAgendaItem()<-{
        me agent: a
        me string: itemStr <- "["
        me string: innrStr
        itemStr <- itemStr + toString(priority) + " || "
        if (LHS.crntCursor.item!=NULL){
            innrStr <- a.printInfon(LHS.crntCursor.item)
            if(LHS.state==sSecondVisit) {innrStr <- "<"+innrStr + ">"}
            itemStr <- itemStr + innrStr;
        }
        else{itemStr <- itemStr +" ITEM NULL"}
        itemStr <- itemStr + " |=| "
        if (RHS.crntCursor.item!=NULL){
            innrStr <- a.printInfon(RHS.crntCursor.item)
            if(RHS.state==sSecondVisit) {innrStr <- "<"+innrStr + ">"}
            itemStr <- itemStr + innrStr;
        }
        else{itemStr <- itemStr +"ITEM NULL"}
        itemStr <- itemStr + "]"
        return(itemStr)
    }
}

struct priorityQ{
    our aItem[multimap int]: PQ

    me void: push(our aItem: newItem) <- {
        PQ.insert(newItem.priority, newItem)
    }

    our aItem: pop() <- {
        our aItem: min <- PQ.front()
        PQ.erase(PQ.front())
        return(min)
    }

    me bool: isEmpty() <- {
        return(PQ.size() == 0)
    }
}

struct retriever{
    me priorityQ: agenda
    me int: errorCode
    me string: errorMsg
    their agent: parentAgent

    void: addItem(our aItem: agendaItem)<-{
/-      prepWorkList(agendaItem.LHS.crntCursor)
/-      prepWorkList(agendaItem.RHS)
/-      doPreMerge(agendaItem)
        /- push onto heap and verify no duplicates
        print ("*********retriever.addItem: ", agendaItem.printAgendaItem() ,"\n")
        agenda.push(agendaItem)
    }

    void: printAgenda()<-{
        print("    |PRINT AGENDA____________\n")
        withEach agendaItem in agenda.PQ:{
            print("    |        item: ", agendaItem.printAgendaItem(), "\n")
        }
        print("    |______________________\n")
    }

    void: processAgenda()<-{
        print("PROCESS AGENDA\n")
        withEach count in WHILE(!agenda.isEmpty()):{
            /-TODO: remove break
            if (count > 200){
                print("Item priority exceded 200!!!!!\n")
                break()
            }
            processItem(agenda.pop())

        }
    }

    void: addItemsToAgenda(me int: priority, our aItem: pred, our infDeepItr: LHSChain, our infDeepItr: RHSChain)<-{
        our infDeepItr: currentLHS <- LHSChain
        withEach count in WHILE(currentLHS != NULL):{
            our infDeepItr: currentRHS <- RHSChain
            withEach count in WHILE(currentRHS != NULL):{
                our aItem: nextItem
                Allocate(nextItem)
                nextItem.init(priority, currentLHS, currentRHS)
                nextItem.predecessors.pushLast(pred)
                addItem(nextItem)
                currentRHS <- currentRHS.next
            }
            currentLHS <- currentLHS.next
        }
        printAgenda()
    }

    void: processItem(our aItem: agendaItem)<-{
              print("_______________________________________\nprocessItem: ", agendaItem.printAgendaItem() ,"\n")
        our agent: a
        me string: S1 <- agendaItem.printAgendaItem()
/-        parentAgent.prepWorkList(agendaItem.LHS.crntCursor)
/-      parentAgent.addWorkItemsToAgenda(agendaItem.priority, agendaItem, agendaItem.LHS)
        our infDeepItr: remainder <- parentAgent.tryMERGE(agendaItem)
        our infDeepItr: LHSChain <- NULL
        our infDeepItr: RHSChain <- NULL

        me bool: notEOL <- true
        me bool: remainderSideRHS <- true  /- Later this may be false if the LHS has a remainder
        if(remainder != NULL){
            if(remainderSideRHS){
                print("    remainder RHS\n")
                RHSChain <-remainder
            } else {
                print("    remainder LHS\n")
                LHSChain <-remainder
            }
        } else if (agendaItem.actionCommand==1){
            return()
        }

        me int: LHSfType <- agendaItem.LHS.crntCursor.item.value.fType
        me int: RHSfType <- agendaItem.RHS.crntCursor.item.value.fType
        if (LHSChain == NULL){
            if (LHSfType != LST and RHSfType == LST){
                LHSChain <- agendaItem.LHS
            }else {
              print("    LHS getNextDeDotted\n")
                LHSChain <- agendaItem.LHS.getNextDeDotted()

            }

            if(agendaItem.LHS.state == sSecondVisit){notEOL<-false}
        }
        if (RHSChain == NULL){
            if (LHSfType == LST and RHSfType != LST){
                print("    LHS LST & RHS not LST\n")
                RHSChain <- agendaItem.RHS
            }else{
        print("    RHS getNextDeDotted\n")
                RHSChain <- agendaItem.RHS.getNextDeDotted()
            }
        }

        if (LHSChain != NULL and RHSChain != NULL){
            print("    LHSChain != NULL and RHSChain != NULL", "\n")
            print("    LHS: ", a.printInfon(LHSChain.crntCursor.item), " |RHS: ", a.printInfon(RHSChain.crntCursor.item), "\n")
            me int: priority <- agendaItem.priority
            me int: LHS_state <- LHSChain.state
            if(LHS_state == sFirstVisit or LHS_state == sNotASeq){
                print("processItem:sFirstVisit\n")
                if(agendaItem.LHS.crntCursor.item.value.fType!=LST and agendaItem.RHS.crntCursor.item.value.fType!=LST){priority <- priority+1}
                addItemsToAgenda(priority, agendaItem, LHSChain, RHSChain)
            }else if(LHS_state == sSecondVisit){
                addItemsToAgenda(priority + 1, agendaItem, LHSChain, RHSChain)
            } else if(LHS_state == sEOL){
                /-
            }else {
                print("Unexpected iterator state in normalizer: ", LHS_state, ".\n")
            }
        }
    }

}
