[['LIBS/EarleyParser.Lib.dog',
  [{'className': 'production',
    'fields': [{'fieldID': 'production::isTerm'},
               {'fieldID': 'production::prodType'},
               {'fieldID': 'production::constStr'},
               {'fieldID': 'production::items'},
               {'fieldID': 'production::isNullable'},
               {'fieldID': 'production::nullabilityCalced'},
               {'fieldID': 'production::toStr(int64,int64,List)',
                'status': 'Impl'}]},
   {'className': 'pedigree',
    'fields': [{'fieldID': 'pedigree::pred'},
               {'fieldID': 'pedigree::cause'},
               {'fieldID': 'pedigree::productionID'}]},
   {'className': 'stateRec',
    'fields': [{'fieldID': 'stateRec::productionID'},
               {'fieldID': 'stateRec::SeqPosition'},
               {'fieldID': 'stateRec::originPos'},
               {'fieldID': 'stateRec::crntPos'},
               {'fieldID': 'stateRec::pedigrees'},
               {'fieldID': 'stateRec::buCause'},
               {'fieldID': 'stateRec::next'},
               {'fieldID': 'stateRec::child'},
               {'fieldID': 'stateRec::resolved'},
               {'fieldID': 'stateRec::nextIsFilled'},
               {'fieldID': 'stateRec::childIsFilled'},
               {'fieldID': 'stateRec::fullyComplete'},
               {'fieldID': 'stateRec::stringify(EParser)', 'status': 'Impl'},
               {'fieldID': 'stateRec::MARKer1'},
               {'fieldID': 'stateRec::MARKer2'}]},
   {'className': 'stateSets', 'fields': [{'fieldID': 'stateSets::stateRecs'}]},
   {'className': 'EParser',
    'fields': [{'fieldID': 'EParser::streamToParse'},
               {'fieldID': 'EParser::startProduction'},
               {'fieldID': 'EParser::SSets'},
               {'fieldID': 'EParser::grammar'},
               {'fieldID': 'EParser::parseFound'},
               {'fieldID': 'EParser::lastTopLevelItem'},
               {'fieldID': 'EParser::topParseNode'},
               {'fieldID': 'EParser::highestSlotSoFar'},
               {'fieldID': 'EParser::errorMesg'},
               {'fieldID': 'EParser::errLineNum'},
               {'fieldID': 'EParser::errCharPos'},
               {'fieldID': 'EParser::rnames'},
               {'fieldID': 'EParser::streamingMode'},
               {'fieldID': 'EParser::streamingSRecNextMutex'},
               {'fieldID': 'EParser::streamingSRecNextLock'},
               {'fieldID': 'EParser::streamingSRecChildMutex'},
               {'fieldID': 'EParser::streamingSRecChildLock'},
               {'fieldID': 'EParser::doQuickParse'},
               {'fieldID': 'EParser::setQuickParse(bool)', 'status': 'Impl'},
               {'fieldID': 'EParser::getCharAt(int64)', 'status': 'Impl'},
               {'fieldID': 'EParser::getItrAt(int64)', 'status': 'Impl'},
               {'fieldID': 'EParser::clearGrammar', 'status': 'Impl'},
               {'fieldID': 'EParser::addTerminalProd(string,int,string)',
                'status': 'Impl'},
               {'fieldID': 'EParser::addNon_TermProd(string,int,List)',
                'status': 'Impl'},
               {'fieldID': 'EParser::isNullableSet(production)',
                'status': 'Impl'},
               {'fieldID': 'EParser::preCalcNullability', 'status': 'Impl'},
               {'fieldID': 'EParser::dump', 'status': 'Impl'},
               {'fieldID': 'EParser::addSRecToGrapher(stateRec)',
                'status': 'Impl'},
               {'fieldID': 'EParser::dumpGraph(string,int)', 'status': 'Impl'},
               {'fieldID': 'EParser::dumpResolvePath(stateRec)',
                'status': 'Impl'},
               {'fieldID': 'EParser::dumpParseTrace(string,int)',
                'status': 'Impl'},
               {'fieldID': 'EParser::topOffSSets', 'status': 'Impl'},
               {'fieldID': 'EParser::chkStr(int64,string)', 'status': 'Impl'},
               {'fieldID': 'EParser::scrapeUntil(int64,string)',
                'status': 'Impl'},
               {'fieldID': 'EParser::escapedScrapeUntil(int,string)',
                'status': 'Impl'},
               {'fieldID': 'EParser::scrapeAlphaSeq(int64)', 'status': 'Impl'},
               {'fieldID': 'EParser::scrapeUintSeq(int64)', 'status': 'Impl'},
               {'fieldID': 'EParser::scrapeHexNum(int64)', 'status': 'Impl'},
               {'fieldID': 'EParser::scrapeBinNum(int64)', 'status': 'Impl'},
               {'fieldID': 'EParser::scrapeAlphaNumSeq(int64)',
                'status': 'Impl'},
               {'fieldID': 'EParser::scrapeAlphaNum_Seq(int64)',
                'status': 'Impl'},
               {'fieldID': 'EParser::scrapePrintableSeq(int64)',
                'status': 'Impl'},
               {'fieldID': 'EParser::scrapeCComment(int)', 'status': 'Impl'},
               {'fieldID': 'EParser::scrapeWSC(int64)', 'status': 'Impl'},
               {'fieldID': 'EParser::scrapeWS(int64)', 'status': 'Impl'},
               {'fieldID': 'EParser::scrapeQuotedStr(int64)', 'status': 'Impl'},
               {'fieldID': 'EParser::scrapeQuotedStr1(int64)',
                'status': 'Impl'},
               {'fieldID': 'EParser::scrapeQuotedStr2(int64)',
                'status': 'Impl'},
               {'fieldID': 'EParser::scrapeCID(int64)', 'status': 'Impl'},
               {'fieldID': 'EParser::scrapeIntSeq(int64)', 'status': 'Impl'},
               {'fieldID': 'EParser::scrapeToEOL(int64)', 'status': 'Impl'},
               {'fieldID': 'EParser::textMatches(int,int64)', 'status': 'Impl'},
               {'fieldID': 'EParser::addProductionToStateSet(int64,int,int64,int64,stateRec,stateRec,string)',
                'status': 'Impl'},
               {'fieldID': 'EParser::SRecsToComplete'},
               {'fieldID': 'EParser::crntPos'},
               {'fieldID': 'EParser::resetCompletions(int64)',
                'status': 'Impl'},
               {'fieldID': 'EParser::registerCompletion(stateRec)',
                'status': 'Impl'},
               {'fieldID': 'EParser::setSRecNextTo(stateRec,stateRec)',
                'status': 'Impl'},
               {'fieldID': 'EParser::setSRecChildTo(stateRec,stateRec)',
                'status': 'Impl'},
               {'fieldID': 'EParser::advanceCompletion(stateRec,stateRec)',
                'status': 'Impl'},
               {'fieldID': 'EParser::applyPartialCompletion(stateRec)',
                'status': 'Impl'},
               {'fieldID': 'EParser::complete(stateRec,int64)',
                'status': 'Impl'},
               {'fieldID': 'EParser::ruleIsDone(stateRec)', 'status': 'Impl'},
               {'fieldID': 'EParser::addRepItemToStateSet(stateRec,int64,production)',
                'status': 'Impl'},
               {'fieldID': 'EParser::doParse', 'status': 'Impl'},
               {'fieldID': 'EParser::countLinesToCharPos(int64)',
                'status': 'Impl'},
               {'fieldID': 'EParser::doesParseHaveError', 'status': 'Impl'},
               {'fieldID': 'EParser::choosePedigreeToFollow(int,List)',
                'status': 'Impl'},
               {'fieldID': 'EParser::bottomUpResolve(stateRec,string)',
                'status': 'Impl'},
               {'fieldID': 'EParser::topDownResolve(stateRec,string)',
                'status': 'Impl'},
               {'fieldID': 'EParser::docPos(int,stateRec,string)',
                'status': 'Impl'},
               {'fieldID': 'EParser::displayParse(stateRec,string)',
                'status': 'Impl'},
               {'fieldID': 'EParser::makeStr(stateRec)', 'status': 'Impl'},
               {'fieldID': 'EParser::makeInt(stateRec)', 'status': 'Impl'},
               {'fieldID': 'EParser::makeHexInt(stateRec)', 'status': 'Impl'},
               {'fieldID': 'EParser::makeBinInt(stateRec)', 'status': 'Impl'},
               {'fieldID': 'EParser::getChildStateRec(stateRec)',
                'status': 'Impl'},
               {'fieldID': 'EParser::getNextStateRec(stateRec)',
                'status': 'Impl'},
               {'fieldID': 'EParser::initParseFromStream(int,strBuf)',
                'status': 'Impl'},
               {'fieldID': 'EParser::initParseFromString(int,string)',
                'status': 'Impl'},
               {'fieldID': 'EParser::setStreamingMode(bool)',
                'status': 'Impl'}]}]]]
