// testParse.dog

LinuxBuild: CPU='amd64' Language='c++' optimize='speed';

BuildCmd = `g++ -std=gnu++11 testParse.cpp -o test`
Title = "CodeDog parsing test"
FileName = "testParse.cpp"
Version = "0.8"
CopyrightMesg = "Copyright (c) 2015-2016 Bruce Long"
Authors = "Bruce Long"
Description = "This test file is for testing CodeDog."

LicenseText = `This file is part of the "CodeDog test suite"
The CodeDog test suite is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
The CodeDog test suite is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
You should have received a copy of the GNU General Public License along with the CodeDog test suite.  If not, see www.gnu.org/licenses.`

langToGen="CPP"

featuresNeeded = {}

runCode=`
    EParser parser;
    parser.populateGrammar();
    parser.initPosStateSets(parser.parse_testParse_str, "[Robert234'Hello World!']");
    parser.doParse();
    shared_ptr<stateRec> topItem = parser.resolve(parser.LastTopLevelItem, "");
    parser.displayParse(topItem, "");
`

Include=`<memory>, <fstream>, <cstdint>, <string>, <cstring>, <vector>, <deque>, <map>, <cstdarg>, <iostream>`

#include libraryTags.dog


model month {mode [January, February, March, April, May, June, July, August, September, October, November, December] : month}

model date [
    me int32: month
    me int32: date
    me int32: year
]
struct date::mem auto

model personRec {
    flag: hired
    me int32:  age
    me string: name
    me string: address
    me date::mem:   birthday
}

struct personRec::mem auto

string date::str {
    > int32:month
     ","
    > int32:date
    > int32:year
}
//do makeGUI(listMgr)

string personRec::str {
    flag: hired
    > me int32:  age
    > me string: name
    > me string: address
  //  > me date_str:   birthday
  //  > me {me int32: height me int32: weight}: measurements
}

string numChar["1" | "2" | "3" | "4"]

model testParse{
    "Robert"
    numChar[list uint32]: numbStr
    me string: worldMesg
}

string testParse::str{
    "["
    "Robert"
    > numChar[list uint32]: numbStr
    > me string: worldMesg
    "]"
}

struct testParse::mem auto

do Write_Main(xyz)
