// testParse.dog

LinuxBuild: CPU='amd64' Lang='CPP' optimize='speed';
//SwingBuild: Platform='Java' CPU='JavaVM' Lang='Java' optimize='speed';

BuildCmd = "g++ -g -std=gnu++14 `pkg-config --cflags gtk+-3.0` testParse.cpp `pkg-config --libs gtk+-3.0` -o testParse"
Title = "CodeDog parsing test"
FileName = "testParse"
Version = "0.8"
CopyrightMesg = "Copyright (c) 2015-2016 Bruce Long"
Authors = "Bruce Long"
Description = "This test file is for testing CodeDog."

LicenseText = `This file is part of the "CodeDog test suite"
The CodeDog test suite is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
The CodeDog test suite is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
You should have received a copy of the GNU General Public License along with the CodeDog test suite.  If not, see www.gnu.org/licenses.`

featuresNeeded = {}

runCode=`
    me EParser: parser
    parser.populateGrammar()
    parser.initPosStateSets(parser.parse_testParse_str, "[Robert 1234321 'sally''bob''alice'  4/19/1967 'Hello World!' 1 1/01/1901 2/02/1902 3/03/1903 4/04/1904 'X' 'testName' 27 ]")   // "[Robert 234 4/19/1967 'Hello World!'1]")
  //  parser.initPosStateSets(parser.parse_testParse_str, "[Robert 1234321 'testNamesList1' 'testNamesList2' 'testNamesList3' 4/19/1967 'Hello World!'1 6/07/1967 3/04/1934 ]")

    parser.doParse()
    if(parser.doesParseHaveError()){
        print("\nParse Error:", parser.errorMesg, " at line ", parser.errLineNum,":", parser.errCharPos, "\n")
        exit(1)
    }
    our stateRec: topItem <- parser.resolve(parser.lastTopLevelItem, "")
    parser.displayParse(topItem, "")
    print("=======================\n")
    me testParse: TPM
    parser.ExtractStruct_testParse_str(topItem, TPM)

    if(TPM.worldMesg == 'Hello World!'){
        print("\ntest passed TPM.Mesg: ", TPM.worldMesg, "\n")
    }
    else{
        print("\nTEST FAILED: worldMesg\n")
    }

    if(TPM.birthday.month == 4 and TPM.birthday.day == 19 and TPM.birthday.year == 1967){
        print("test passed Birthday: ", TPM.birthday.month, "-", TPM.birthday.day, "-", TPM.birthday.year, "\n")
    }
    else{
        print("TEST FAILED: Birthday\n")
    }

    if(TPM.numbStr[0] == '1' and TPM.numbStr[1] == '2' and TPM.numbStr[2] == '3'and TPM.numbStr[3] == '4'and TPM.numbStr[4] == '3'and TPM.numbStr[5] == '2' and TPM.numbStr[6] == '1' and TPM.numbStr.size() == 7){
        print('test passed numbStr:' )
        withEach num in TPM.numbStr:{
            print(' ', num, ", ")
        }
        print('\n')
    }
    else{
        print("TEST FAILED: TPM.numbStr")
        withEach num in TPM.numbStr:{
            print('   ', num, ", ")
        }
        print('\n')
    }

    if(TPM.myNum == '1' ){
        print("test passed TPM.myNum: ", TPM.myNum, "\n")
    }
    else{
        print("TEST FAILED: myNum\n")
    }

    if(TPM.birthdays[0].month == 1 and TPM.birthdays[0].day == 01 and TPM.birthdays[0].year == 1901 and TPM.birthdays[1].month == 2 and TPM.birthdays[1].day == 02 and TPM.birthdays[1].year == 1902 and TPM.birthdays[2].month == 3 and TPM.birthdays[2].day == 03 and TPM.birthdays[2].year == 1903 and TPM.birthdays[3].month == 4 and TPM.birthdays[3].day == 04 and TPM.birthdays[3].year == 1904 and TPM.birthdays.size() == 4){
        print("test passed TPM.birthdays: ")
        withEach date in TPM.birthdays:{
            print(date.month, "-", date.day, "-", date.year, ", ")
        }
        print('\n')
    }
    else{
        print("TEST FAILED: birthdays\n")
    }

    if(TPM.favoriteDates.size() == 0){
        print("test passed TPM.favoriteDates: None\n")
    }
    else{
        print("TEST FAILED: favoriteDates\n")
    }

    if(TPM.name == "testName" ){
        print("test passed TPM.name: ", TPM.name, "\n")
    }
    else{
        print("TEST FAILED: name\n")
    }
/*
    if(TPM.namesList[0] == 'testNamesList1' and TPM.namesList[1] == 'testNamesList2' and TPM.namesList[2] == 'testNamesList3' and TPM.namesList.size() == 3){
        print("test passed TPM.namesList: ")
        withEach name in TPM.namesList:{
            print(name, ", ")
        }
        print('\n')
    }
    else{
        print("TEST FAILED: namesList\n")
    }
*/
    if(TPM.age == 27 ){
        print("test passed TPM.age: ", TPM.age, "\n")
    }
    else{
        print("TEST FAILED: age\n")
    }


`

Include=`<memory>, <fstream>, <cstdint>, <string>, <cstring>, <vector>, <deque>, <map>, <cstdarg>, <iostream>`

#include libraryTags.dog


model month {mode [January, February, March, April, May, June, July, August, September, October, November, December] : month}

model date {
    me 1..12: month
    me int32: day
    me int32: year
}
struct date::mem auto

string date::str {
    > int32:month
     "/"
    > int32:day "/"
    > int32:year            >me ws
}

string numChar["1" | "2" | "3" | "4"]

model testParse{
    "Robert"
    numChar[list]: numbStr
    me string[list]: namesList
    me date: birthday
    me string: worldMesg
    me numChar: myNum
    me date[list]: birthdays
    me string: x1
    me date[list]: favoriteDates

    //TODO: change name to their
    their string: name
    // TODO: change age to my
    me int32: age
    // TODO: get this working then convert this to their
    me date: anniversary

//    me string: tag
}

string testParse::str{
    "["
    "Robert"                                    >me ws
    > numChar[list]: numbStr                    >me ws
    //TODo: get names list working then change to our
      > me string[list]: namesList              >me ws
    > me date::str: birthday
    > me string: worldMesg                      >me ws
    //> me numChar[opt]: optNum ","
    > me numChar: myNum                         >me ws
    > me date::str[list]: birthdays
    > me string: x1                             >me ws
    > me date::str[list]: favoriteDates

    > me string: name " "
    > me int32: age " "
    "]"
/*
   >[   "?"
    |   "%W"
    |   "%this"
    |   >me CID: tag
    |   >{ "*" >me ws "+"}
    ]
*/
}

//struct testParse::mem auto
struct testParse::mem{
    "Robert"
    me string[list]: numbStr
    me string[list]: namesList
    me date: birthday
    me string: worldMesg
    me string: myNum
    me date[list]: birthdays
    me string: x1
    me date[list]: favoriteDates

    their string: name
    me int32: age
    me date: anniversary
}

do Write_Main(xyz)
