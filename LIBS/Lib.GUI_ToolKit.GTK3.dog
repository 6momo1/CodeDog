/-############  Add GUI-Toolkit features using GTK3
requirements = [
    [tagOneOf, Platform, [Linux, OS-X_Devices, Windows]]
]

interface={
    provides=[GUI_ToolKit_implementation]
    libFiles=[`pkg-config --cflags --libs gtk+-3.0`]
    headers=[gtk/gtk.h, cairo-pdf.h]
}

LibDescription ={
    useStatus   ='dynamic'
    description ='GTK is a GUI Toolkit'
    features    =[GUI_ToolKit, Mouse, Keyboard, Audio]
    platforms   =[Linux, OS-X_Devices, Windows]
    bindings    =[C, CPP, perl, python]
    CPUs        =[i386, amd64, arm7]
}

/-///////////////////////////////  STRUCT CONVERTERS
struct GUI_rect{me double: x1 me double: y1 me double: x2 me double: y2}
struct GUI_offset{their GtkAdjustment:GUI_offset}
struct GUI_item{their GtkWidget: GUI_item}
struct GUI_Frame{their GtkWidget: GUI_Frame}
struct GUI_menuBar{their GtkWidget: GUI_menuBar}
struct GUI_menu{their GtkWidget: GUI_menu}
struct GUI_menuItem{their GtkWidget: GUI_menuItem}
struct GUI_canvas{their GtkWidget: GUI_canvas}
struct GUI_container{their GtkContainer:GUI_container}
struct GUI_ScrollingWindow{their GtkWidget: GUI_ScrollingWindow}
struct INK_Image{their cairo_surface_t: INK_Image}      /- How will the ink look?
struct GUI_callback{me GCallback: GUI_callback}
struct GUI_scalar{me int: GUI_scalar}
/-struct GUI_label{their textView: GUI_label}
struct listWidget{their GtkWidget: listWidget}

/-///////////////////////////////  WIDGETS
struct GUI_storyBoard{
    their GtkWidget: GUI_storyBoard
    me void: addPane(their GUI_Frame: frame) <- <%!gtk_stack_add_named((GtkStack*)%0, (GtkWidget*)%1, %2)%>
}

struct intWidget{
    their GtkWidget: box
    their GtkWidget: dataLabel
    their GtkWidget: dataValue

    me string: getValue() <- <%!gtk_spin_button_get_value_as_int ((GtkSpinButton*)%0)%>
    me string: setValue(me int: val) <- <%!gtk_spin_button_set_value ((GtkSpinButton*)%0, %1)%>

    their GtkWidget: makeIntWidget(me string: name)  <- <%{
        GtkWidget* box = gtk_box_new(GTK_ORIENTATION_HORIZONTAL, 0);
        dataLabel = gtk_label_new(name.data());
        gtk_label_set_width_chars((GtkLabel*)dataLabel, 15);
        gtk_label_set_xalign((GtkLabel*)dataLabel, 0.9);
        gtk_container_add(GTK_CONTAINER (box), dataLabel);
        dataValue = gtk_spin_button_new(NULL, 1, 0);
        gtk_container_add(GTK_CONTAINER (box), dataValue);
        return box;
    }%>
}
struct stringWidget{
    their GtkWidget: box
    their GtkWidget: dataLabel
    their GtkWidget: dataValue

    me string: getValue() <- <%!gtk_entry_get_text((GtkEntry*)%0->dataValue)%>
    me string: setValue(me string: val) <- <%!gtk_entry_set_text((GtkEntry*)%0, %1.data())%>
    their GtkWidget: makeStringWidget(me string: name) <- <%{
        GtkWidget* box = gtk_box_new(GTK_ORIENTATION_HORIZONTAL, 0);
        dataLabel = gtk_label_new(name.data());
        gtk_label_set_width_chars((GtkLabel*)dataLabel, 15);
        gtk_label_set_xalign((GtkLabel*)dataLabel, 0.9);
        gtk_container_add(GTK_CONTAINER (box), dataLabel);
        dataValue = gtk_entry_new();
        gtk_container_add(GTK_CONTAINER (box), dataValue);
        return box;
    } %>
}
struct enumWidget{
    their GtkWidget: box
    their GtkWidget: dataLabel
    their GtkWidget: dataValue
    me string[list]: options

    me string: getValue() <- <%!atoi(gtk_combo_box_text_get_active_text((GtkComboBoxText*)%0))%>
    me string: setValue(me int: val) <- {}

    their GtkWidget: makeEnumWidget(me string: label, me string[list]: Options)  <- <%{
        options = Options;
        box = gtk_box_new(GTK_ORIENTATION_HORIZONTAL, 0);
        dataLabel = gtk_label_new(label.data());
        gtk_label_set_width_chars((GtkLabel*)dataLabel, 15);
        gtk_label_set_xalign((GtkLabel*)dataLabel, 0.9);
        gtk_container_add(GTK_CONTAINER (box), dataLabel);
        dataValue = gtk_combo_box_text_new();
        int idx=0;
        for (string option : options){
            gtk_combo_box_text_append((GtkComboBoxText*)dataValue, to_string(idx).data(), option.data());
            idx+=1;
        }
        gtk_container_add(GTK_CONTAINER (box), dataValue);
        return box;
    }%>
}

struct boolWidget{

}

/-///////////////////////////////  LIST EDITOR WIDGET
struct ListManagerBox{
    their ListWidgetManager: listWidgetMgr
    their GtkWidget:         editorFrame
    their listWidget:        listWidget
    their GtkWidget:         addBtn
    their GtkWidget:         deleteBtn
    their GtkWidget:         editBtn
    me int:                  crntIndex <- 0

    void: handleOnListClick(me int: idx) <- <% {
        cout << "List Clicked at index: "<< to_string(idx)<<"\n";
        crntIndex = idx;
        listWidgetMgr->setCurrentItem(crntIndex);
    } %>
    void: handleAdd() <- <% {
        cout << "Add Btn Clicked\n";
        listWidgetMgr->allocateNewCurrentItem();
        GtkWidget* itemWidget = listWidgetMgr->makeEditableWidget();
        GtkDialogFlags flags = (GtkDialogFlags)(GTK_DIALOG_MODAL);
        GtkWidget* AddItemDialog = gtk_dialog_new_with_buttons ("Add", (GtkWindow*)window, flags, "_OK", 1, "_Cancel", 0, NULL);
        GtkWidget* contentArea = gtk_dialog_get_content_area((GtkDialog*)AddItemDialog);
        gtk_container_add (GTK_CONTAINER (contentArea), itemWidget);

        gtk_widget_show_all(AddItemDialog);
        int result = gtk_dialog_run ((GtkDialog*)AddItemDialog);
        if(result==1){
            cout<<"ACCEPTED "<<result<<"\n";
            listWidgetMgr->updateCrntFromEdited(itemWidget);
            listWidgetMgr->pushCrntToList();
            listWidgetMgr->pushCrntToListView();
        } else {
            cout<<"CANCELED "<<result<<"\n";
        }
        gtk_widget_destroy(AddItemDialog);

    } %>
    void: handleDelete() <- <% {
        cout << "Delete Btn Clicked\n";
    } %>
    void: handleEdit() <- <%{
        cout << "Edit Btn Clicked\n";
    }%>
    their GtkWidget: init_dialog(their ListWidgetManager: LEWM) <- <% {
        listWidgetMgr = LEWM;
        listWidget = listWidgetMgr->makeListViewWidget();
        editorFrame = gtk_box_new(GTK_ORIENTATION_VERTICAL, 0);
        gtk_box_pack_start(GTK_BOX(editorFrame), listWidget, true, true, 0);

        GtkWidget* btnBox = gtk_box_new(GTK_ORIENTATION_HORIZONTAL, 0);
        addBtn = gtk_button_new_with_label("Add");
        deleteBtn = gtk_button_new_with_label("Remove");
        editBtn = gtk_button_new_with_label("Edit");

        gtk_box_pack_start(GTK_BOX(btnBox), addBtn, true, true, 10);
        gtk_box_pack_start(GTK_BOX(btnBox), deleteBtn, true, true, 10);
        gtk_box_pack_start(GTK_BOX(btnBox), editBtn, true, true, 10);
        gtk_box_pack_start(GTK_BOX(editorFrame), btnBox, false, true, 0);

        g_signal_connect(G_OBJECT(listWidget), "row-selected", G_CALLBACK(ListEditorHandleListClick), this);
        g_signal_connect(G_OBJECT(addBtn), "clicked", G_CALLBACK(ListEditorHandleAdd), this);
        g_signal_connect(G_OBJECT(deleteBtn), "clicked", G_CALLBACK(ListEditorHandleDelete), this);
        g_signal_connect(G_OBJECT(editBtn), "clicked", G_CALLBACK(ListEditorHandleEdit), this);

        return editorFrame;
    } %>
}

/-///////////////////////////////  HIGHER LEVEL WIDGETS
struct GLOBAL{
    /- Widgets
    their GtkWidget: makeBoolWidget(me string: label)        <- <%!%Ggtk_entry_new()%>
    their GtkWidget: makeFloatWidget(me string: label)       <- <%!%Ggtk_entry_new()%>
    their GtkWidget: makeNumRangeWidget(me string: label)    <- <%!%Ggtk_entry_new()%>
    their GtkWidget: makeRangeWidget(me string: label)       <- <%!%Ggtk_entry_new()%>
    their GtkWidget: makeTimeWidget(me string: label)        <- <%!%Ggtk_entry_new()%>
    their GtkWidget: makeDateWidget(me string: label)        <- <%!%Ggtk_entry_new()%>
    their GtkWidget: makeTimeWidget()        <- <%!%Ggtk_entry_new()%>
    their GtkWidget: makeDateWidget()        <- <%!%Ggtk_entry_new()%>

    their GtkWidget: makeListWidget(me string: label)        <- <%!%Ggtk_list_box_new()%>
    their GtkWidget: makeRowWidget(me string: label)         <- <%!%Ggtk_list_box_row_new()%>
    their GtkWidget: makeFrameWidget(me string: label)       <- <%!%Ggtk_box_new(GTK_ORIENTATION_VERTICAL, 0)%>
    their GtkWidget: makeMakeXStackWidget(me string: label)  <- <%!%Ggtk_box_new(GTK_ORIENTATION_HORIZONTAL, 50)%>
    their GtkWidget: makeStoryBoardWidget(me string: label)  <- <%!%Ggtk_notebook_new()%>
    their GtkWidget: makeLabelWidget(me string: label)       <- <%!%Ggtk_label_new(%1)%>
    me void: setLabelWidth(their GtkWidget: labelWidget, me int: width) <- <%!gtk_label_set_width_chars((GtkLabel*)%1, %2)%>
    me void: setListWidgetSelectionMode(their listWidget: listWid, me string: mode) <- <%!gtk_list_box_set_selection_mode((GtkListBox *)%1, GTK_SELECTION_SINGLE)%>
    me int: getListRowIndex() <- <%!%Ggtk_list_box_row_get_index((GtkListBoxRow *)%1)%>
    their GtkWidget: getListRowSelected(their listWidget: listWid) <- <%!%G(GtkWidget*)gtk_list_box_get_selected_row((GtkListBox *)%1)%>

    their GtkWidget: makeListEditorWidget(their GtkWidget: listWidget) <- <%{
        GtkWidget* box = gtk_box_new(GTK_ORIENTATION_VERTICAL, 0);
        gtk_box_pack_start(GTK_BOX(box), listWidget, true, true, 0);

        GtkWidget* btnBox = gtk_box_new(GTK_ORIENTATION_HORIZONTAL, 0);
        GtkWidget* addBtn = gtk_button_new_with_label("Add");
        GtkWidget* delBtn = gtk_button_new_with_label("Remove");
        GtkWidget* editBtn = gtk_button_new_with_label("Edit");

        gtk_box_pack_start(GTK_BOX(btnBox), addBtn, true, true, 10);
        gtk_box_pack_start(GTK_BOX(btnBox), delBtn, true, true, 10);
        gtk_box_pack_start(GTK_BOX(btnBox), editBtn, true, true, 10);
        gtk_box_pack_start(GTK_BOX(box), btnBox, false, true, 0);
        return box;
    }%>
}
struct GLOBAL{
    void: ListEditorHandleListClick(their GtkListBox: box, their GtkListBoxRow: row, their void: user_data) <- <% {
        ListManagerBox *listMgrBox =(ListManagerBox *)user_data;
        int idx = gtk_list_box_row_get_index(gtk_list_box_get_selected_row(box));
        listMgrBox->handleOnListClick(idx);
    } %>
    void: ListEditorHandleAdd(their GtkWidget: wid, their ListManagerBox: listMgrBox) <- {
        listMgrBox.handleAdd()
    }
    void: ListEditorHandleDelete(their GtkWidget: wid, their ListManagerBox: listMgrBox) <- {
        listMgrBox.handleDelete()
    }
    void: ListEditorHandleEdit(their GtkWidget: wid, their ListManagerBox: listMgrBox) <- {
        listMgrBox.handleEdit()
    }
}
/-///////////////////////////////  HANDLE EVENTS
struct GUI_MotionEvent{their GdkEventMotion: GUI_MotionEvent}

struct GUI_ButtonEvent{their GdkEventButton: GUI_ButtonEvent}
struct GUI_ButtonEvent{
  me uint: type
 /- GdkWindow *window;
 /- gint8 send_event;
 /- guint32 time;
  me double: x
  me double: y
  me uint: state
  me uint: button
}

struct GUI_PointerEvent{their GdkEventButton: GUI_PointerEvent}
struct GUI_PointerEvent{
  me uint: type
 /- GdkWindow *window;
 /- gint8 send_event;
 /- guint32 time;
  me double: x
  me double: y

  me uint: state
  me uint: button
}

/-///////////////////////////////  EVENT DISPATCHER
struct GTK_eventDispatcher{
    their widget: topWidget
    me bool: dispatchPointerMotionEvent(their GdkEventMotion: event) <- {return(false)}
    me bool: dispatchPointerClickEvent(their GdkEventButton: event) <- <%{
        if(event->type==GDK_BUTTON_PRESS){
            if(event->button==1){
                topWidget->primaryClick(event);
            } else if(event->button==3){
                topWidget->secondaryClick(event);
            }
        }
        return false;
    } %>
    me bool: dispatchKeyboardEvent(their GdkEventKey: event) <- {print("KEY PRESSED\n")}
  /-  me bool: dispatchWindowEvent(their GdkEventConfigure: event) <- {print("Config\n")}
    /- Also: timer, data and user events

    me void: registerWidgetForEventDispatcher(me GUI_item: Widget, their widget: masterWidget) <- <%{
    topWidget = masterWidget;

        g_signal_connect(Widget, "draw", G_CALLBACK(drawAppArea_cb), NULL);
     /-   g_signal_connect (Widget, "expose_event",      G_CALLBACK(expose_event), NULL);
     /-   g_signal_connect (Widget, "configure_event",   G_CALLBACK(configure_event), NULL);
        g_signal_connect (Widget, "motion_notify_event", G_CALLBACK(motion_notify_event), NULL);
        g_signal_connect (Widget, "button_press_event",  G_CALLBACK(button_press_event), NULL);

        gtk_widget_set_events (Widget, GDK_EXPOSURE_MASK
             | GDK_LEAVE_NOTIFY_MASK
             | GDK_BUTTON_PRESS_MASK
             | GDK_POINTER_MOTION_MASK
             | GDK_POINTER_MOTION_HINT_MASK);
    } %>
}

/-///////////////////////////////   Event callbacks for GTK3
struct GLOBAL{
    me GTK_eventDispatcher: EventDispatcher
    me void: button_press_event(their GtkWidget: wid, their GdkEventButton: event) <- <%{
        EventDispatcher.dispatchPointerClickEvent(event);
    } %>
    me void: motion_notify_event(their GtkWidget: wid, their GdkEventMotion: event) <- <%{
        EventDispatcher.dispatchPointerMotionEvent(event);
    } %>
    me void: expose_event(their GtkWidget: wid, their GdkEventExpose: event) <- <%{
      /-  EventDispatcher.dispatchWindowEvent(event);
    } %>
    me void: keypress_event(their GtkWidget: wid, their GdkEventKey: event) <- <%{
        EventDispatcher.dispatchKeyboardEvent(event);
    } %>
    me void: configure_event(their GtkWidget: wid, their GdkEventConfigure: event) <- <%{
      /-  EventDispatcher.dispatchWindowEvent(event);
    } %>
}


/-///////////////////////////////  HANDLE GUI
struct GUI{
    their GtkApplication: app

    me uint32: GUI_Init() <- {
        app <- gtk_application_new (0, G_APPLICATION_FLAGS_NONE)
        g_signal_connect (app, "activate", G_CALLBACK(activate), NULL)
        return(0)
    }
    me uint32: GUI_Run() <- <% {
        uint32_t status;
        status = g_application_run( G_APPLICATION(app), 0, 0);
        return(status);
    } %>
    me void: GUI_Deinit() <- {
        g_object_unref(app)
    }
}


struct GUI{
    me void: showWidget(me GUI_item: widget) <- <%!gtk_widget_show(%1)%>
    me GUI_item: newCanvas() <- <%!%Ggtk_drawing_area_new()%>
    me void: setWidgetSize(me GUI_item: widget, me uint32: width, me uint32: height) <- <%!%Ggtk_widget_set_size_request(%1, %2, %3)%>
    me GUI_item: newScrollingWindow() <- <%!%Ggtk_scrolled_window_new(0, 0)%>
    me void: addToContainer(me GUI_container: container, me GUI_item: widget) <-<%!%Ggtk_container_add(GTK_CONTAINER(%1), %2)%>
    me void: addToContainerAndExpand(me GUI_container: container, me GUI_item: widget) <-<%!%Ggtk_box_pack_start(GTK_BOX(%1), %2, TRUE, TRUE, 0)%>
    me void: addMenuBar(me GUI_menuBar: menubar) <- <%!%G %>
    me void: create_MenuItem(me GUI_menu: ParentMenu, me string: label)<- <%!%Gcreate_MenuItem(%1, %2)%>
    me void: create_TopSubMenu(me GUI_menuBar: ParentMenu, me string: label)<- <%!%Gcreate_SubMenu(%1, %2)%>
    me void: create_SubMenu(me GUI_menu: ParentMenu, me string: label)<- <%!%Gcreate_SubMenu(%1, %2)%>
    me void: setCallback() <- <%!%Gg_signal_connect(%1, %2, %3, 0)%>
    me GUI_ctxt: newPDF_ctxt(me sting: filename, me double: inchesWide, me double: inchesHigh) <- <%!%Gcairo_create(cairo_pdf_surface_create(%1.data(), %2*70, %3*70))%>
}

struct GUI_ctxt {
    their cairo_t:GUI_ctxt
    me void: fetchAreaToBeDrawn(me GUI_rect: area) <- <%!cairo_clip_extents(%0, &%1.x1, &%1.y1, &%1.x2, &%1.y2)%>
    me void: reset() <- <%!%G %>
    me void: setRGBA(me double: red, me double: green, me double: blue, me double: alpha) <- <%!cairo_set_source_rgba(%0, (double)%1 /256, (double)%2 /256, (double)%3 /256, (double)%4 /256)%>
    me void: setRGB (me double: red, me double: green, me double: blue) <- <%!cairo_set_source_rgb(%0, (double)%1 /256, (double)%2 /256, (double)%3 /256)%>
    me void: setColor(me Color: color) <- <%!cairo_set_source_rgb(%0, (double)%1.red /256, (double)%1.green /256, (double)%1.blue /256)%>
    me void: setLineWidth(me double: width) <- <%!cairo_set_line_width(%0, %1)%>
    me void: finishPDF() <- <%!cairo_surface_finish(cairo_get_group_target(%0))%>
    me void: setScale() <- <%!cairo_scale(%0, %1, %2)%>
    me void: moveTo(me double: x, me double: y) <- <%!cairo_move_to(%0, %1, %2)%>
    me void: lineTo(me double: x, me double: y) <- <%!cairo_line_to(%0, %1, %2)%>
    me void: moveRel(me double: dx, me double: dy) <- <%!cairo_rel_move_to(%0, %1, %2)%>
    me void: lineRel(me double: dx, me double: dy) <- <%!cairo_rel_line_to(%0, %1, %2)%>
    me void: curveTo(me double: x1, me double: y1, me double: x2, me double: y2, me double: x3, me double: y3) <- <%!cairo_curve_to(%0, %1, %2, %3, %4, %5, %6)%>
    me void: curveRel(me double: dx1, me double: dy1, me double: dx2, me double: dy2, me double: dx3, me double: dy3) <- <%!cairo_rel_curve_to(%0, %1, %2, %3, %4, %5, %6)%>
    me void: closePath() <- <%!cairo_close_path(%0)%>
    me void: rectangle() <- <%!cairo_rectangle(%0, %1, %2, %3, %4)%>
    me void: paintNow() <- <%!cairo_paint(%0)%>
    me void: strokeNow() <- <%!cairo_stroke(%0)%>
    me void: fillNow() <- <%!cairo_fill(%0)%>
    me void: strokeKeep() <- <%!cairo_stroke_preserve(%0)%>
    me void: fillKeep() <- <%!cairo_fill_preserve(%0)%>
}
/-/////////////////////////////// TIME
struct tm{
    me tm: tm
    me int: tm_hour
    me int: tm_min
    me int: tm_sec
}

struct timeStringer{
    me tm: timeRec
    me none: timeStringer() <- <%{
        time_t rawtime;
        time (&rawtime);
        timeRec = *localtime(&rawtime);
    } %>

    me string: time12Hour() <- <%{
        string AmPm = "am";
        int hours = timeRec.tm_hour;
        if (hours>=12) {hours = hours-12; AmPm="pm";}
        if (hours==0) {hours = 12;}
        string SH = (to_string(hours)+":");
        int min = timeRec.tm_min;
        if (min<10){SH = SH+"0";}
        SH = SH + to_string(min);

        SH=SH+":";
        int sec = timeRec.tm_sec;
        if (sec<10){SH = SH+"0";}
        SH = SH + to_string(sec);
        SH=SH+AmPm;
        return(SH);
    } %>
}

/-///////////////////////////////  G L O B A L
struct GLOBAL{
        me APP: thisApp

    /- TIME ROUTINES:
    me int64: getCurrentTimeStamp() <- <%!g_get_real_time()%>

    /- DRAWING ROUTINES:

    me deltaSize: renderText(me GUI_ctxt: cr, me string: text, me string: fontName, me int: fontSize, me int: x, me int: y) <- <%{
        cairo_move_to(cr,x,y);
        PangoLayout *layout=pango_cairo_create_layout(cr);
        pango_layout_set_text(layout, text.data(), -1);

        string fontDesc=fontName+' '+ std::to_string(fontSize);
        PangoFontDescription *desc = pango_font_description_from_string(fontDesc.data());
        pango_layout_set_font_description(layout, desc);
        pango_font_description_free(desc);

        cairo_set_line_width(cr, 0.5);
        pango_cairo_update_layout(cr, layout);
        pango_cairo_show_layout_line (cr, pango_layout_get_line (layout, 0));
       /- pango_cairo_layout_path(cr, layout);
        deltaSize size;
        pango_layout_get_pixel_size(layout, &size.width, &size.height);
        g_object_unref(layout);
        cairo_fill(cr);
        return(size);
    } %>


    me deltaSize: getTextSize(me GUI_ctxt: cr, me string: text, me string: fontName, me int: fontSize) <- <%{
        PangoLayout *layout=pango_cairo_create_layout(cr);
        pango_layout_set_text(layout, text.data(), -1);

        string fontDesc=fontName+' '+ std::to_string(fontSize);
        PangoFontDescription *desc = pango_font_description_from_string(fontDesc.data());
        pango_layout_set_font_description(layout, desc);
        pango_font_description_free(desc);

        deltaSize size;
        pango_layout_get_pixel_size(layout, &size.width, &size.height);
        g_object_unref(layout);
        return(size);
    } %>

    me void: roundedRectangle(me GUI_ctxt: cr, me double: x, me double: y, me double: w, me double: h, me double: r) <- <%{
        cairo_move_to(cr,x+r,y);                      /-# Move to A
        cairo_line_to(cr,x+w-r,y);                    /-# Straight line to B
        cairo_curve_to(cr,x+w,y,x+w,y,x+w,y+r);       /-# Curve to C, Control points are both at Q
        cairo_line_to(cr,x+w,y+h-r);                  /-# Move to D
        cairo_curve_to(cr,x+w,y+h,x+w,y+h,x+w-r,y+h); /-# Curve to E
        cairo_line_to(cr,x+r,y+h);                    /-# Line to F
        cairo_curve_to(cr,x,y+h,x,y+h,x,y+h-r);       /-# Curve to G
        cairo_line_to(cr,x,y+r);                      /-# Line to H
        cairo_curve_to(cr,x,y,x,y,x+r,y);             /-# Curve to A;
    } %>

    me INK_Image[map string]: InkImgCache
    me void: displayImage(me GUI_ctxt: cr, me string: filename, me double: x, me double: y, me double: scale) <- <%{
        filename = "./assets/" + filename;
        map< string, cairo_surface_t* >::iterator picPtr=InkImgCache.find(filename);
        cairo_surface_t* pic=0;
        if (picPtr==InkImgCache.end()) {
            pic=cairo_image_surface_create_from_png(filename.data());
            InkImgCache[filename]=pic;
            }
        else pic=picPtr->second;

        cairo_save(cr);
        cairo_scale(cr,1/scale,1/scale);
        cairo_set_source_surface(cr,pic,x*scale,y*scale);
        cairo_paint(cr);
cairo_restore(cr);
    } %>

/- GUI INTERFACE:

/* Surface to store current scribbles */
their cairo_surface_t: surface <- 0

me void: close_window() <- {
  if (surface){
    cairo_surface_destroy(surface)
  }

  gtk_main_quit()
}

me GUI_menuItem: create_MenuItem(me GUI_menu: ParentMenu, me string: label) <- <%{
    GtkWidget *menuitem;

    menuitem = gtk_menu_item_new_with_label (label.data());
    /-gtk_menu_item_set_submenu (GTK_MENU_ITEM (menuitem), SubMenu);
    gtk_menu_shell_append (GTK_MENU_SHELL (ParentMenu), menuitem);
    gtk_widget_show (menuitem);

  return menuitem;
} %>

me GUI_menu: create_SubMenu(me GUI_menu: ParentMenu, me string: label) <- <%{
    GtkWidget *SubMenu = gtk_menu_new ();
    GtkWidget *menuitem;

    menuitem = gtk_menu_item_new_with_label (label.data());
    gtk_menu_item_set_submenu (GTK_MENU_ITEM (menuitem), SubMenu);
    gtk_menu_shell_append (GTK_MENU_SHELL (ParentMenu), menuitem);
    gtk_widget_show (menuitem);

  return SubMenu;
} %>


me int: widgetHeight() <- <%!gtk_widget_get_allocated_height(%1)%>
me int: widgetWidth() <- <%!gtk_widget_get_allocated_width(%1)%>

me void: showWidget(me GUI_item: widget) <-  <%!gtk_widget_show(%1)%>
me void: markDirtyArea(me GUI_item: widget, me int32: x, me int32: y, me int32: width, me int32: height) <- <%!gtk_widget_queue_draw_area(%1, %2, %3, %4, %5)%>
me GUI_item: newCanvas() <- <%!gtk_drawing_area_new()%>
me void: setWidgetSize(me GUI_item: widget, me uint32: width, me uint32: height) <- <%!gtk_widget_set_size_request(%1, %2, %3)%>
me void: addToContainer(me GUI_container: container, me GUI_item: widget) <- <%!gtk_container_add(GTK_CONTAINER (%1), %2)%>
me int64: ticksPerSec() <- <%!%GG_USEC_PER_SEC%>



/--------------- Application areas
their GtkWidget: window
void: setMasterWidget(their widget: masterWidget) <- {EventDispatcher.topWidget<-masterWidget}

me void: activate(their GtkApplication: app, me gpointer: user_data) <- <%{
    GtkWidget *topBox;

    window = gtk_application_window_new (app);
    gtk_window_set_title (GTK_WINDOW (window), "Window");
    gtk_window_set_default_size (GTK_WINDOW (window), 1000, 700);
    g_signal_connect (window, "destroy", G_CALLBACK (close_window), NULL);
    gtk_container_set_border_width (GTK_CONTAINER (window), 0);

    topBox = gtk_box_new (GTK_ORIENTATION_VERTICAL, 0);
    gtk_container_add (GTK_CONTAINER (window), topBox);
    gtk_widget_show (topBox);
    /-//////////////////  A d d  A p p l i c a t i o n   M e n u

    GtkWidget *boxForMenubar;
    GtkWidget *menubar;


    boxForMenubar = gtk_box_new(GTK_ORIENTATION_HORIZONTAL, 0);
    gtk_container_add (GTK_CONTAINER (topBox), boxForMenubar);
    gtk_widget_show (boxForMenubar);

    menubar = gtk_menu_bar_new ();
    gtk_box_pack_start(GTK_BOX(boxForMenubar), menubar, TRUE, TRUE, 0);
    gtk_widget_show (menubar);

    thisApp.createAppMenu(menubar);

      /-///////////////////  A d d   A p p l i c a t i o n   I t e m s

    GtkWidget *frame;
    GtkWidget *appArea;

    frame = gtk_box_new(GTK_ORIENTATION_VERTICAL, 0);
    gtk_box_pack_start(GTK_BOX(topBox), frame, TRUE, TRUE, 0);

    /-EventDispatcher.registerWidgetForEventDispatcher();
    thisApp.createAppArea(frame);


    /-///////////////////  A d d  S t a t u s   A r e a



    gtk_widget_show_all (window);
}%>

}
