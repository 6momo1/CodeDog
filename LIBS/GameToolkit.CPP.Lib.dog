//############  Add Game-Toolkit features using SDL
//############  these features are shared across Linux and Windows
requirements = [
    [tagOneOf, Lang, [CPP]],
    [require, GameToolkit_platform]
]

interface={
    provides=[GameToolkit_implementation]
    libFiles=[`pkg-config --cflags --libs sdl2`, SDL2_mixer]
    headers=[SDL.h, SDL_mixer.h]
}

LibDescription ={
    useStatus   = dynamic
    description ='A CodeDog Toolkit for making games'
    features    =[]
    platforms   =[Linux, Windows]
    bindings    =[C, CPP]
    CPUs        =[i386, amd64, arm7]
}

initCode = ``

/////////////////////////////////  STRUCT CONVERTERS
struct GRWindow{their SDL_Window: GRWindow}
struct GUI_ctxt{their cairo_t:GUI_ctxt}
struct GameEvent{their SDL_Event:GameEvent}
struct UserEvent{their SDL_UserEvent:UserEvent}
struct WindowEvent{their SDL_WindowEvent:WindowEvent}
struct KeyboardEvent{their SDL_KeyboardEvent:KeyboardEvent}
struct MouseButtonEvent{their SDL_MouseButtonEvent:MouseButtonEvent}
struct MouseMotionEvent{their SDL_MouseMotionEvent:MouseMotionEvent}
struct MouseWheelEvent{their SDL_MouseWheelEvent:MouseWheelEvent}
struct KeyInfo{their SDL_Keysym:KeyInfo}
struct Keycode{their SDL_Keycode:Keycode}
struct INK_Image{their cairo_surface_t: INK_Image}
struct SoundData{their Mix_Chunk: SoundData}
struct GameSurface{their SDL_Surface: GameSurface}

/////////////////////////////////  GLOBAL
struct GLOBAL{
    void: deallocateWindow(their GRWindow: window) <- <%!%GSDL_DestroyWindow(%1)%>
    void: deallocateGraphicsSystem()               <- <%!%GSDL_Quit()%>
    void: getTickCount()                           <- <%!%GSDL_GetTicks()%>
    their GameSurface: screenSurface
    their INK_Image: canvas
    me int: screenWidth
    me int: screenHeight
    const int: SCREEN_WIDTH  <- 900
    const int: SCREEN_HEIGHT <- 700

    me bool: getFullScreenMode() <- <%{
        return(SDL_GetWindowFlags(window) & SDL_WINDOW_FULLSCREEN);
    }%>

    void: fullScreenModeOn() <- <%{
	SDL_SetWindowFullscreen(window, SDL_WINDOW_FULLSCREEN_DESKTOP);
        SDL_SetRelativeMouseMode(SDL_TRUE);
    }%>

    void: fullScreenModeOff() <- <%{
        SDL_SetWindowFullscreen(window, SDL_FALSE);
        SDL_SetRelativeMouseMode(SDL_FALSE);
    }%>
}

/////////////////////////////////  GRWindow
struct GRWindow{
    void: requestRedraw() <- <%!SDL_UpdateWindowSurface(%0)%>
}
struct GameEvent{
    me int32: type
    me UserEvent: user
    me WindowEvent: window
    me KeyboardEvent: key
    me MouseButtonEvent: button
    me MouseMotionEvent: motion
    me MouseWheelEvent: wheel
}
struct UserEvent{
    me int32: code
}
struct WindowEvent{
    me int32: event
    me int32: data1
    me int32: data2
}
struct KeyboardEvent{
    me KeyInfo: keysym
}
struct KeyInfo{
    me Keycode: sym
}
struct MouseButtonEvent{
    me int32: type
    me int32: x
    me int32: y
}

