// EarleyParser.Lib.dog

struct production{
    flag: isTerm
    mode[parseSEQ, parseALT, parseREP, parseOPT, parseAUTO]: prodType
    me string: constStr
    me int[list]: items
    void: printProd(me int64: seqPos, me int64: originPos, me string[their list]: rnames) <- {
        me int: ProdType <- prodType
        me string: ProdStr <- ""
        print("[")
        if     (ProdType==parseALT) {ProdStr<-"ALT"}
        else if(ProdType==parseAUTO){ProdStr<-"Aut"}
        else if(ProdType==parseSEQ) {ProdStr<-"SEQ"}
        else if(ProdType==parseREP) {ProdStr<-"REP"}
        print(ProdStr, " from slot:", originPos, ": ")
        if(isTerm){
            if(seqPos==0) {print(" > ")}
            print('"', constStr,'"')
            if(seqPos>0) {print(" > ")}
        } else {
            if(ProdType==parseALT and seqPos==0) {print(" > ")}
            withEach p in items {
                if(ProdType == parseSEQ and p_key == seqPos){ print(" > ")}
                if(p_key!=0){
                    if(ProdType==parseALT){print("| ")}
                }
                if(ProdType==parseREP and p_key>0){ print(p, " ")}
                else {print(rnames[p], " ")}
            }
            if(ProdType==parseREP){ print('(Len:%i`seqPos`)')}
            else {if (((p_key == seqPos and ProdType == parseSEQ) or (ProdType==parseALT and seqPos>0))) {print(" > ")}}
        }
        print("] ")
    }
}

struct pedigree{
    our stateRec: pred
    our stateRec: cause
    me int: productionID
}

struct stateRec{
    me int: productionID
    me int64: SeqPosition
    me int64: originPos
    me int64: crntPos
    me pedigree[list]: pedigrees
    our stateRec: next
    our stateRec: child
    //void: print(their production: prod) <- {prod.printProd(SeqPosition, originPos)}
    void: printSREC(their EParser: EP) <- {
        their production: prod <- EP.grammar[productionID]
        prod.printProd(SeqPosition, originPos, EP.rnames)
    }

}
struct stateRecPtr{our stateRec: stateRecPtr}

struct stateSets{
    me stateRecPtr[list]: stateRecs
    me uint: flags
    //stateSets():flags(0){}
}

struct EParser{
    their strBuf: textToParse
    me int: startProduction
    me stateSets[list]: SSets
    me production[list]: grammar
    me bool: parseFound
    our stateRec: lastTopLevelItem
    me string: errorMesg
    me int64: errLineNum
    me int64: errCharPos
    me string[list]: rnames

    void: clearGrammar() <- {grammar.clear() rnames.clear()}
    void: addTerminalProd(me string: name, me int: ProdType, me string: s) <- {
        me production: P
        P.prodType <- ProdType
        P.isTerm   <- true
        P.constStr <- s
        grammar.pushLast(P)
        rnames.pushLast(name)
    }
    void: addNon_TermProd(me string: name, me int: ProdType, me int[list]: terms) <- {
        me production: P
        P.prodType <- ProdType
        P.items <- terms
        grammar.pushLast(P)
        rnames.pushLast(name)
    }

    void: dump() <- {
         withEach crntPos in RANGE(0 .. SSets.size()) {
            their stateSets: SSet <- SSets[crntPos]
            me string: ch <- "x"
            if(crntPos+1 != SSets.size()) {
                ch <- ""+textToParse.at(crntPos)
            }
         //   print("SLOT: ", crntPos, "(", ch, ") - size: ", SSet->stateRecs.size(), "\n")
            withEach SRec in SSet.stateRecs {
                their production: prod <- grammar[SRec.productionID]
                print("    ")
                SRec.printSREC(self)
                print("\n")
            }
        }
        if(parseFound){print("\nPARSE PASSED!\n\n")}
        else {print("\nPARSE failed.\n\n")}

    }

    me void: addProductionToStateSet(me int64: crntPos, me int: productionID, me int64: seqPos, me int64: origin, our stateRec: pred, our stateRec: cause) <- {
        me bool: Duplicate <- false
        their production: prod <- grammar[productionID]
        me int: ProdType <- prod.prodType
        withEach item in SSets[crntPos].stateRecs { // Don't add duplicates.
            // TODO: change this to be faster. Not a linear search.
            if(item.productionID==productionID and item.originPos==origin){
          //  print ("POSES", item.SeqPosition, ', ', seqPos, "::")
                if(item.SeqPosition==seqPos or (ProdType==parseREP and item.SeqPosition+1 == seqPos)){
          //          print("############ DUPLICATE rule#", productionID, " at slot ", crntPos, ", POS:", seqPos, "\n")
                    me pedigree: ped
                    ped.pred <- pred
                    ped.cause <- cause
                    ped.productionID <- productionID
                    item.pedigrees.pushLast(ped)
                    Duplicate <- true
                }
            }
        }

        me bool: thisIsTopLevelItem <- false
        if(productionID==startProduction and origin==0){
            thisIsTopLevelItem <- true
            if(seqPos==prod.items.size()){
                parseFound <- true
             // TODO: investigate the cases where the line below prints. There could be a subtle bug.
               // print(" <PARSE PASSES HERE> ")
            }
        }

        if(!Duplicate){
            if(ProdType == parseSEQ or ProdType == parseREP or ProdType == parseALT or ProdType == parseAUTO){
                our stateRec: newStateRecPtr Allocate(newStateRecPtr)
                newStateRecPtr.productionID <- productionID
                newStateRecPtr.SeqPosition <- seqPos
                newStateRecPtr.originPos <- origin
                newStateRecPtr.crntPos <- crntPos
                me pedigree: ped
                ped.pred <- pred
                ped.cause <- cause
                ped.productionID <- productionID
                newStateRecPtr.pedigrees.pushLast(ped)
                if(thisIsTopLevelItem) {lastTopLevelItem <- newStateRecPtr}
                SSets[crntPos].stateRecs.pushLast(newStateRecPtr)
  //              print("############ ADDING To SLOT ", crntPos, ":")
  //              newStateRecPtr.print(self)
                applyPartialCompletion(newStateRecPtr)
  //              print("\n")
            } //else {print("  Unknown ProductionType:", ProdType, "\n")}
        }

        if(ProdType == parseALT and seqPos==0){
           // print("  ALT-LIST\n")
            withEach AltProd in prod.items {
   //             print("                                  ALT: ")
                addProductionToStateSet(crntPos, AltProd, 0, origin, pred, cause)
            }
        } else if(ProdType == parseAUTO and (productionID == ws or productionID == wsc) and seqPos==0){  // Whitespace is nullable
            addProductionToStateSet(crntPos, productionID, 1, origin, pred, cause)
        }
    }

    me void: initParseFromStream(me int: startProd, their strBuf: streamBuffer) <- {
        textToParse <- streamBuffer
        startProduction <- startProd
        SSets.clear()
        withEach i in RANGE(0 .. textToParse.size()+1){
            me stateSets: newSSet
            SSets.pushLast(newSSet)
        }
        addProductionToStateSet(0, startProduction, 0, 0, NULL, NULL)
    }

    me void: initParseFromString(me int: startProd, me string: txt) <- {
        // print('Will parse "', txt, '" with rule ', startProd, '.\n')
        their strBuf:: bufToParse
        bufToParse.init()
        bufToParse.putStr(txt)
        bufToParse.close()
        initParseFromStream(startProd, bufToParse)
    }

    me int64: chkStr(me int64: pos, me string: s) <- {
        me int64: L <- s.size()
        if(pos+L > textToParse.size()){return(-1)}
        withEach i in RANGE(0 .. L){
            if( s[i] != textToParse.at(pos+i)){return(-1)}
        }
        return(L)
    }

    me int64: scrapeUntil(me int64: pos, me string:endStr) <- {
        me char: ender <- endStr[0]
        our strBufItr: txtItr <- textToParse.getItrAt(pos)
        while(txtItr != NULL and txtItr.status==bfOK){
            me char: ch <- txtItr.ch()
            if(ch==ender){
                me int64: p <- txtItr.crntAbsPos()
                me int64: nxtLen <- chkStr(p, endStr)
                if(nxtLen>0){return((p+nxtLen)-pos)}
            }
            txtItr.goNext()
        }
        return(-1)
    }

    me int64: escapedScrapeUntil(me int:pos, me string:endChar) <- {
        me string: prevCharStr <- " "
        me char: prevChar <- prevCharStr[0]
        me char: ender <- endChar[0]
        me string: escCharStr <- "\\ "
        me char: escChar <- escCharStr[0]
        our strBufItr: txtItr <- textToParse.getItrAt(pos)
        while(txtItr != NULL and txtItr.status==bfOK){
            me char: ch <- txtItr.ch()
            me int64: p <- txtItr.crntAbsPos()
            if(prevChar!=escChar and ch==ender){return(p-pos)}
            if(prevChar==escChar and ch==escChar) {prevChar<-escCharStr[1]}
            else {prevChar <- ch}
            txtItr.goNext()
        }
        return(-1)
    }

    me int64: scrapeAlphaSeq(me int64: pos) <- {
        me int64: charsUsed <- 0
        our strBufItr: txtItr <- textToParse.getItrAt(pos)
        while(txtItr != NULL and txtItr.status==bfOK){
            me char: ch <- txtItr.ch()
            if(!isalpha(ch)){
                if(charsUsed==0){return(-1)}
                else{return(charsUsed)}
            }
            txtItr.goNext()
            charsUsed <+- 1
        }
        return(charsUsed)
    }
    me int64: scrapeUintSeq(me int64: pos) <- {
        me int64: charsUsed <- 0
        our strBufItr: txtItr <- textToParse.getItrAt(pos)
        while(txtItr != NULL and txtItr.status==bfOK){
            me char: ch <- txtItr.ch()
            if(!isdigit(ch)){
                if(charsUsed==0){return(-1)}
                else{return(charsUsed)}
            }
            txtItr.goNext()
            charsUsed <+- 1
        }
        return(charsUsed)
    }
    me int64: scrapeHexNum(me int64: pos) <- {
        me int64: charsUsed <- 0
        our strBufItr: txtItr <- textToParse.getItrAt(pos)
        while(txtItr != NULL and txtItr.status==bfOK){
            me char: ch <- txtItr.ch()
            if(!isxdigit(ch)){
                if(charsUsed==0){return(-1)}
                else{return(charsUsed)}
            }
            txtItr.goNext()
            charsUsed <+- 1
        }
        return(charsUsed)
    }
    me int64: scrapeBinNum(me int64: pos) <- {
        me int64: charsUsed <- 0
        our strBufItr: txtItr <- textToParse.getItrAt(pos)
        while(txtItr != NULL and txtItr.status==bfOK){
            me char: ch <- txtItr.ch()
            if(!isxdigit(ch)){
                if(charsUsed==0){return(-1)}
                else{return(charsUsed)}
            }
            txtItr.goNext()
            charsUsed <+- 1
        }
        return(charsUsed)
    }
    me int64: scrapeAlphaNumSeq(me int64: pos) <- {
        me int64: charsUsed <- 0
        our strBufItr: txtItr <- textToParse.getItrAt(pos)
        while(txtItr != NULL and txtItr.status==bfOK){
            me char: ch <- txtItr.ch()
            if(!isalnum(ch)){
                if(charsUsed==0){return(-1)}
                else{return(charsUsed)}
            }
            txtItr.goNext()
            charsUsed <+- 1
        }
        return(charsUsed)
    }
    me int64: scrapeAlphaNum_Seq(me int64: pos) <- {
        me string: chars <- "_"
        me int64: charsUsed <- 0
        our strBufItr: txtItr <- textToParse.getItrAt(pos)
        while(txtItr != NULL and txtItr.status==bfOK){
            me char: ch <- txtItr.ch()
            if (!(isalnum(ch) or ch==chars[0])){
                if(charsUsed==0){return(-1)}
                else{return(charsUsed)}
            }
            txtItr.goNext()
            charsUsed <+- 1
        }
        return(charsUsed)
    }

    me int64: scrapePrintableSeq(me int64: pos) <- {
        me int64: charsUsed <- 0
        our strBufItr: txtItr <- textToParse.getItrAt(pos)
        while(txtItr != NULL and txtItr.status==bfOK){
            me char: ch <- txtItr.ch()
            if(!isprint(ch)){
                if(charsUsed==0){return(-1)}
                else{return(charsUsed)}
            }
            txtItr.goNext()
            charsUsed <+- 1
        }
        return(charsUsed)
    }

    me int64: scrapeCComment(me int:pos) <- {
        me int64: txtSize <- textToParse.size()
        me char: ch <- textToParse.at(pos)
        if(ch=="/" and pos<=(txtSize-2)){
            me char: nextCh <- textToParse.at(pos+1)
            if(nextCh=="/"){
                return(scrapeToEOL(pos))
            } else if(nextCh=="*"){
                return(scrapeUntil(pos+2, "*/")+2)
            }
        }
        return(0)
    }

    me int64: scrapeWSC(me int64: pos) <- {
        me int64: txtSize <- textToParse.size()
        withEach p in RANGE(pos .. txtSize){
            me char: ch <- textToParse.at(p)
            me int64: cmntLen <- scrapeCComment(p)
            if(cmntLen>0){p <+- cmntLen}
            else if(isspace(ch)){}
            else{if(p==pos){return(-1)} else{return(p-pos)}}
        }
        return(txtSize-pos)
    }
    me int64: scrapeWS(me int64: pos) <- {
        me int64: charsUsed <- 0
        our strBufItr: txtItr <- textToParse.getItrAt(pos)
        while(txtItr != NULL and txtItr.status==bfOK){
            me char: ch <- txtItr.ch()
            if(!isspace(ch)){
                if(charsUsed==0){return(-1)}
                else{return(charsUsed)}
            }
            txtItr.goNext()
            charsUsed <+- 1
        }
        return(charsUsed)
    }

    me int64: scrapeQuotedStr(me int64: pos) <- {
        me string: ch <- ""
        ch <+- textToParse.at(pos)
        if(ch != "\'" and ch != "\""){return(-1)}
        else{pos <+- 1}
        me int64: sLen <- escapedScrapeUntil(pos, ch)
        if(sLen<0){return(-1)}
        return(sLen+2)
    }

    me int64: scrapeQuotedStr1(me int64: pos) <- {
        if(chkStr(pos, "'")>=0){pos <- pos+1}else{return(-1)}
        me int64: sLen <- escapedScrapeUntil(pos, "'")
        if(sLen<0){return(-1)}
        return(sLen+2)
    }

    me int64: scrapeQuotedStr2(me int64: pos) <- {
        if(chkStr(pos, "\"")>=0){pos <- pos+1}else{return(-1)}
        me int64: sLen <- escapedScrapeUntil(pos, "\"")
        if(sLen<0){return(-1)}
        return(sLen+2)
    }
    me int64: scrapeCID(me int64: pos) <- {
        me int64: txtSize <- textToParse.size()
        me string: chars <- "_"
        if(pos >= txtSize){
            // Set I/O Error: Read past EOS
            return(-1)
        }
        me char: ch <- textToParse.at(pos)
        if(isalpha(ch)){   // or ch==chars[0]){
            return(scrapeAlphaNum_Seq(pos))
        } else {return(-1)}
    }
    // TODO: me int64: scrapeUniID(me int64: pos) <- { }

    me int64: scrapeIntSeq(me int64: pos) <- {
        me char: ch <- textToParse.at(pos)
        me int64: txtSize <- textToParse.size()
        me int64: initialChars <- 0
        me string: chars <- "+-"
        if(pos >= txtSize){
            // Set I/O Error: Read past EOS
            return(-1)
        }
        if(ch==chars[0] or ch==chars[1]){ initialChars <- 1}
        return(scrapeUintSeq(pos)+initialChars)
    }
    // TODO: me int64: scrapeRdxSeq(me int64: pos) <- { }

    me int64: scrapeToEOL(me int64: pos) <- {
        return(scrapeUntil(pos, "\\n"))
    }
    me int64: textMatches(me int: ProdID, me int64: pos) <- {
        their production: Prod <- grammar[ProdID]
 //       print('    MATCHING "%s`Prod->constStr.data()`"... ')
        me int: prodType <- Prod.prodType
        if(prodType==parseSEQ){ //prod is simple text match
            return(chkStr(pos, Prod.constStr))
        } else{
            if(prodType==parseAUTO){
                switch(ProdID){
                    case alphaSeq:    {return(scrapeAlphaSeq(pos))}
                    case uintSeq:     {return(scrapeUintSeq(pos))}
                    case alphaNumSeq: {return(scrapeAlphaNumSeq(pos))}
                    case printables:  {return(scrapePrintableSeq(pos))}
                    case ws:          {return(scrapeWS(pos))}
                    case wsc:         {return(scrapeWSC(pos))}
                    case quotedStr:   {return(scrapeQuotedStr(pos))}
                    case quotedStr1:  {return(scrapeQuotedStr1(pos))}
                    case quotedStr2:  {return(scrapeQuotedStr2(pos))}
                    case HexNum_str:  {return(scrapeHexNum(pos))}
                    case BinNum_str:  {return(scrapeBinNum(pos))}
                    case BigInt:      {return(scrapeUintSeq(pos))}
                    case CID:         {return(scrapeCID(pos))}
             //       case UniID:       {return(scrapeUniID(pos))}
                    case intSeq:      {return(scrapeIntSeq(pos))}
             //       case RdxSeq:      {return(scrapeRdxSeq(pos))}
                    case toEOL:       {return(scrapeToEOL(pos))}
                    default: {print("Invalid AUTO-parse production type.\n")}
                }
            }
        }
        return(-1)
    }

    ///////////////// Late Completion Code
    //  This code handles the case where productions are added with the same origin (crntPos) as their (null) predecessor and must have completions applied from past completions.
    our stateRec[list]: SRecsToComplete
    me int64: crntPos

    void: resetCompletions(me int64: CrntPos) <- {
        SRecsToComplete.clear()
        crntPos <- CrntPos
    }

    void: registerCompletion(our stateRec: SRecToComplete) <- {
        SRecsToComplete.pushLast(SRecToComplete)
    }

    void: applyPartialCompletion(our stateRec: backSRec) <- {
        their production: backProd <- grammar[backSRec.productionID]
      //  print('                Checking New Item :') backSRec.print(self)
        me int: prodTypeFlag <- backProd.prodType
        me int64: backSRecSeqPos <- backSRec.SeqPosition
        withEach SRec in SRecsToComplete{
            if(crntPos==SRec.originPos and !(backSRec.productionID==SRec.productionID and backSRec.SeqPosition==SRec.SeqPosition and backSRec.originPos==SRec.originPos)){
                if(prodTypeFlag==parseREP){
                    me int: MAX_ITEMS  <- backProd.items[2]
                    if((backSRecSeqPos < MAX_ITEMS or MAX_ITEMS==0) and backProd.items[0] == SRec.productionID ){
    //                    print(" ADVANCING REP: ")
                        addProductionToStateSet(crntPos, backSRec.productionID, backSRecSeqPos+1, backSRec.originPos, backSRec, SRec)
                    }// else{print(" TOO MANY REPS\n")}
                } else if(prodTypeFlag==parseSEQ){
                    if(backSRecSeqPos < backProd.items.size() and backProd.items[backSRecSeqPos] == SRec.productionID){
     //                   print(" ADVANCING SEQ: ")
                        addProductionToStateSet(crntPos, backSRec.productionID, backSRecSeqPos+1, backSRec.originPos, backSRec, SRec)
                    }// else {print(" SEQ is NOT ADVANCING  \n")}
                } else if(prodTypeFlag==parseALT){
                    if(backSRecSeqPos == 0){
                        withEach backAltProdID in backProd.items {
                            if(backAltProdID==SRec.productionID){
    //                            print(" ADVANCING ALT: ")
                                addProductionToStateSet(crntPos, backSRec.productionID, backSRecSeqPos+1, backSRec.originPos, backSRec, SRec)
                                break()
                            } //else {if(backAltProdID_key) {print("                                  ")} print(" SKIP ALT\n")}
                        }
                    }
                } //else {print(" NOTHING for prodType ", prodTypeFlag, "\n")}
            } //else {print("Triggering Item... Skipping.\n")}
        }
    }

    //////////////////////////////////////
    void: complete(our stateRec: SRec, me int64: crntPos) <- {
    //    print('        COMPLETING: check items at origin %i`SRec->originPos`... \n')
        registerCompletion(SRec)
        their stateSets: SSet  <- SSets[SRec.originPos]
        withEach backSRec in SSet.stateRecs {
            their production: backProd <- grammar[backSRec.productionID]
    //        print('                Checking Item #%i`backSRec_key`: ')
            me int: prodTypeFlag <- backProd.prodType
            me int64: backSRecSeqPos <- backSRec.SeqPosition
            if(!(crntPos==SRec.originPos and backSRec.productionID==SRec.productionID and backSRec.SeqPosition==SRec.SeqPosition and backSRec.originPos==SRec.originPos)){
                if(prodTypeFlag==parseREP){
                    me int: MAX_ITEMS  <- backProd.items[2]
                    if((backSRecSeqPos < MAX_ITEMS or MAX_ITEMS==0) and backProd.items[0] == SRec.productionID ){
    //                    print(" ADVANCING REP: ")
                        addProductionToStateSet(crntPos, backSRec.productionID, backSRecSeqPos+1, backSRec.originPos, backSRec, SRec)
                    } //else{print(" TOO MANY REPS\n")}
                } else if(prodTypeFlag==parseSEQ){
                    if(backSRecSeqPos < backProd.items.size() and backProd.items[backSRecSeqPos] == SRec.productionID){
     //                   print(" ADVANCING SEQ: ")
                        addProductionToStateSet(crntPos, backSRec.productionID, backSRecSeqPos+1, backSRec.originPos, backSRec, SRec)
                    }// else {print(" SEQ is NOT ADVANCING  \n")}
                } else if(prodTypeFlag==parseALT){
                    if(backSRecSeqPos == 0){
                        withEach backAltProdID in backProd.items {
                            if(backAltProdID==SRec.productionID){
     //                           print(" ADVANCING ALT: ")
                                addProductionToStateSet(crntPos, backSRec.productionID, backSRecSeqPos+1, backSRec.originPos, backSRec, SRec)
                                break()
                            } //else {if(backAltProdID_key) {print("                                  ")} print(" SKIP ALT\n")}
                        }
                    }
                }// else {print(" NOTHING for prodType ", prodTypeFlag, "\n")}
            } //else {print("Triggering Item... Skipping.\n")}
        }
    //    print("\n")
    }

    me bool: ruleIsDone(me bool: isTerminal, me int64: seqPos, me int: ProdType, me int: numItems)<-{
        if(isTerminal and seqPos==1) {return(true)}
        if(!isTerminal){
            if(ProdType==parseSEQ and seqPos==numItems) {return(true)}
            if(ProdType==parseALT and seqPos==1) {return(true)}
        }
        return(false)
    }

    void: doParse() <- {
        parseFound <- false
        withEach crntPos in RANGE(0 .. SSets.size()) {
            their stateSets: SSet <- SSets[crntPos]

    //        print('\n\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%   PROCESSING SLOT: %i`crntPos` "%s`ch.data()`"   %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n')
            resetCompletions(crntPos)
            withEach SRec in SSet.stateRecs {
                their production: prod <- grammar[SRec.productionID]
                me int: ProdType <- prod.prodType
                me bool : isTerminal <- prod.isTerm != 0
                me int64: seqPos <- SRec.SeqPosition
     //           print('    PROCESSING-RECORD #%i`SRec_key`:')
    //            SRec.printSREC(self)
                if(ruleIsDone(isTerminal, seqPos, ProdType, prod.items.size())){             // COMPLETER
                    complete(SRec, crntPos)  // Notate that SEQ is finished, actually add parent's follower.
                }else{
                    if(isTerminal){       // SCANNER
                        // print("SCANNING for matching termiinal...\n") // Scanning means Testing for a Matching terminal
                        me int64: len <- textMatches(SRec.productionID, crntPos)
                        if(len>=0 and crntPos+len<SSets.size()){ // if match succeeded
                            addProductionToStateSet(crntPos+len, SRec.productionID, 1, crntPos, SRec, NULL)  // Notate that terminal is finished, mark for adding parent's follower.
                        }
                    }else{ // non-terminal                           // PREDICTOR
                        //print("NON_TERMINAL \n")
                        if(ProdType == parseREP){
                            me int: MIN_ITEMS <- prod.items[1]
                            me int: MAX_ITEMS <- prod.items[2]
                            me bool: must_be   <- seqPos < MIN_ITEMS
                            me bool: cannot_be <- seqPos > MAX_ITEMS and (MAX_ITEMS!=0)
                            if(!must_be){
                                complete(SRec, crntPos)
     //                           print("         REP (TENT): ")
                                addProductionToStateSet(crntPos, prod.items[0], 0, crntPos, SRec, NULL) // Tentative
                            } else {if(!cannot_be){
     //                           print("         REP: ")
                                addProductionToStateSet(crntPos, prod.items[0], 0, crntPos, SRec, NULL)
                            }}
                        } else { // Not a REP
    //                        print("         SEQ|ALT: ")
                            addProductionToStateSet(crntPos, prod.items[seqPos], 0, crntPos, SRec, NULL)  // Add a cause SEQ with cursor at the very beginning. (0)
                        }
                    }
                }
            }
        }
  //      print("\n\n#####################################\n")
  //      dump()
    }

    void: countLinesToCharPos(me int64: charPos) <- {
        errLineNum <- 1
        me int64: lastLinePos <- 0
        withEach C in RANGE(0..charPos){
            me char: ch <- textToParse.at(C)
            if(ch == "\n"){
                errLineNum <- errLineNum+1
                lastLinePos <- C
            }
        }
        errCharPos <- charPos-lastLinePos+1
    }

    me bool: doesParseHaveError() <- {
  //      logMesg("\n\nChecking for Parse Errors...\n")
        errorMesg <- ""
        me int64: lastSSetIDX <- SSets.size()
        me int64: lastPosWithItems <- 0
        withEach ssetIDX in Backward RANGE(0 .. lastSSetIDX){
            their stateSets: SSet <- SSets[ssetIDX]
            me int64: numItems <- SSet.stateRecs.size()
            if(numItems>0 and lastPosWithItems==0){lastPosWithItems <- ssetIDX}
         //   print("Position ", ssetIDX, " has ", numItems, "items.\n")
        }
  //      print("lastPosWithItems:", lastPosWithItems, "\n")

        their stateSets: lastSSet <- SSets[lastPosWithItems]

        me int64: lastSRecIDX <- lastSSet.stateRecs.size()-1
        our stateRec: lastSRec // <- lastSSet.stateRecs[lastSRecIDX]
        their production: prod
        me int: ProdType <- 0
        me int: isTerminal<- 0
        me int64: seqPos<- 0
      //  lastSRec.printSREC(self) print("\n----\n")

        withEach SRec in lastSSet.stateRecs {
            lastSRec <- SRec
            prod <- grammar[SRec.productionID]
            ProdType <- prod.prodType
            isTerminal <- prod.isTerm
            seqPos <- SRec.SeqPosition
            if (SRec.productionID==startProduction and SRec.originPos==0 and ((lastPosWithItems+1)==lastSSetIDX) and seqPos==prod.items.size()){
 //               print("Passed\n")  // !!!!!!!!!!!!!!!!!!! This tells when the parse passes.
                return(false)
            }
            //SRec.printSREC(self)
        }

        //lastSRec.printSREC(self) print("\n----\n", seqPos)
        if(isTerminal!=0){
            if(seqPos==0){
                errorMesg <- "Expected '" + prod.constStr + "'"
                countLinesToCharPos(lastPosWithItems)
            }
        }

        if(errorMesg=="" and (lastPosWithItems+1)!=lastSSetIDX){
            errorMesg<-'Parse failed for unknown reason.'
        }
        if(errorMesg=="") {return(false)}
        else {return(true)}
    }

    me int: choosePedigreeToFollow(me int: prodID, me pedigree[their list]: peds) <- {
        return(0)
    }

    our stateRec: resolve(our stateRec: LastTopLevelItem, me string: indent) <- {
        if(LastTopLevelItem == NULL){print("\nStateRecPtr is null.\n\n") exit(1)}
        our stateRec: crntRec <- LastTopLevelItem
        me int64: seqPos <- crntRec.SeqPosition
        me int: prodID <- crntRec.productionID
        their production: Prod <- grammar[prodID]
 //       print(indent+'grammar[%i`prodID`] = ')  crntRec.printSREC(self)  print("\n", indent, "\n")
        if(Prod.isTerm){
        } else if(seqPos>0){
            withEach subItem in Backward RANGE(0 .. seqPos) {
//                print(indent, "//-item #", subItem, ": \n")
                me int: pedToFollow <- choosePedigreeToFollow(prodID, crntRec.pedigrees)
                me pedigree: ped <- crntRec.pedigrees[pedToFollow]
                crntRec.child <- resolve(ped.cause, indent+"|    ")
                ped.pred.next <- crntRec
                crntRec <- ped.pred
 //               print(indent, "############# ") crntRec.print(self) print("\n")
            }
        }
 //       if(indent==""){  print("\nRESOLVED\n\n") }
        return(crntRec)
    }

    void: docPos(me int: indent, our stateRec: SRec, me string: tag) <- {
        withEach i in RANGE(0 .. indent){ print("|    ")}
        if(SRec){
            SRec.printSREC(self)
        } else {print(" NULL ")}
        print("  \t", tag, "\n")
    }

    void: displayParse(our stateRec: SRec, me string: indent) <- {
        their production: prod <- grammar[SRec.productionID]
        if(prod.isTerm){
            print(indent, "'")
            withEach i in RANGE(SRec.originPos .. SRec.crntPos){
                print(textToParse.at(i))
            }
            print("'\n")
        } else {
           // print(indent) SRec.printSREC(self) print("\n")
            if(SRec.child){
                displayParse(SRec.child, indent+"   | ")
            }
            if(SRec.next){
                displayParse(SRec.next, indent)
            }
        }
    }

    me string: makeStr(our stateRec: SRec) <- {
        me string: S <- ""
        me int64: startPos <- SRec.originPos
        me int64: endPos <- SRec.crntPos
        me int: prod <- SRec.productionID
        if(prod == quotedStr or prod == quotedStr1 or prod == quotedStr2){
            startPos <- startPos+1
            endPos <- endPos-1
        }
        our strBufItr: txtItr <- textToParse.getItrAt(startPos)
        while(txtItr != NULL and txtItr.status==bfOK and txtItr.crntAbsPos()<endPos){
            me char: ch <- txtItr.ch()
            S <- S+ch
            txtItr.goNext()
        }
        return(S)
    }
    me int64: makeInt(our stateRec: SRec) <- {
        me string: S <- makeStr(SRec)
        me int64: N <- stol(S)
        return(N)
    }
    me BigInt: makeHexInt(our stateRec: SRec) <- {
        me string: S <- makeStr(SRec)
        me BigInt: N
        N.hexNumToBigInt(S)
        return(N)
    }
    me BigInt: makeBinInt(our stateRec: SRec) <- {
        me string: S <- makeStr(SRec)
        me BigInt: N
        N.binNumToBigInt(S)
        return(N)
    }
    our stateRec: getNextStateRec(our stateRec: SRec) <- {if(SRec.next){return(SRec.next)} return(NULL)}
}
