//////////////  Add Game-Toolkit features using Swift
requirements = [
    [tagOneOf, Lang, [Swift]]
]

interface={
    provides=[GameToolkit_implementation]
    libFiles=[]
    headers=[AppKit]
}

LibDescription ={
    useStatus   = dynamic
    description ='A CodeDog Toolkit for making games'
    features    =[]
    platforms   =[IOS, MacOS]
    bindings    =[Swift]
}

embedVeryHigh = `
// APP DELEGATE /////////////////////////////////////////////////////
class AppDelegate: NSObject, NSApplicationDelegate {
    func applicationDidFinishLaunching(_ aNotification: Notification) {
        window = NSWindow(contentRect: NSMakeRect(0, 0, NSScreen.main?.frame.width ?? 500, NSScreen.main?.frame.height ?? 500),
            styleMask: [.closable],
            backing: .buffered,
            defer: false)
        window.contentViewController = ViewController()
        window.makeKeyAndOrderFront(nil)
    }
}
// VIEW CONTROLLER ///////////////////////////////////////////////
class ViewController: NSViewController {
    override func viewDidLoad() {
        super.viewDidLoad()
        view.addSubview(screenSurface!)
    }
    override func loadView() {
        self.view = NSView(frame: NSRect(x: 0, y: 0, width: NSScreen.main?.frame.width ?? 100, height: NSScreen.main?.frame.height ?? 100))
    }
}
// CUSTOM VIEW ///////////////////////////////////////////////
class Canvas: NSView {
    override func draw(_ dirtyRect: NSRect) {
        super.draw(dirtyRect)
        let context: CGContext! = NSGraphicsContext.current?.cgContext
        gameMenuScreen!.draw(context!, 1.0)
    }
}
`
initCode = ``

/////////////////////////////////  STRUCT CONVERTERS
struct GRWindow:                wraps = NSWindow{}
struct GUI_ctxt:                wraps = CGContext{}
struct INK_Image:               wraps = Canvas{}
struct GameSurface:             wraps = Canvas{}
/////////////////////////////////  GLOBAL
struct GLOBAL{
    const int: SCREEN_WIDTH  <- 900
    const int: SCREEN_HEIGHT <- 700

    their GUI_ctxt: createGUI_ctxt()                    <- <%!NSGraphicsContext.current?.cgContext%>
    void: initializeGraphics(me bool: startFullScreen)  <- <%{ // screenSurface, window, canvas
        screenSurface = Canvas(frame: NSRect(x: 0, y: 0, width: 500, height: 500))
        let delegate = AppDelegate()
        NSApplication.shared.delegate = delegate
        _ = NSApplicationMain(CommandLine.argc, CommandLine.unsafeArgv)
    }%>
}
/////////////////////////////////  GUI_ctxt
struct GUI_ctxt{
    me void: setColor(me cdColor: color)                <- <%!%0.setFillColor(red:CGFloat(%1.red/256), green:CGFloat(%1.green/256), blue:CGFloat(%1.blue/256), alpha:1);%0.setStrokeColor(red:CGFloat(%1.red/256), green:CGFloat(%1.green/256), blue:CGFloat(%1.blue/256), alpha:1)%>
    me void: setLineWidth(me double: width)             <- <%!cr!.setLineWidth(%1)%>
    me void: moveTo(me double: x, me double: y)         <- <%!path.move(to:CGPoint(x:%1, y:%2))%>
    me void: lineTo(me double: x, me double: y)         <- <%!path.addLine(to:CGPoint(x:%1, y:%2))%>
    me void: strokeNow()                                <- <%!drawPath(using: .fillStroke)%>
    me void: fillNow()                                  <- <%!fill()%>
    me void: rectangle(me double: x, me double: y, me double: w, me double: h) <- <%!addRect(CGRect(x:%1, y:%2, width:%3, height:%4))%>
}
/////////////////////////////////  WINDOW
struct GRWindow{
    void: requestRedraw()                               <- <%!update()%>
}
/////////////////////////////////  LOOPER
/////////////////////////////////  EVENTS
/////////////////////////////////  IMAGES
/////////////////////////////////  SOUND
