//////////////  Add Game-Toolkit features using Swift
requirements = [
    [tagOneOf, Platform, [MacOS]]
]

interface={
    provides=[GameToolkit_implementation]
    libFiles=[]
    headers=[AppKit]
}

LibDescription ={
    useStatus   = dynamic
    description ='A CodeDog Toolkit for making games'
    features    =[]
    platforms   =[MacOS]
    bindings    =[Swift]
}

embedVeryHigh = `
// APP DELEGATE /////////////////////////////////////////////////////
class AppDelegate: NSObject, NSApplicationDelegate {
    func applicationDidFinishLaunching(_ aNotification: Notification) {
        window = NSWindow(contentRect: NSMakeRect(0, 0, NSScreen.main?.frame.width ?? 500, NSScreen.main?.frame.height ?? 500),
            styleMask: [.miniaturizable, .closable, .resizable, .titled],
            backing: .buffered,
            defer: false)
        window.contentViewController = ViewController()
        window.makeKeyAndOrderFront(nil)
    }
}
// VIEW CONTROLLER ///////////////////////////////////////////////
class ViewController: NSViewController {
    override func loadView() {
        screenSurface = Canvas(frame: NSRect(x: 0, y: 0, width: NSScreen.main?.frame.width ?? 100, height: NSScreen.main?.frame.height ?? 100))
        self.view = screenSurface
    }
}
// CUSTOM VIEW ///////////////////////////////////////////////
class Canvas: NSView {
    override func draw(_ dirtyRect: NSRect) {
        super.draw(dirtyRect)
        let context: CGContext! = NSGraphicsContext.current?.cgContext
    }
}
`
initCode = ``

/////////////////////////////////  STRUCT CONVERTERS
struct GRWindow:                wraps = NSWindow{}
struct GUI_ctxt:                wraps = CGContext{}
struct GameEvent:               wraps = NSEvent{}
//struct UserEvent:             wraps = NSEvent{}
//struct WindowEvent:           wraps = NSEvent{}
//struct KeyboardEvent:         wraps = NSEvent{}
//struct MouseButtonEvent:      wraps = NSEvent{}
//struct MouseMotionEvent:      wraps = NSEvent.EventType.mouseMoved{}
//struct MouseWheelEvent:       wraps = NSEvent{}
//struct KeyInfo:               wraps = NSEvent{}
//struct Keycode:               wraps = NSEvent{}
struct INK_Image:               wraps = Canvas{}
//struct SoundData{}
struct GameSurface:             wraps = Canvas{}
/////////////////////////////////  GLOBAL
struct GLOBAL{
    const int: SCREEN_WIDTH  <- 900
    const int: SCREEN_HEIGHT <- 700

    //void: deallocateWindow(their GRWindow: window)      <- <%!%>
    //void: deallocateGraphicsSystem()                    <- <%!%>
    void: getTickCount()                                <- <%!Double(ProcessInfo.processInfo.systemUptime)%>
    their GUI_ctxt: createGUI_ctxt()                    <- <%!NSGraphicsContext.current?.cgContext%>
    //void: fullScreenModeOn()                            <- <%{}%>
    //void: fullScreenModeOff()                           <- <%{}%>
    void: initializeGraphics(me bool: startFullScreen)  <- <%{ // window, canvas
    their GUI_ctxt: createGUI_ctxt()                    <- <%!NSGraphicsContext.current?.cgContext%>
    void: initializeGraphics(me bool: startFullScreen)  <- <%{ // screenSurface, window, canvas
        screenSurface = Canvas(frame: NSRect(x: 0, y: 0, width: 500, height: 500))
        let delegate = AppDelegate()
        NSApplication.shared.delegate = delegate
        _ = NSApplicationMain(CommandLine.argc, CommandLine.unsafeArgv)
    }%>
}
/////////////////////////////////  GUI_ctxt
struct GUI_ctxt{
    //me void: fetchAreaToBeDrawn(me GUI_rect: area)    <- <%!%>
    //me void: reset()                                  <- <%!%>
    //me void: setRGBA(me double: red, me double: green, me double: blue, me double: alpha) <- <%!%>
    //me void: setRGB (me double: red, me double: green, me double: blue) <- <%!%>
    me void: setColor(me cdColor: color)                <- <%!%0.setFillColor(red:CGFloat(%1.red), green:CGFloat(%1.green), blue:CGFloat(%1.blue), alpha:1);%0.setStrokeColor(red:CGFloat(%1.red/256), green:CGFloat(%1.green/256), blue:CGFloat(%1.blue/256), alpha:1)%>
    me void: setLineWidth(me double: width)             <- <%!cr!.setLineWidth(%1)%>
    me void: moveTo(me double: x, me double: y)         <- <%!path.move(to:CGPoint(x:%1, y:%2))%>
    me void: lineTo(me double: x, me double: y)         <- <%!path.addLine(to:CGPoint(x:%1, y:%2))%>
    me void: strokeNow()                                <- <%!drawPath(using: .fillStroke)%>
    me void: fillNow()                                  <- <%!fill(CGRect(x:0, y:0, width:screenWidth, height:screenHeight))%>
    //me void: strokeKeep()                             <- <%!%>
    //me void: fillKeep()                               <- <%!%>
    //me void: setFillPattern()                         <- <%!%>
    //me void: circle(me int: centerX, me int: centerY, me int: radius) <- <%!%>
    //their GUI_ctxt: newPDF_ctxt(me sting: filename, me double: inchesWide, me double: inchesHigh) <- <%!%>

    me void: rectangle(me double: x, me double: y, me double: w, me double: h) <- <%!addRect(CGRect(x:%1, y:%2, width:%3, height:%4))%>
}
/////////////////////////////////  WINDOW
struct GRWindow{
    void: requestRedraw()                               <- <%!update()%>
}

struct GameEvent{
    //https://nexo.dev/post/2019/04/27/how-to-open-window-in-macos-programmatically-using-swift/
}
struct UserEvent{
}
struct WindowEvent{
}
struct KeyboardEvent{
}
struct KeyInfo{
}
struct MouseButtonEvent{
}
struct GameLooper{
    me bool: PollForEvent(their GameEvent: event)       <- <%!nextEvent(matching: .any, until: nil, inMode: .default, dequeue: true)%>
}

/////////////////////////////////  LOOPER
/////////////////////////////////  EVENTS
/////////////////////////////////  IMAGES
/////////////////////////////////  SOUND

