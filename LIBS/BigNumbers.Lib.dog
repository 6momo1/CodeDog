//####### Native CodeDog library
LinuxTestBuild: Platform='Linux' Lang='CPP'  testMode='makeTests';
featuresNeeded = [BigNumbers.CPP]
requirements = [
    [require, BigNumbers_implementation]
]
ProgramOrLibrary = "program"
TestSpec = "BigNumbersTest.dog"

struct GLOBAL{
    me BigInt: min(me BigInt: A, me BigInt: B) <-{
        if(A<=B){return(A)}
        return(B)
    }
    me BigInt: max(me BigInt: A, me BigInt: B) <-{
        if(A>=B){return(A)}
        return(B)
    }
}
struct BigInt{}
struct BigFloat{}
struct BigFrac{}
struct FlexNum{
    me int: decPlaces <- -1
    me BigFrac: val

    void: setNumerator(me string: numerator)
    void: setDenominator(me string: denominator)
    me BigInt: getNumerator()
    me BigInt: getDenominator()
    me string: stringify() <- {
        if(decPlaces == -1){
            return(toString(val))
        }
        me string: T <- toString(getNumerator())
        me int: TSize <- T.size()
        me int: lDecPlace <- TSize-decPlaces+1
        me string: S <- T.subStr(0,lDecPlace)+"."
        S <+- T.subStr(lDecPlace, TSize)
        return(S)
    }
    void: fromString(me string: str) <- {
        me int: size <- str.size()
        me int: dotPos <- -1
        withEach idx in RANGE(0..size){
            if(str[idx]=="."){
                dotPos <- idx
                break()
            }
        }
        if(dotPos!=-1){
            decPlaces <- size-dotPos
            me string: numerator   <- str.subStr(0,dotPos)+ str.subStr(dotPos+1,size-decPlaces-1)
            me string: denominator <- "1"
            withEach n in RANGE(1..decPlaces-1){
                denominator <+- "0"
            }
            setNumerator(numerator)
            setDenominator(denominator)
        }
    }
}

