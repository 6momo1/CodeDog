/////////// Add routines for C++
requirements = [
    [tagOneOf, Lang, [CPP]]
]

interface={
    provides = [BigNumbers_implementation]
    libFiles = [gmp, gmpxx]
    headers  = [gmp.h, gmpxx.h]
}

LibDescription ={
    useStatus   = dynamic
    description = 'Built in routines for CPP'
}

struct GLOBAL{
    me string: toString(me BigInt: val) <- <%!%1.get_str(10)%>
    me string: toString(me BigFrac: val) <- <%!%1.get_str(10)%>
    me string: toString(me BigFloat: val) <- <%{
        int64_t exp;
        string S = val.get_str(exp,10,12);
        logMgr.Mesg.LogEntry("  ", "     exp:"+std::to_string(exp)+ "   S:"+S);
        return(S);
    }%>
}
struct BigInt: wraps = mpz_class{
    me int64: convertToIntVal() <- <%!%0.get_ui()%>
    me int: hexNumToBigInt(me string: val) <- <%!%0.set_str(%1, 16)%>
    me int: binNumToBigInt(me string: val) <- <%!%0.set_str(%1, 2)%>
    me int: decNumToBigInt(me string: val) <- <%!%0.set_str(%1, 10)%>
}
struct BigFloat: wraps = mpf_class{
    me double: convertToFloat() <- <%!%0.get_d()%>
    me int: hexNumToBigFloat(me string: val) <- <%!%0.set_str(%1, 16)%>
    me int: binNumToBigFloat(me string: val) <- <%!%0.set_str(%1, 2)%>
    me int: decNumToBigFloat(me string: val) <- <%!%0.set_str(%1, 10)%>
}

struct BigFrac: wraps = mpq_class{
    me double: convertToFloat() <- <%!%0.get_d()%>
    me double: normalize() <- <%!%0.canonicalize()%>
    me int: hexNumToBigFrac(me string: val) <- <%!%0.set_str(%1, 16)%>
    me int: binNumToBigFrac(me string: val) <- <%!%0.set_str(%1, 2)%>
    me int: decNumToBigFrac(me string: val) <- <%!%0.set_str(%1, 10)%>
}
struct FlexNum{
    void: setNumerator(me string: numerator)     <- <%{
        mpz_ptr A = val.get_num_mpz_t();
        mpz_set_str(A,numerator.data(),10);
    }%>
    void: setDenominator(me string: denominator) <- <%{
        mpz_ptr A = val.get_den_mpz_t();
        mpz_set_str(A,denominator.data(),10);
    }%>
    me BigInt: getNumerator()     <- <%{
        mpz_ptr A = val.get_num_mpz_t();
        return(mpz_class(A));
    }%>
    me BigInt: getDenominator() <- <%{
        mpz_ptr A = val.get_den_mpz_t();
        return(mpz_class(A));
    }%>
}

