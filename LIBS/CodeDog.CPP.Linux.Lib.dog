/////////// Add Linux-specific routines for C++
requirements = [
    [tagOneOf, Lang, [CPP]],
    [tagOneOf, Platform, [Linux]]
]

interface={
    provides = [CPP_OS_tools]
    libFiles = []
    headers  = []
}


LibDescription ={
    useStatus   = dynamic
    description = 'Built in Linux-specific routines for CPP'
}

embedHigh = `
// platform dependent wrappers
int makedir(const char *dirname) {
	return(mkdir(dirname, S_IRWXU | S_IRWXG | S_IROTH | S_IXOTH));
}
void stringcopy(char *dest, size_t dest_size, const char *src) {
	strcpy(dest, src);
}
FILE* pipeopen(const char *command, const char *type) {
	return(popen(command, type));
}
int pipeclose(FILE* stream) {
	return(pclose(stream));
}
`

struct GLOBAL {
	void: sleep(me int: milliseconds) <- <%{
       struct timespec req, rem;
       if(milliseconds > 999) {
            req.tv_sec = (int)(milliseconds / 1000);                            /* Must be Non-Negative */
            req.tv_nsec = (milliseconds - ((long)req.tv_sec * 1000)) * 1000000; /* Must be in range of 0 to 999999999 */
       }else{
            req.tv_sec = 0;                         /* Must be Non-Negative */
            req.tv_nsec = milliseconds * 1000000;    /* Must be in range of 0 to 999999999 */
       }
       nanosleep(&req , &rem);
   }%>

	me string: execCmd(me string: command) <- <%{
      FILE* pipe;
      std::array<char, 128> buffer;
      string result = "";
      pipe = pipeopen(command.data(), "r");
      if (pipe == NULL) {
        cout<<"Cannot execute command:'" << command<<"'\n";
        return "";
      }
      while(fgets(buffer.data(), 128, pipe) != NULL) {
        result = result+buffer.data();
      }
      pipeclose(pipe);
      return result;
    }%>

}
