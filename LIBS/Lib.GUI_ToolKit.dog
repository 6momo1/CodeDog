/- CodeDog GUI toolikt
requirements = [
    [require, GUI_ToolKit_implementation]
]

/- Set up a complete application: fonts, colors, a window/frame with a menu, toolbar, app area and optionally a statusbar.
/- Boilerplate details such as resizing windows, etc are taken care of in the best way for each platform.

struct deltaSize{me int: width    me int: height}
struct GUI_rect{me double: x1 me double: y1 me double: x2 me double: y2}
struct GUI_offset{}
struct GUI_ctxt{}


struct GUI_item{}
struct GUI_menuBar{}
struct GUI_menu{}
struct GUI_menuItem{}
struct GUI_canvas{}
struct GUI_container{}
struct GUI_Frame{}
struct GUI_ScrollingWindow{}
struct GUI_callback{}
struct GUI_MotionEvent{}
struct GUI_ButtonEvent{}
struct INK_Image{}

/- GUI Widgets
struct boolWidget{}
struct floatWidget{}
struct rangeWidget{}
struct intWidget{}
struct stringWidget{}
struct enumWidget{}
struct timeWidget{}
struct dateWidget{}

struct GUI{
    me void: showWidget(me GUI_item: widget)
    me GUI_item: newCanvas()
    me void: setWidgetSize(me GUI_item: widget, me uint32: width, me uint32: height)
    me GUI_item: newScrollingWindow()
    me void: addToContainer(me GUI_container: container, me GUI_item: widget)
    me void: addToContainerAndExpand(me GUI_container: container, me GUI_item: widget)
    me void: addMenuBar(me GUI_menuBar: menubar)
    me void: create_MenuItem(me GUI_menu: ParentMenu, me string: label)
    me void: create_TopSubMenu(me GUI_menuBar: ParentMenu, me string: label)
    me void: create_SubMenu(me GUI_menu: ParentMenu, me string: label)
    me void: setCallback()

}

struct GLOBAL{
    /- GUI Widgets
    me boolWidget:      makeBoolWidget(me string: label)
    me floatWidget:     makeFloatWidget(me string: label)
    me numRangeWidget:  makeNumRangeWidget(me string: label)
    me rangeWidget:     makeRangeWidget(me string: label)
    their GUI_Frame:    makeIntWidget(me string: label)
    me enumWidget:      makeEnumWidget(me string: label, me string[list]: options)
    me timeWidget:      makeTimeWidget(me string: label)
    me dateWidget:      makeDateWidget(me string: label)
}

struct GUI_ctxt {
    /-me void: fetchAreaToBeDrawn(me GUI_rect: area)
    me void: reset()
    me void: setRGBA(me double: red, me double: green, me double: blue, me double: alpha)
    me void: setRGB (me double: red, me double: green, me double: blue)
    me void: setLineWidth(me double: width)
    me void: moveTo(me double: x, me double: y)
    me void: lineTo(me double: x, me double: y)
    me void: moveRel(me double: dx, me double: dy)
    me void: lineRel(me double: dx, me double: dy)
    me void: curveTo(me double: x1, me double: y1, me double: x2, me double: y2, me double: x3, me double: y3)
    me void: curveRel(me double: dx1, me double: dy1, me double: dx2, me double: dy2, me double: dx3, me double: dy3)
    me void: rectangle()
    me void: paintNow()
    me void: strokeNow()
    me void: fillNow()
}


struct color{}
struct colorScheme{}
struct fontSpec{}
struct fontScheme{}



/------------------------ Widgets and events

struct GUI_PointerEvent{}
struct GUI_ButtonEvent{}
struct GUI_KeyboardEvent{}
struct GUI_WindowEvent{}
struct GUI_DataEvent{}
struct GUI_TimeEvent{}
struct GUI_UserEvent{}
struct GUI_DrawEvent{}


/- decor(ations) are like light weight widgets. They have only draw().

struct decor{
    void: draw(me GUI_ctxt: cr) <- {}
}

struct arrow: inherits='decor'{
    me double: startX
    me double: startY
    me double: endX
    me double: endY

    me void: draw(me GUI_ctxt: cr) <- {
        me double: tipLength <- 10
        me double: tipAngle <- 0.35

        me double: angle <- atan2(endY - startY, endX - startX) + 3.14159265359

        me double: x1 <- endX + tipLength * cos(angle - tipAngle)
        me double: y1 <- endY + tipLength * sin(angle - tipAngle)
        me double: x2 <- endX + tipLength * cos(angle + tipAngle)
        me double: y2 <- endY + tipLength * sin(angle + tipAngle)

        cr.moveTo(startX, startY)
        cr.lineTo(endX, endY)
        cr.lineTo(x1, y1)
        cr.lineTo(x2, y2)
        cr.lineTo(endX, endY)
        cr.closePath()
        cr.fillKeep()
        cr.strokeNow()
    }

    none: arrow(me int: StartX, me int: StartY, me int: EndX, me int: EndY) <- {
        startX <- StartX
        startY <- StartY
        endX   <- EndX
        endY   <- EndY
    }
}

struct widget{
    me int: posX
    me int: posY
    me int: width
    me int: height
    me int: scale
/-    me color: defaultColor
    bool: isHidden

    void: draw(me GUI_ctxt: cr) <- {}
    me bool: handleAllClicks(their GUI_ButtonEvent: event) <- {return(false)}
    me bool: primaryClick(their GUI_ButtonEvent: event) <- {return(false)}
    me bool: primaryDblClick(their GUI_ButtonEvent: event) <- {return(false)}
    me bool: primaryDn(their GUI_ButtonEvent: event) <- {return(false)}
    me bool: primaryUp(their GUI_ButtonEvent: event) <- {return(false)}
    me bool: secondaryClick(their GUI_ButtonEvent: event) <- {return(false)}
    me bool: secondaryDblClick(their GUI_ButtonEvent: event) <- {return(false)}
    me bool: secondaryDn(their GUI_ButtonEvent: event) <- {return(false)}
    me bool: secondaryUp(their GUI_ButtonEvent: event) <- {return(false)}
    me bool: mouseMoved(their GUI_PointerEvent: event) <- {return(false)}
    me bool: mouseDragged(their GUI_PointerEvent: event) <- {return(false)}
    me bool: mouseEnter(their GUI_PointerEvent: event) <- {return(false)}
    me bool: mouseExit(their GUI_PointerEvent: event) <- {return(false)}
    me bool: mouseWheel(their GUI_PointerEvent: event) <- {return(false)}
    me bool: fingerSqueeze(their GUI_PointerEvent: event) <- {return(false)}

    me bool: keyTyped(their GUI_KeyboardEvent: event) <- {return(false)}
    me bool: keyDown(their GUI_KeyboardEvent: event) <- {return(false)}
    me bool: keyUp(their GUI_KeyboardEvent: event) <- {return(false)}

    me bool: windowChange(their GUI_WindowEvent: event) <- {return(false)}
    me bool: dataUpdated(their GUI_DataEvent: event) <- {return(false)}         /- This widget's data has been updated
    me bool: timerTick(their GUI_TimeEvent: event) <- {return(false)}           /- Timer to change data
    me bool: tweenTick(their GUI_TimeEvent: event) <- {return(false)}           /- Timer for state-change animation frame
    me bool: userEvent(their GUI_UserEvent: event) <- {return(false)}
    me bool: focused(their GUI_PointerEvent: event) <- {return(false)}
    me bool: unfocused(their GUI_PointerEvent: event) <- {return(false)}

    bool: isTouchingMe(me GUI_scalar: x, me GUI_scalar: y) <- {
        return ((x >= posX) and (x < posX + width) and (y >= posY) and (y < posY + height))
    }
    void: initialize(me int: PosX, me int: PosY, me int: Width, me int: Height, me int: Scale, me int: Alpha ) <- {
        posX <- PosX
        posY <- PosY
        width <- Width
        height <- Height
        scale <- Scale
    }
}


/-///////////////////////////////  HIGHER LEVEL WIDGETS

struct ListWidgetManager{
    me ListEditorWidget: LEW

    /- Override all these for each new list editing widget
    their GUI_item: makeListViewWidget() <- {return(NULL)}
    void: updateViewableWidget(their GUI_item: Wid) <- {}
    their GUI_item: makeEditableWidget() <- {return(NULL)}
    void: updateEditableWidget(their GUI_item: Wid) <- {}
    void: updateCrntFromEdited(their GUI_item: Wid) <- {}
    void: allocateNewCurrentItem() <- {}
    void: pushCrntToList() <- {}
    void: deleteNthItem() <- {}
    void: copyCrntBackToList() <- {}
    void: handleAdd() <- {}
    void: handleDelete() <- {}
    void: handleEdit() <- {}

    /- Also, add their GUI_item: initWidget(<listType>)
}
