/-////////////  Add GUI-Toolkit features using Android
requirements = [
    [tagOneOf, Platform, [Android]]
]

interface={
    provides=[GUI_ToolKit_implementation]
    libFiles=[]
    headers=[android.view.View, android.view.Menu, android.view.SubMenu, android.view.MotionEvent, android.view.View.OnTouchListener,
        android.widget.LinearLayout, android.widget.LinearLayout.LayoutParams, android.support.v4.widget.NestedScrollView, android.widget.HorizontalScrollView, android.widget.TextView,
        android.widget.RelativeLayout, android.widget.FrameLayout,
        android.widget.Toast, android.app.AlertDialog, android.app.AlertDialog.Builder, android.content.DialogInterface, android.support.v4.content.ContextCompat,
        android.support.v7.app.AppCompatActivity, android.os.Bundle, android.support.v7.widget.Toolbar,
        android.support.v4.app.FragmentActivity, android.app.FragmentTransaction, android.app.FragmentManager, android.app.Fragment, android.support.v4.app.DialogFragment,
        android.util.Log, android.content.res.AssetManager, android.content.Context, android.graphics.Rect,
        android.graphics.Canvas, android.graphics.Color, android.graphics.Paint, android.graphics.Path, android.graphics.LinearGradient,
        android.graphics.Typeface, android.graphics.Bitmap, android.graphics.BitmapFactory, android.graphics.Shader, android.graphics.Shader.TileMode,
        android.widget.EditText, android.widget.Button, android.widget.ListView, android.widget.Spinner, android.widget.SpinnerAdapter, android.widget.ArrayAdapter, android.widget.DatePicker, android.widget.TimePicker, android.widget.CheckBox,
        android.widget.NumberPicker, android.text.InputType, android.view.LayoutInflater, android.view.ViewGroup,
        android.support.design.widget.FloatingActionButton, android.widget.AdapterView, android.widget.AdapterView.OnItemClickListener, android.media.ToneGenerator, android.media.AudioManager, android.content.res.ColorStateList,
    android.R.drawable, android.graphics.drawable.Drawable, android.graphics.drawable.GradientDrawable
    ]
}

LibDescription ={
    useStatus  = dynamic 
    description='GUI for Android '
    features   =[]
    platforms  =[]
    bindings   =[]
    CPUs       =[]
}

/-///////////////////////////////  STRUCT CONVERTERS
struct GUI_rect{me double: x1 me double: y1 me double: x2 me double: y2}
struct GUI_offset{their GtkAdjustment:GUI_offset}
struct GUI_item{me View: GUI_item}
struct GUI_Frame{me LinearLayout:GUI_Frame}
struct GUI_menuBar{me ourSubMenu: GUI_menuBar}
struct GUI_menu{me ourSubMenu: GUI_menu}
struct GUI_menuItem{me MenuItem: GUI_menuItem}
struct GUI_canvas{me CanvasView: GUI_canvas}
struct GUI_container{me LinearLayout:GUI_container}
struct GUI_ScrollingWindow{me NestedScrollView: GUI_ScrollingWindow}
struct INK_Image{their Paint: INK_Image}      /- How will the ink look?
struct GUI_callback{me GCallback: GUI_callback}
struct GUI_scalar{me float: GUI_scalar}
struct GUI_label{their textView: GUI_label}
struct listWidget{their LinearLayout: listWidget}

struct GUI_button{me button: GUI_button}

/-///////////////////////////////  WIDGETS
struct GUI_storyBoard: inherits=FragmentActivity{
    their LinearLayout: GUI_storyBoard
    me void: addPane(their GUI_Frame: frame) <- <%!%1.addView(%2)%>
}

struct intWidget{
    their LinearLayout: box
    their TextView: dataLabel
    their TextView: dataValue

    me void: getValue() <- {}
    me void: setValue() <- {}

    their LinearLayout: makeIntWidget(me string: name)  <- <%{
        box = new LinearLayout(GLOBAL.static_Global);
        dataLabel = new TextView(GLOBAL.static_Global);
    dataLabel.setText(name);
        box.addView(dataLabel);
        dataValue = new TextView(GLOBAL.static_Global);
    dataValue.setText(name);
        box.addView(dataValue);
        return box;
    }%>
}
struct stringWidget{
    their LinearLayout: box
    their TextView: dataLabel
    their TextView: dataValue

    me void: getValue() <- {}
    me void: setValue(me string: label) <- {}

    their LinearLayout: makeStringWidget(me string: name) <- <%{
        box = new LinearLayout(GLOBAL.static_Global);
        dataLabel = new TextView(GLOBAL.static_Global);
    dataLabel.setText(name);
        box.addView(dataLabel);
        dataValue = new TextView(GLOBAL.static_Global);
    dataValue.setText(name);
        box.addView(dataValue);
        return box;
    } %>
}
struct enumWidget{
    their LinearLayout: box
    their TextView: dataLabel
    their TextView: dataValue
    me string[list]: options

    me void: getValue() <- {}
    me void: setValue() <- {}

    their LinearLayout: makeEnumWidget(me string: label, me string[list]: Options)  <- <%{
        options = Options;
        box = new LinearLayout(GLOBAL.static_Global);
        return box;
    }%>
}

struct scrollerWidget{
    their LinearLayout: layoutArea <- (GLOBAL.static_Global)
    their NestedScrollView: scroller

    their GUI_ScrollingWindow: makeScrollerWidget(their CanvasView: canvas) <- <%{
        scroller = new NestedScrollView(GLOBAL.static_Global);
        scroller.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT));
    HorizontalScrollView hScroller = new HorizontalScrollView(GLOBAL.static_Global);
        hScroller.setLayoutParams(new LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.MATCH_PARENT));
        scroller.addView(hScroller);
        layoutArea = new LinearLayout(GLOBAL.static_Global);
        layoutArea.setOrientation(LinearLayout.VERTICAL);
        layoutArea.setLayoutParams(new LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));
        hScroller.addView(layoutArea);
    layoutArea.addView(canvas);
        return(scroller);
    }%>
}

struct boolWidget{
    their CheckBox: checkBox
}

/-///////////////////////////////  LIST EDITOR WIDGET
struct ListManagerBox{
    their ListWidgetManager: listWidgetMgr
    their RelativeLayout: editorFrame
    their View: listWidget
    their FloatingActionButton: addBtn
    their FloatingActionButton: deleteBtn
    their FloatingActionButton: editBtn

    void: handleOnListClick(me int: idx) <- <% {

    } %>

    void: handleAdd() <- <%{
        listWidgetMgr.handleAdd();
    }%>

    void: handleDelete() <- <% {
        listWidgetMgr.handleDelete();
    }%>

    void: handleEdit() <- <%{
        listWidgetMgr.handleEdit();
    }%>

    void: setButtonsActive(me int: L) <- <%{

    }%>

    their RelativeLayout: init_dialog(their ListWidgetManager: LEWM) <- <% {
        listWidgetMgr = LEWM;
        // EDITOR FRAME
        editorFrame = new RelativeLayout(GLOBAL.static_Global);
        RelativeLayout.LayoutParams editorFrameParams = new RelativeLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,ViewGroup.LayoutParams.MATCH_PARENT);
        editorFrame.setLayoutParams(editorFrameParams);
        // LIST WIDGET
        listWidget = listWidgetMgr.makeListViewWidget();
        editorFrame.addView(listWidget);
        // ADD BUTTON
        addBtn = new FloatingActionButton(GLOBAL.static_Global);
        addBtn.setOnClickListener(new View.OnClickListener() {public void onClick(View v) {handleAdd();}});
        addBtn.setImageResource(android.R.drawable.ic_menu_add );
        addBtn.setBackgroundTintList(ColorStateList.valueOf(Color.RED));
        addBtn.setSize(android.support.design.widget.FloatingActionButton.SIZE_MINI);
        RelativeLayout.LayoutParams addBtnParams = new RelativeLayout.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT,ViewGroup.LayoutParams.WRAP_CONTENT);
        addBtnParams.addRule(RelativeLayout.ALIGN_PARENT_RIGHT);
        addBtnParams.topMargin = 550;
        addBtnParams.rightMargin = 40;
        addBtn.setLayoutParams(addBtnParams);
        editorFrame.addView(addBtn);
        // DELETE BUTTON
        deleteBtn = new FloatingActionButton(GLOBAL.static_Global);
        deleteBtn.setOnClickListener(new View.OnClickListener() {public void onClick(View v) {handleDelete();}});
        //Drawable trashIcon = ContextCompat.getDrawable(GLOBAL.static_Global, android.R.drawable.ic_menu_delete);
        deleteBtn.setImageResource(android.R.drawable.ic_menu_delete);
        deleteBtn.setBackgroundTintList(ColorStateList.valueOf(Color.RED));
        deleteBtn.setSize(android.support.design.widget.FloatingActionButton.SIZE_MINI);
        RelativeLayout.LayoutParams deleteBtnParams = new RelativeLayout.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT,ViewGroup.LayoutParams.WRAP_CONTENT);
        deleteBtnParams.addRule(RelativeLayout.ALIGN_PARENT_LEFT);
        deleteBtnParams.topMargin = 550;
        deleteBtnParams.leftMargin = 40;
        deleteBtn.setLayoutParams(deleteBtnParams);
        editorFrame.addView(deleteBtn);
        // EDIT BUTTON
        editBtn = new FloatingActionButton(GLOBAL.static_Global);
        editBtn.setOnClickListener(new View.OnClickListener() {public void onClick(View v) {handleEdit();}});
        //Drawable trashIcon = ContextCompat.getDrawable(GLOBAL.static_Global, android.R.drawable.ic_menu_edit);
        editBtn.setImageResource(android.R.drawable.ic_menu_edit);
        editBtn.setBackgroundTintList(ColorStateList.valueOf(Color.RED));
        editBtn.setSize(android.support.design.widget.FloatingActionButton.SIZE_MINI);
        RelativeLayout.LayoutParams editBtnParams = new RelativeLayout.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT,ViewGroup.LayoutParams.WRAP_CONTENT);
        editBtnParams.addRule(RelativeLayout.CENTER_HORIZONTAL);
        editBtnParams.topMargin = 550;
        //editBtnParams.leftMargin = 40;
        editBtn.setLayoutParams(editBtnParams);
        editorFrame.addView(editBtn);
        return editorFrame;
    } %>

/-//// Code Converters
    /-me void: gtk_label_new() <- <%!addView(%1)%>
}

/-///////////////////////////////  HIGHER LEVEL WIDGETS
struct GLOBAL{
    /- Widgets
    their rangeWidget: makeRangeWidget(me string: label)       <- <%!%Gnew EditText(GLOBAL.static_Global)%>
    their GUI_Frame: makeFrameWidget(me string: label)         <- <%!%Gnew LinearLayout(GLOBAL.static_Global)%>
    their GUI_Frame: makeXStackWidget(me string: label)    <- <%{
        LinearLayout box = new LinearLayout(GLOBAL.static_Global);
        box.setOrientation(LinearLayout.HORIZONTAL);
        return box;
    }%>

    me void: addToContainer(me GUI_container: container, me GUI_item: widget) <- <%!%G%1.addView(%2)%>

    their  GUI_Frame : makeNumRangeWidget(me string: label)      <- <%{
        LinearLayout box = new LinearLayout(GLOBAL.static_Global);
        NumberPicker numberPicker  = new NumberPicker(GLOBAL.static_Global);
        box.addView(numberPicker);
        return box;
    }%>

    their  GUI_Frame : makeDateWidget(me string: label)      <- <%{
        LinearLayout box = new LinearLayout(GLOBAL.static_Global);
        DatePicker datePicker  = new DatePicker(GLOBAL.static_Global);
        box.addView(datePicker);
        return box;
    }%>

    their GUI_Frame: makeTimeWidget(me string: label)      <- <%{
        LinearLayout box = new LinearLayout(GLOBAL.static_Global);
        TimePicker timePicker = new TimePicker(GLOBAL.static_Global);
        box.addView(timePicker);
        return box;
    }%>

    their GUI_Frame: makeBoolWidget(me string: label)      <- <%{
        LinearLayout box = new LinearLayout(GLOBAL.static_Global);
        CheckBox checkBox = new CheckBox(GLOBAL.static_Global);
        box.addView(checkBox);
        return box;
    }%>

    their GUI_Frame: makeListWidget(me string: label)      <- <%{
        LinearLayout box = new LinearLayout(GLOBAL.static_Global);
        TextView textView = new TextView(GLOBAL.static_Global);
        textView.setText(label);
        box.addView(textView);
        return box;
    }%>

    their GtkWidget: makeRowWidget(me string: label)         <- <%!%Ggtk_list_box_row_new()%>
    their FragmentManager: fragmentManager

    their GUI_Frame: makeStoryBoardWidget(me string: label)      <- <%{
        LinearLayout storyBoard = new LinearLayout(GLOBAL.static_Global);
        storyBoard.setOrientation(LinearLayout.VERTICAL);
        FragmentTransaction fragmentTransaction = GLOBAL.static_Global.fragmentManager.beginTransaction();
        Fragment testFrag = new StoryBoard();
        fragmentTransaction.add(testFrag, label);
        fragmentTransaction.commit();
        return storyBoard;
    }%>

    their GUI_Frame: makeLabelWidget(me string: label)      <- <%{
        LinearLayout box = new LinearLayout(GLOBAL.static_Global);
        TextView textBox = new TextView(GLOBAL.static_Global);
        textBox.setText(label);
        box.addView(textBox);
        return box;
    }%>

    their GUI_Frame: makeFloatWidget(me string: label)      <- <%{
        LinearLayout box = new LinearLayout(GLOBAL.static_Global);
        EditText editBox = new EditText(GLOBAL.static_Global);
        editBox.setInputType(InputType.TYPE_CLASS_NUMBER);
        editBox.setHint(label);
        box.addView(editBox);
        return box;
    }%>

    their GUI_Frame: makeIntWidget(me string: label)      <- <%{
        LinearLayout box = new LinearLayout(GLOBAL.static_Global);
        EditText editText = new EditText(GLOBAL.static_Global);
        editText.setInputType(InputType.TYPE_CLASS_NUMBER);
        editText.setHint(label);
        /-editWidget = editText;
        box.addView(editText);
        return box;
    }%>

    their GUI_Frame: makeStringWidget(me string: label)      <- <%{
        LinearLayout box = new LinearLayout(GLOBAL.static_Global);
        EditText editText = new EditText(GLOBAL.static_Global);
        editText.setInputType(InputType.TYPE_CLASS_TEXT);
        editText.setHint(label);
        /-editWidget = editText;
        box.addView(editText);
        return box;
    }%>

    their  GUI_Frame: makeEnumWidget(me string: label, me string[list]: options)      <- <%{
        LinearLayout box = new LinearLayout(GLOBAL.static_Global);
        Spinner spinner = new Spinner(GLOBAL.static_Global);
        spinner.setPrompt(label);
        ArrayAdapter<String> adapter = new ArrayAdapter<String>(GLOBAL.static_Global, 0);
        adapter.addAll(options);
        spinner.setAdapter(adapter);
        box.addView(spinner);
        return box;
    }%>
    me void: setLabelWidth(their GUI_Frame: labelWidget, me int: width) <- <%{
        LayoutParams params = new LayoutParams(width, LayoutParams.WRAP_CONTENT);
    params.width = width;
    labelWidget.setLayoutParams(params);
    }%>

    me void: setListWidgetSelectionMode(their listWidget: listWidgetView, me string: mode) <- <%!%G %>

}

struct StoryBoard: inherits=Fragment{
    their LinearLayout: frame
    me String: label <- "StoryBoard"

    me LinearLayout: onCreateView(me LayoutInflater: inflater, me View: container, me Bundle: savedInstanceState) <- <%{
        LinearLayout frame = new LinearLayout(getActivity());
        TextView tv = new TextView(GLOBAL.static_Global);
        tv.setText(label);
        frame.addView(tv);
        return frame;
    }%>
}

/-///////////////////////////////  HANDLE EVENTS

struct GUI_MouseEvent{
    their MotionEvent: GUI_MouseEvent
    me int: x <- <%!getX()%>
    me int: y <- <%!getY()%>
}

struct GUI_MotionEvent{
    their MotionEvent: GUI_MotionEvent
    me int: x <- <%!getX()%>
    me int: y <- <%!getY()%>
}

struct GUI_ButtonEvent{
    their MotionEvent: GUI_ButtonEvent
    me int: x <- <%!getX()%>
    me int: y <- <%!getY()%>
}

struct GUI_PointerEvent{
    their MotionEvent: GUI_PointerEvent
    me int: x <- <%!getX()%>
    me int: y <- <%!getY()%>
}

/-///////////////////////////////  EVENT DISPATCHER
struct Android_eventDispatcher{
    their widget: topWidget

    me bool: dispatchPointerClickEvent(their GUI_MouseEvent: event) <- <%{
        boolean returnVal = false;

        switch (event.getAction()) {
        case MotionEvent.ACTION_DOWN:
            //GLOBAL.static_Global.toolbar.setTitle("ACTION_DOWN!");
            topWidget.primaryClick(event);
            returnVal= true;
            break;
        case MotionEvent.ACTION_MOVE:
        //GLOBAL.static_Global.toolbar.setTitle("ACTION_MOVE!");
        returnVal= true;
            break;
        case MotionEvent.ACTION_UP:
            //GLOBAL.static_Global.toolbar.setTitle("ACTION_UP!");
        returnVal= true;
            break;
        case MotionEvent.ACTION_CANCEL:
            //GLOBAL.static_Global.toolbar.setTitle("ACTION_CANCEL!");
            returnVal= true;
            break;
        case MotionEvent.ACTION_POINTER_DOWN:
            //GLOBAL.static_Global.toolbar.setTitle("ACTION_POINTER_DOWN!");
            returnVal= true;
            break;
        case MotionEvent.ACTION_POINTER_UP:
            //GLOBAL.static_Global.toolbar.setTitle("ACTION_POINTER_UP!");
            returnVal= true;
            break;
        default:
                return false;
        }

        return returnVal;
    }%>

    me void: registerWidgetForEventDispatcher(me CanvasView: appWidget, their widget: masterWidget) <- {
        topWidget<-masterWidget
        /-appWidget.addOnTouchListener(onTouchListener);
        /-appWidget.setOnTouchListener(GLOBAL.static_Global.EventDispatcher);
    }
}

/-///////////////////////////////  HANDLE GUI
struct CanvasView: inherits=View implements=OnTouchListener{
    me GUI_ctxt: cr

    me none: CanvasView() <- <%{
        super(GLOBAL.static_Global);
        setOnTouchListener(this);
    }%>
    me bool: onTouch(me View: v, me MotionEvent: event) <- <%{
        boolean retVal = GLOBAL.static_Global.EventDispatcher.dispatchPointerClickEvent(event);
        return retVal;
    }%>
    me void: onDraw(me Canvas: canvas) <- <%{
        super.onDraw(canvas);
        cr = new GUI_ctxt(canvas);
        cr.cur_x=0; cr.cur_y=0;
        cr.GPath.reset();
        GLOBAL.static_Global.drawAppArea_cb(this, cr);
        invalidate();
    }%>

}


/-///////////////////////////////  HANDLE GUI
struct GUI : inherits=LinearLayout{
    me LinearLayout: frame <- (GLOBAL.static_Global)
    me LinearLayout: layoutArea <- (GLOBAL.static_Global)
    me NestedScrollView: scroller

    me none: GUI() <- <%{super(GLOBAL.static_Global);}%>

    me void: GUI_PopulateAndExec() <- <% {
        frame = new LinearLayout(GLOBAL.static_Global);
        frame.setOrientation(LinearLayout.VERTICAL);
        frame.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT,LayoutParams.MATCH_PARENT));
/-        frame.setDefaultCloseOperation(LinearLayout.EXIT_ON_CLOSE);
        GLOBAL.static_Global.setContentView(frame);
        GLOBAL.static_Global.thisApp.createAppArea(frame);
    } %>

    me uint32: GUI_Init() <- <%{
        GUI_Run();
        return(0);
    }%>

    me uint32: GUI_Run() <- <% {
        int status=0;
        GLOBAL.static_Global.thisApp.gui.GUI_PopulateAndExec();
        return(status);
    } %>

    me void: GUI_Deinit() <- {

    }

    me GUI_menuBar: create_TopSubMenu(our GUI_menuBar: dummyMenubar, me string: text) <- {
        me ourSubMenu: subMenu <- (text)
        GLOBAL.static_Global.thisApp.menubar.items.pushLast(subMenu)
        return(subMenu)
    }

    me void: create_MenuItem(me GUI_menu: menu, me string: menuLabel) <- {
        our ourSubMenu: thisMenuItem <- (menuLabel)
        menu.items.pushLast(thisMenuItem)
    }

    me GUI_menu: create_SubMenu(me GUI_menu: ParentMenu, me string: text) <- <%  {
        ourSubMenu subMenu = new ourSubMenu(text);
        GLOBAL.static_Global.thisApp.menubar.items.add(subMenu);
        return(subMenu);
    } %>

}

struct GUI {
    me void: showWidget(me GUI_item: widget) <-  <%!%1.setVisible(true)%>
    me GUI_item: newCanvas() <- <%!%Gnew CanvasView()%>
    me void: setWidgetSize(me GUI_item: widget, me uint32: width, me uint32: height) <- <%!%GGLOBAL.static_Global.thisApp.setWidgetSize(%1, %2, %3)%>
    me GUI_item: newScrollingWindow() <- <%!newScrollingView()%>
    me void: addToContainer(me GUI_container: container, me GUI_item: widget) <- <%!%G%1.addView(%2)%>
    me void: addToContainerAndExpand(me GUI_container: container, me GUI_item: widget) <- <%!%G%1.addView(%2)%>
    me void: addMenuBar(me GUI_menuBar: menubar) <- <%!%G%>
    me void: setCallback() <- <%!%G %>
    me void: fetchAreaToBeDrawn(me GUI_rect: area) <- <%!;%>
    me GUI_Frame: GUI_Frame(me string: label) <- <%!%Gnew LinearLayout(%1)%>
    me GUI_ctxt: newPDF_ctxt(me sting: filename, me double: inchesWide, me double: inchesHigh) <- <%!%Gnull%>
/-    me GUI_Frame: GUI_menuItemWithLabel(me string: label) <- <%!%Gnew MenuItem(%1)%>
/-    me GUI_Frame: GUI_menuWithLabel(me string: label) <- <%!%Gnew Menu(%1)%>

}

struct GUI_ctxt: inherits=Canvas{
    me void: reset() <- <%!GPath = new Path()%>
    me void: setRGBA(me double: red, me double: green, me double: blue, me double: alpha) <- <%!paint.setColor(Color.argb(%4, %1, %2, %3))%>
    me void: setRGB (me double: red, me double: green, me double: blue) <- <%!paint.setColor(Color.rgb(%1, %2, %3))%>
    me void: setColor(me cdColor: color) <- <%!%0.paint.setColor( Color.rgb(%1.red, %1.green, %1.blue))%>
    me void: setLineWidth(me double: width) <- <%!paint.setStrokeWidth(%1)%>
    me void: finishPDF() <- <%!%GSystem.out.print("PDF Functions not given.")%>
    me void: moveTo(me double: x, me double: y) <- <%!%0.cur_x=%1; %0.cur_y=%2; %0.GPath.moveTo((float)(%1), (float)(%2))%>
    me void: lineTo(me double: x, me double: y) <- <%!%0.cur_x=%1; %0.cur_y=%2; %0.GPath.lineTo((float)(%1), (float)(%2))%>
    me void: moveRel(me double: dx, me double: dy) <- <%!GPath.moveTo((float)(cr.cur_x+%1), (float)(cr.cur_y+%2))%>
    me void: lineRel(me double: dx, me double: dy) <- <%!GPath.lineTo((float)(cr.cur_x+%1), (float)(cr.cur_y+%2))%>
    me void: curveTo(me double: x1, me double: y1, me double: x2, me double: y2, me double: x3, me double: y3) <- <%!GPath.curve_to(cr, %1, %2, %3, %4, %5, %6)%>
    me void: curveRel(me double: dx1, me double: dy1, me double: dx2, me double: dy2, me double: dx3, me double: dy3) <- <%!rel_curve_to(cr, %1, %2, %3, %4, %5, %6)%>
    me void: closePath() <- <%!GPath.close()%>
    me void: rectangle() <- <%!%0.drawRect((float)%1, (float)%2, (float)%3, (float)%4, cr.paint)%>
    me void: paintNow() <- <%!paint.setStyle(Paint.Style.FILL);cr.GCanvas.drawPaint(cr.paint)%>
    me void: strokeNow() <- <%!GCanvas.drawPath(cr.GPath, cr.paint)%>
    me void: fillNow() <- <%!GCanvas.drawPath(cr.GPath, cr.paint)%>
    me void: strokeKeep() <- <%!draw(cr.GPath)%>
    me void: fillKeep() <- <%!paint.setStyle(Paint.Style.FILL_AND_STROKE)%>
    me void: renderFrame() <- <%!repaint()%>
    me void: setFillPattern() <- <%!cairo_set_source(%0, %1)%>
}

struct GUI_ctxt {
    me Paint: paint
    me Path: GPath
    me double: cur_x
    me double: cur_y
    me Canvas: GCanvas

    me none: GUI_ctxt () <- {
        Allocate(paint)
        Allocate(GPath)
    }

    me none: GUI_ctxt(me Canvas: canvas) <- {
        Allocate(paint)
        Allocate(GPath)
        GCanvas <- canvas
    }
}

struct guiFillPattern{
    /- use Shader and LinearGradient Need to create shader(colorStops) first then use in LinearGradient constructor
    their LinearGradient: guiFillPattern
    me void: init() <- <%!%0 = new LinearGradient(%1, %2, %3, %4)%>
    me void: AddColorStopRGBA(me double: offset, their cdColor: color, me int: alpha) <- <%!cairo_pattern_add_color_stop_rgba(%0, %1, (double)%2.red/265, (double)%2.green/256, (double)%2.blue/256, (double)%3/256)%>
    me void: AddColorStop(me double: offset, their cdColor: color) <- <%!cairo_pattern_add_color_stop_rgb(%0, %1, (double)%2.red/265, (double)%2.green/256, (double)%2.blue/256)%>
}

/-/////////////////////////////// TIME
struct tm{
    me Calendar: tm
}

struct timeStringer{
    me String: time12Hour() <- <%{
        Calendar timeRec = Calendar.getInstance();
        String AmPm = "am";
        int hours = timeRec.get(Calendar.HOUR);
        /-if (hours>=12) {hours = hours-12; AmPm="pm";}
        if (timeRec.get(Calendar.AM_PM)==Calendar.PM){AmPm="pm";}
        if (hours==0) {hours = 12;}
        String SH = (Integer.toString(hours)+":");
        int min = timeRec.get(Calendar.MINUTE);
        if (min<10){SH = SH+"0";}
        SH = SH + Integer.toString(min);
        SH=SH+":";
        int sec = timeRec.get(Calendar.SECOND);
        if (sec<10){SH = SH+"0";}
        SH = SH + Integer.toString(sec);
        SH=SH+AmPm;
        return(SH);
    } %>
}

/-///////////////////////////////  G L O B A L
struct GLOBAL: inherits=AppCompatActivity{
    me APP: thisApp
    me int: widgetHeight() <- <%!%G%1.getHeight()%>
    me int: widgetWidth() <- <%!%G%1.getWidth()%>
    me INK_Image[map string]: InkImgCache
    me long: ticksPerSec() <- <%!%G1000%>
    me SubMenu: parentMenu
    me AssetManager: assetManager
    me Android_eventDispatcher: EventDispatcher
    me Toolbar: toolbar

    /- TIME ROUTINES:

    /- //DRAWING ROUTINES:
    me deltaSize: renderText(me GUI_ctxt: cr, me string: text, me fontSpec: font, me double: x, me double: y) <- <%{
        cr.paint.setTextSize(font.size);
        cr.paint.setTypeface(Typeface.create(font.name, Typeface.NORMAL));
        cr.GCanvas.drawText(text, (float)x, (float)y, cr.paint);
    deltaSize size = getTextSize(cr, text, font);
    return(size);
    }%>

    me deltaSize: renderTextCentered(me GUI_ctxt: cr, me string: text, me fontSpec: font, me double: x, me double: y) <- <%{
        deltaSize size = getTextSize(cr, text, font);
    cr.paint.setTextSize(font.size);
        cr.paint.setTypeface(Typeface.create(font.name, Typeface.NORMAL));
    renderText(cr, text, font, x-size.width/2, y);
    return(size);
    }%>

    me deltaSize: renderTextRotate(me GUI_ctxt: cr, me string: text, me fontSpec: font, me double: x, me double: y, me double: degrees, me string: justify) <- <%{
    double radians    = degrees*(Math.PI/180.);
    deltaSize size    = getTextSize(cr, text, font);
    double hypotenuse = size.width;
    deltaSize tmpSize = new deltaSize(0,0);


    if(justify == "right"){x=x-hypotenuse;}
    else if(justify == "center"){x=x-hypotenuse/2;}
    cr.GCanvas.save();
    cr.GCanvas.rotate(45, (float)x, (float)y);
    renderText (cr, text, font, x, y);
    cr.GCanvas.restore();
    //TODO: calculate height and width more accurately
    tmpSize.width = size.width;
    tmpSize.height = size.width;
    return(tmpSize);
    }%>

    me void: rotate(me GUI_ctxt: cr, me double: x, me double: y, me int: degrees) <- <%{
    cr.GCanvas.save();
    cr.GCanvas.rotate(degrees, (float)x, (float)y);
    }%>

    me void: restore(me GUI_ctxt: cr) <- <%!%G%1.GCanvas.restore()%>

    me deltaSize: getTextSize(me GUI_ctxt: cr, me string: text, me fontSpec: font) <- <%{
    Rect bounds = new Rect();
    cr.paint.getTextBounds(text, 0, text.length(), bounds);
    cr.paint.setTypeface(Typeface.create(font.name, Typeface.NORMAL));
        cr.paint.setTextSize(font.size);
    deltaSize size = new deltaSize(0,0);
    size.height = bounds.height();
    size.width = bounds.width();
        return(size);
    } %>

    me void: roundedRectangle(me GUI_ctxt: cr, me double: x, me double: y, me double: w, me double: h, me double: r) <- <%{

    } %>

    me void: displayImage(me GUI_ctxt: cr, me string: filename, me double: x, me double: y, me double: scale) <- <%{
        boolean filter = false;
        try {
            assetManager = getAssets();
            InputStream is = assetManager.open(filename);
            Bitmap  bitmap = BitmapFactory.decodeStream(is);
            int width  = Math.round((float)scale * bitmap.getWidth());
            int height = Math.round((float)scale * bitmap.getHeight());
            Bitmap newBitmap = Bitmap.createScaledBitmap(bitmap, width,height, filter);
            cr.GCanvas.drawBitmap(newBitmap, (float)x, (float)y, cr.paint);
            Log.v("TAG", "display image: " + filename);
        } catch (IOException e) {Log.e("TAG", e.getMessage());}
   }%>

    me void: onCreate(me Bundle: savedInstanceState) <- <%{
        super.onCreate(savedInstanceState);
        GLOBAL.static_Global = this;
        GLOBAL.static_Global.thisApp = new APP();
        GLOBAL.static_Global.fragmentManager = getFragmentManager();
        GLOBAL.static_Global.initialize("");
        GLOBAL.static_Global.runDogCode();
        GLOBAL.static_Global.addToolbar();
    }%>

/- //GUI INTERFACE:
    me void: close_window() <- {
         /- gtk_main_quit()
    }

    me void: onStart() <- {
        super.onStart()
        /- The activity is about to become visible. Load state
        """ + runCode + """
    }

    me void: onResume() <- {
        super.onResume()
        /- The activity has become visible (it is now "resumed"). Restart animations, etc.
    }

    me void:  onPause() <- {
        super.onPause()
        /- Another activity is taking focus (this activity is about to be "paused"). Pause animations, etc.
    }

    me void:  onStop() <- {
        super.onStop()
        /- The activity is no longer visible (it is now "stopped")
        /- Make sure state is saved as we may quit soon.
    }

    me void:  onDestroy() <- {
        super.onDestroy()
        deinitialize()
    }

    me void: copyAssetToWritableFolder(me string: fromPath, me string: toPath)<- <%{
        try {
            InputStream inStream = GLOBAL.static_Global.getAssets().open(fromPath);
            OutputStream outStream = GLOBAL.static_Global.openFileOutput(toPath, Context.MODE_PRIVATE);
            byte[] buf = new byte[1024];
            int len;
            while ((len = inStream.read(buf)) > 0) {
                outStream.write(buf, 0, len);
            }
            outStream.close();
            inStream.close();
        } catch (Exception e) {
            System.out.print(e.getMessage());
        }
    }%>

    me bool: drawAppArea_cb(their CanvasView: canvas, their GUI_ctxt: cr) <- <%{
        GLOBAL.static_Global.thisApp.primary_GUI_Mgr.dashboardWidget.draw(cr);
        return(true);
    }%>

    /- //MENU ROUTINES:
    me boolean: onCreateOptionsMenu(me Menu: androidMenu) <- <%{
        super.onCreateOptionsMenu(androidMenu);
        GLOBAL.static_Global.thisApp.createAppMenu(GLOBAL.static_Global.thisApp.gui.frame);
        GLOBAL.static_Global.addAndroidMenu(androidMenu);
        return true;
    }%>

    me void: addAndroidMenu(me Menu: androidMenu) <- <%{
        int thisSubMenu_key=0;
        for(int thisSubMenuIdx=0; thisSubMenuIdx != GLOBAL.static_Global.thisApp.menubar.items.size(); thisSubMenuIdx += 1){
                ourSubMenu thisSubMenu = GLOBAL.static_Global.thisApp.menubar.items.get(thisSubMenuIdx);
            if (thisSubMenu.items.size() == 0) {
                androidMenu.add(thisSubMenu.name);
            }
            else {
                parentMenu = androidMenu.addSubMenu(thisSubMenu.name);      // working on getting this line to generate right code
                int item_key=0;
                for(int itemIdx=0; itemIdx != thisSubMenu.items.size(); itemIdx += 1){
                                ourSubMenu item = thisSubMenu.items.get(itemIdx);
                    parentMenu.add(item.name);
                    ++item_key;
                }
            }
            ++thisSubMenu_key;
        }
     }%>

    me void: addToolbar() <- <%{
        GLOBAL.static_Global.toolbar = new Toolbar(GLOBAL.static_Global);
        LinearLayout.LayoutParams layoutParams = new LinearLayout.LayoutParams(LayoutParams.MATCH_PARENT, 80);
        GLOBAL.static_Global.toolbar.setLayoutParams(layoutParams);
        GLOBAL.static_Global.toolbar.setBackgroundColor(Color.rgb(100, 149, 237));
        GLOBAL.static_Global.toolbar.setTitle(filename);
        GLOBAL.static_Global.toolbar.setVisibility(View.VISIBLE);
        setSupportActionBar(GLOBAL.static_Global.toolbar);
        GLOBAL.static_Global.thisApp.gui.frame.addView(GLOBAL.static_Global.toolbar, 0);
    }%>

    me void: showWidget(me GUI_item: widget) <-  <%!%1.setVisible(true)%>
    me void: markDirtyArea(me GUI_item: widget, me int32: x, me int32: y, me int32: width, me int32: height) <- <%!%G;%>
    me GUI_item: newCanvas() <- <%!gtk_drawing_area_new()%>
    me void: setWidgetSize(me GUI_item: widget, me uint32: width, me uint32: height) <- <%!gtk_widget_set_size_request(%1, %2, %3)%>
}

struct APP: inherits=LinearLayout{
    me LinearLayout: thisFrame
    me GUI: gui
    me ourSubMenu: menubar <- ("menubar")

    me none: APP() <- <%{super(GLOBAL.static_Global);}%>

    me void: setWidgetSize(me CanvasView: myCanvas, me int: width, me int: height) <- <%{
        myCanvas.setLayoutParams(new LayoutParams(5000, 5000));
    }%>

}

struct ourSubMenu{
    me string: name
    me ourSubMenu[list]: items
    me none: ourSubMenu(me string: menuLabel) <- {name <- menuLabel}
    me none: ourSubMenu() <- {Allocate(items)}
}

struct dashboard{me bool: isTouchingMe()<- <%!%GisTouchingMe(event.getX(), event.getY())%>}
