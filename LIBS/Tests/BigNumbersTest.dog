// BigNumbersTest.dog
TestsToRun = `
    intTest/parse1
    fracTest/parse1
    fracTest/asInt
    flexTest/parseDec
    flexTest/parseDec2
    flexTest/parseDec3
    flexTest/parseDec4
    flexMath/add1
    flexMath/add2
    flexMath/minus1
    flexMath/minus2
    flexMath/multi1
    flexMath/multi2
    flexMath/multi3
    flexMath/div1
    flexMath/div2
    flexMath/div3
    flexMath/div4
    flexMath/div5
    flexMath/div6
    flexMath/div7
    flexMath/div8
    flexMath/div9
    flexMath/div10
    flexMath/div11
    flexMath/div12
    flexMath/div13
    flexMath/div14
`
runCode=`
    logMgr.init(OFile)
    log("BigNumbers tests started")
    RUN_SELECTED_TESTS()
`
FileName = "BigNumbersTest"

#define INT_TEST  (NAME, IN1, IN2, OUT) <%void: DESLASH(NAME)()<-{intTest(IN1, IN2, OUT)}%>
#define FRAC_TEST (NAME, IN1, IN2, OUT) <%void: DESLASH(NAME)()<-{fracTest(IN1, IN2, OUT)}%>
#define FLEX_TEST (NAME, IN1, IN2, OUT) <%void: DESLASH(NAME)()<-{flexTest(IN1, IN2, OUT)}%>
#define FLEX_MATH (NAME, IN1, IN2, OPR, OUT) <%void: DESLASH(NAME)()<-{flexMath(IN1, IN2, OPR, OUT)}%>

struct GLOBAL {
    INT_TEST(intTest/parse1,      "1234567890123456789012345678901234567890",  "",  "1234567890123456789012345678901234567890")
    FRAC_TEST(fracTest/parse1,    "4/8",  "",  "1/2")
    FRAC_TEST(fracTest/asInt,     "5/1",  "",  "5")
    FLEX_TEST(flexTest/parseDec,  "78945.6123",  "",  "78945.6123")
    FLEX_TEST(flexTest/parseDec2, "78945.0",  "",  "78945")
    FLEX_TEST(flexTest/parseDec3, "5.1",  "",  "5.1")
    FLEX_TEST(flexTest/parseDec4, "14.85",  "",  "14.85")
    FLEX_MATH(flexMath/add1,      "22.10",  "23.01", "+",  "45.11")
    FLEX_MATH(flexMath/add2,      "22.10",  "23.90", "+",  "46")
    FLEX_MATH(flexMath/minus1,    "30.00",  "20.00", "-",  "10")
    FLEX_MATH(flexMath/minus2,    "30.56",  "20.32", "-",  "10.24")
    FLEX_MATH(flexMath/multi1,    "2.0",    "3.0",   "*",  "6")
    FLEX_MATH(flexMath/multi2,    "3.3",    "5.5",   "*",  "18.15")
    FLEX_MATH(flexMath/multi3,    "3.3",    "0",   "*",  "0")
    FLEX_MATH(flexMath/div1,      "6.0",    "2.0",   "/",  "3")
    FLEX_MATH(flexMath/div2,      "14.76",  "1.2",   "/",  "12.3")
    FLEX_MATH(flexMath/div3,      "38.875", "3.5",   "/",  "11.1071428571")
    FLEX_MATH(flexMath/div4,      "1234567", "1",   "/",  "1234567")
    FLEX_MATH(flexMath/div5,      "1234567", "10",   "/",  "123456.7")
    FLEX_MATH(flexMath/div6,      "1234567", "100",   "/",  "12345.67")
    FLEX_MATH(flexMath/div7,      "1234567", "1000",   "/",  "1234.567")
    FLEX_MATH(flexMath/div8,      "1234567", "10000",   "/",  "123.4567")
    FLEX_MATH(flexMath/div9,      "1234567", "100000",   "/",  "12.34567")
    FLEX_MATH(flexMath/div10,      "1234567", "1000000",   "/",  "1.234567")
    FLEX_MATH(flexMath/div11,      "1234567", "10000000",   "/",  "0.1234567")
    FLEX_MATH(flexMath/div12,      "1234567", "100000000",   "/",  "0.01234567")
    FLEX_MATH(flexMath/div13,      "1234567", "1000000000",   "/",  "0.001234567")
    FLEX_MATH(flexMath/div14,      "10000", "1",   "/",  "10000")

    me void: intTest(me string: in1, me string: in2, me string: expected) <- {
        me BigInt: A; A.decNumToBigInt(in1)
        me string: Astr <- toString(A)
        REQUIRE(Astr==expected)
    }

    me void: fracTest(me string: in1, me string: in2, me string: expected) <- {
        me BigFrac: A; A.decNumToBigFrac(in1)
        A.normalize()
        me string: Astr <- toString(A)
        REQUIRE(Astr==expected)
    }

    me void: flexTest(me string: in1, me string: in2, me string: expected) <- {
        me FlexNum: A; A.fromString(in1)
        me string: Astr <- A.stringify()
        REQUIRE(Astr==expected)
    }

    me void: flexMath(me string: in1, me string: in2, me string: mathOpr, me string: expected) <- {
        me FlexNum: A; A.fromString(in1)
        me FlexNum: B; B.fromString(in2)
        me FlexNum: C
        if(mathOpr=="+"){C <- A + B}
        else if(mathOpr=="-"){C <- A - B}
        else if(mathOpr=="*"){C <- A * B}
        else if(mathOpr=="/"){C <- A / B}
        else{}

        me string: Cstr <- C.stringify()
        REQUIRE(Cstr==expected)
    }
}
