/- CodeDog GUI toolikt
requirements = [
    [require, GUI_ToolKit_implementation]
]

/- Set up a complete application: fonts, colors, a window/frame with a menu, toolbar, app area and optionally a statusbar.
/- Boilerplate details such as resizing windows, etc are taken care of in the best way for each platform.

struct cdColor{
    me uint: red
    me uint: green
    me uint: blue
}

struct ColorScheme{}
struct FontSpec{}
struct FontScheme{}

struct deltaSize{me int: width    me int: height}
struct GUI_rect{me double: x1 me double: y1 me double: x2 me double: y2}
struct GUI_offset{}
struct GUI_ctxt{}


struct GUI_item{}
struct GUI_menuBar{}
struct GUI_menu{}
struct GUI_menuItem{}
struct GUI_canvas{}
struct GUI_container{}
struct GUI_Frame{}
struct GUI_ScrollingWindow{}
struct GUI_callback{}
struct GUI_MotionEvent{}
struct INK_Image{}

struct GUI_button{}

/- GUI Widgets
struct boolWidget{}
struct floatWidget{}
struct rangeWidget{}
struct numRangeWidget {}
struct CGContext {}
struct CGPoint {}

struct intWidget{}
struct stringWidget{}
struct enumWidget{}
struct timeWidget{}
struct dateWidget{}
struct wizardWidget{
    their GUI_Frame:  box
    their GUI_Frame:  ZStack
    their GUI_Frame:  buttonBox /-Hstack
    their GUI_button: backBtn
    their GUI_button: nextBtn
    me int:	      activeScreenIdx
    me string[list]:  children

    their GUI_Frame: makeWizardWidget(me string: name) <- {
	activeScreenIdx <- 0
	box          	<- makeYStack()
	ZStack      	<- makeStoryBoardWidget('')
	buttonBox 	<- makeXStack()
	backBtn   	<- makeButtonWidget("Back")
	nextBtn   	<- makeButtonWidget("Next")
	GUI.setCallback2(backBtn, "clicked", ClickBack_CB, self)
	GUI.setCallback2(nextBtn, "clicked", ClickNext_CB, self)
	addToContainer(box, ZStack)
	addToContainer(buttonBox, backBtn)
	addToContainer(buttonBox, nextBtn)
	addToContainer(box, buttonBox)
	return(box)
    }
    void: clickNext() <-{
	activeScreenIdx <- activeScreenIdx+1
	me int: size <- children.size()
	if (activeScreenIdx > size-1){activeScreenIdx <-size-1}
	setActiveChild(activeScreenIdx)
    }
    void: clickBack() <-{
	activeScreenIdx <- activeScreenIdx-1
	if (activeScreenIdx < 0) {activeScreenIdx <-0}
	setActiveChild(activeScreenIdx)
    }
    void: setActiveChild(me int: N) <- {
	me string: childStr <- children[N]
	setZStackActive(ZStack, childStr)
	if(N==0){hideWidget(backBtn)}else{showWidget(backBtn)}
	if(N==children.size()-1){hideWidget(nextBtn)}else{showWidget(nextBtn)}
    }
}
struct matterTerm{
    me string[list]: matterTypes <- ["a", "b"]
    me string:	     matter	 <- ""
    me double: 	     term	 <- 0
    me string:       units	 <- ""
}
struct MatterTermWidget{
    their GUI_Frame:  	box
    their GUI_Label:	label
    their GUI_ComboBox:	matterBox
    their GUI_SpinBox:  termBox
    their GUI_Label:	unitsBox
    
    our matterTerm:: 	data 
    me double: initialValue  <- 0
    me double: minValue      <- 0
    me double: maxValue      <- 1000
    me int:    decimalPlaces <- 0
    
    their GUI_Frame: makeMatterTermWidget(me string: name, our matterTerm: dataInit) <- {
	/- DATA
	data <- dataInit
	me string: units <- data.units
	/- MAKE WIDGETS
	box          	 <- makeXStack()
	label		 <- makeLabelWidget2(name)
	matterBox	 <- makeComboBox()
	termBox		 <- makeSpinBox(initialValue, minValue, maxValue, decimalPlaces)
	unitsBox	 <- makeLabelWidget2(units)
	/- FILL WIDGETS
	me int: count <-0
	withEach matterType in data.matterTypes{
	    matterBox.appendComboBox(toString(count),matterType)
	    count <- count +1
	}
	/- ADD WIDGETS
	addToContainer(box, label)
	addToContainer(box, matterBox)
	addToContainer(box, termBox)
	addToContainer(box, unitsBox)
	return(box)
    }
    our matterTerm: getValue() <- {
	our matterTerm: retVal
	Allocate(retVal)
	retVal.matterTypes <- data.matterTypes
	retVal.matter      <- matterBox.comboBoxGetActive()
	retVal.term	   <- termBox.spinGetValue()
	retVal.units	   <- data.units
	return(retVal)
    }
    void: setValue(our matterTerm: setVal) <- {
	data.matter        <- setVal.matter
	data.term	   <- setVal.term
	data.units	   <- setVal.units
    }
}
struct GUI{
    me void: showWidget(me GUI_item: widget)
    me GUI_item: newCanvas()
    me void: setWidgetSize(me GUI_item: widget, me uint32: width, me uint32: height)
/-    me GUI_item: newScrollingWindow()  /-
    me void: addToContainer(me GUI_container: container, me GUI_item: widget)
    me void: addToContainerAndExpand(me GUI_container: container, me GUI_item: widget)
    me void: addMenuBar(me GUI_menuBar: menubar)
    me void: create_MenuItem(me GUI_menu: ParentMenu, me string: label)
    me void: create_TopSubMenu(me GUI_menuBar: ParentMenu, me string: label)
    me void: create_SubMenu(me GUI_menu: ParentMenu, me string: label)
    me void: setCallback()
}

struct fontSpec{
    me string: name
    me int: size
    me mode[pp, dp, sp]: pixelMode

    none: fontSpec(me string: initName, me string: initSize) <- {
        name      <- initName
        size      <- stoi(initSize)
    }
}

struct Styler{
    #include LIBS/x11ColorsRGB.txt
}

struct GLOBAL{
    me boolWidget:      makeBoolWidget(me string: label)
    me floatWidget:     makeFloatWidget(me string: label)
    me numRangeWidget:  makeNumRangeWidget(me string: label)
    me rangeWidget:     makeRangeWidget(me string: label)
    me timeWidget:      makeTimeWidget(me string: label)
    me dateWidget:      makeDateWidget(me string: label)
}
struct GUI_ctxt {
    /-me void: fetchAreaToBeDrawn(me GUI_rect: area)
    me void: reset()
    me void: setRGBA(me double: red, me double: green, me double: blue, me double: alpha)
    me void: setRGB (me double: red, me double: green, me double: blue)
    me void: setColor(me cdColor: color)
    me void: setLineWidth(me double: width)
    me void: finishPDF()
    me void: setScale()
    me void: moveTo(me double: x, me double: y)
    me void: lineTo(me double: x, me double: y)
    me void: moveRel(me double: dx, me double: dy)
    me void: lineRel(me double: dx, me double: dy)
    me void: curveTo(me double: x1, me double: y1, me double: x2, me double: y2, me double: x3, me double: y3)
    me void: curveRel(me double: dx1, me double: dy1, me double: dx2, me double: dy2, me double: dx3, me double: dy3)
    me void: closePath()
    me void: rectangle()
    me void: paintNow()
    me void: strokeNow()
    me void: fillNow()
    me void: strokeKeep()
    me void: fillKeep()
    me void: setFillPattern()
    me void: circle(me int: centerX, me int: centerY, me int: radius)
}


/------------------------ Widgets and events

struct GUI_PointerEvent{}
struct GUI_ButtonEvent{}
struct GUI_KeyboardEvent{}
struct GUI_WindowEvent{}
struct GUI_DataEvent{}
struct GUI_TimeEvent{}
struct GUI_UserEvent{}
struct GUI_DrawEvent{}
struct GUI_scalar{}


/- decor(ations) are like light weight widgets. They have only draw().

struct decor{
    void: draw(me GUI_ctxt: cr) <- {}
}

struct arrow: inherits=decor{
    me double: startX
    me double: startY
    me double: endX
    me double: endY

    me void: draw(me GUI_ctxt: cr) <- {
        me double: tipLength <- 10
        me double: tipAngle <- 0.35

        me double: angle <- atan2(endY - startY, endX - startX) + 3.14159265359

        me double: x1 <- endX + tipLength * cos(angle - tipAngle)
        me double: y1 <- endY + tipLength * sin(angle - tipAngle)
        me double: x2 <- endX + tipLength * cos(angle + tipAngle)
        me double: y2 <- endY + tipLength * sin(angle + tipAngle)

        cr.moveTo(startX, startY)
        cr.lineTo(endX, endY)
        cr.lineTo(x1, y1)
        cr.lineTo(x2, y2)
        cr.lineTo(endX, endY)
        cr.closePath()
        cr.fillKeep()
        cr.strokeNow()
    }

    none: arrow(me int: StartX, me int: StartY, me int: EndX, me int: EndY) <- {
        startX <- StartX
        startY <- StartY
        endX   <- EndX
        endY   <- EndY
    }
}

struct widget{
    me int: posX    /- x position of top left corner
    me int: posY    /- y position of top left corner
    me int: width   /- width of widget
    me int: height  /- height of widget
    me int: scale
    bool: isHidden

    void: draw(me GUI_ctxt: cr) <- {}
    me bool: handleAllClicks(their GUI_ButtonEvent: event) <- {return(false)}
    me bool: primaryClick(their GUI_ButtonEvent: event) <- {return(false)}
    me bool: primaryDblClick(their GUI_ButtonEvent: event) <- {return(false)}
    me bool: primaryDn(their GUI_ButtonEvent: event) <- {return(false)}
    me bool: primaryUp(their GUI_ButtonEvent: event) <- {return(false)}
    me bool: secondaryClick(their GUI_ButtonEvent: event) <- {return(false)}
    me bool: secondaryDblClick(their GUI_ButtonEvent: event) <- {return(false)}
    me bool: secondaryDn(their GUI_ButtonEvent: event) <- {return(false)}
    me bool: secondaryUp(their GUI_ButtonEvent: event) <- {return(false)}
    me bool: mouseMoved(their GUI_MotionEvent: event) <- {return(false)}
    me bool: mouseDragged(their GUI_MotionEvent: event) <- {return(false)}
    me bool: mouseEnter(their GUI_MotionEvent: event) <- {return(false)}
    me bool: mouseExit(their GUI_MotionEvent: event) <- {return(false)}
    me bool: mouseWheel(their GUI_MotionEvent: event) <- {return(false)}
    me bool: fingerSqueeze(their GUI_PointerEvent: event) <- {return(false)}

    me bool: keyTyped(their GUI_KeyboardEvent: event) <- {return(false)}
    me bool: keyDown(their GUI_KeyboardEvent: event) <- {return(false)}
    me bool: keyUp(their GUI_KeyboardEvent: event) <- {return(false)}

    me bool: windowChange(their GUI_WindowEvent: event) <- {return(false)}
    me bool: dataUpdated(their GUI_DataEvent: event) <- {return(false)}         /- This widget's data has been updated
    me bool: timerTick(their GUI_TimeEvent: event) <- {return(false)}           /- Timer to change data
    me bool: tweenTick(their GUI_TimeEvent: event) <- {return(false)}           /- Timer for state-change animation frame
    me bool: userEvent(their GUI_UserEvent: event) <- {return(false)}
    me bool: focused(their GUI_PointerEvent: event) <- {return(false)}
    me bool: unfocused(their GUI_PointerEvent: event) <- {return(false)}

    bool: isTouchingMe(me GUI_scalar: x, me GUI_scalar: y) <- {
        return ((x >= posX) and (x < posX + width) and (y >= posY) and (y < posY + height))
    }

    void: initialize(me int: PosX, me int: PosY, me int: Width, me int: Height, me int: Scale, me int: Alpha ) <- {
        posX   <- PosX
        posY   <- PosY
        width  <- Width
        height <- Height
        scale  <- Scale
    }
}


/-///////////////////////////////  HIGHER LEVEL WIDGETS

struct ListWidgetManager{
    me ListManagerBox: ListEdBox
    their GUI_Frame[their list]: rows

    /- Override all these for each new list editing widget
    their listWidget: makeListViewWidget()  <- {return(NULL)}
    their GUI_item: makeListHeader()        <- {return(NULL)}
    void: updateViewableWidget()            <- {}
    their GUI_item: makeEditableWidget()    <- {return(NULL)}
    void: updateEditableWidget(me int: N)   <- {}
    void: updateCrntFromEdited(me int: N)   <- {}
    void: allocateNewCurrentItem()          <- {}
    me int: pushCrntToList(me int: N)       <- {return(0)}
    me int: deleteNthItem(me int: N)        <- {return(0)}
    void: deleteNthRow(me int: N)           <- {}
    void: copyCrntBackToList(me int: N)     <- {}
    void: copyCrntBackToListView(me int: N) <- {}
    void: setCurrentItem(me int: idx)       <- {}
    me int: getListLength()                 <- {return(0)}
    their GUI_Frame: getNthRow(me int: N)   <- {return(NULL)}
    void: handleAdd()    <- {}
    void: handleDelete() <- {}
    void: handleEdit()   <- {}


    /- Also, add their GUI_item: initWidget(<listType>)
}

/-//////////////////////////////////// MISC WIDGETS
struct DateWidget{
    their GUI_item:     box
    their intWidget:    year
    their GUI_ComboBox: month
    their GUI_ComboBox: day
    me DateValue:       data
    me string[list]:    months <- ['Jan', 'Feb', 'March', 'April', 'May', 'June', 'July', 'Aug', 'Sept', 'Oct', 'Nov', 'Dec']

    their GUI_item: initCrnt(me string: label) <- {
    me timeValue: crntTime <- getCurrentTimeStamp()
    box <- initialize(label, crntTime)
    return(box)
    }

    their GUI_item: initialize(me string: label, me timeValue: defaultTime) <- {
        Allocate(year)
        year.box <- year.makeIntWidget("year")
        /- Fill the year combo box

        month <- makeComboBox()
        /- Fill the month combo box
        me int: count <-0
        withEach monthName in months{
            month.appendComboBox(toString(count),monthName)
            count <- count +1
        }

        day <- makeComboBox()
        /- Fill the day combo box
        withEach i in RANGE(1..31){
            day.appendComboBox(toString(i),toString(i))
        }

        /- set defaults

        box <- makeXStack()
        addToContainer(box, year.box)
        addToContainer(box, month)
        addToContainer(box, day)
        return(box)
    }
    me DateValue: getValue() <- {
        me DateValue: retVal
        retVal.month <- month.comboBoxGetActive()
        retVal.day   <- day.comboBoxGetActive()
        return(retVal)
    }
    void: setValue(me DateValue: setDate) <- {}
}

struct TimeWidget{
    their GUI_item:     box
    their GUI_ComboBox: hour
    their GUI_ComboBox: minute
    me timeOfDay:       data

    their GUI_item: initCrnt(me string: label) <- {
        me timeValue: crntTime <- getCurrentTimeStamp()
        box <- initialize(crntTime)
        return(box)
    }
    their GUI_item: initialize(me timeValue: defaultTime) <- {
        hour <- makeComboBox()
        /- Fill the hour combo box
        withEach i in RANGE(1..13){
            hour.appendComboBox(toString(i),toString(i))
        }

        minute <- makeComboBox()
        /- Fill the minute combo box
        withEach i in RANGE(1..25){
            minute.appendComboBox(toString(i),toString(i))
        }
        /- set defaults

        box <- makeXStack()
        addToContainer(box, hour)
        addToContainer(box, minute)
        return(box)
    }
    me timeOfDay: getValue() <- {
        me timeOfDay: retVal
        retVal.hour <- hour.comboBoxGetActive()
        retVal.minute   <- minute.comboBoxGetActive()
        return(retVal)
    }
    void: setValue() <- {}
}

struct DateTimeWidget{
    their GUI_item:   box
    their DateWidget: dateWidget
    their TimeWidget: timeWidget
    me DateTime:      data

    their GUI_item: initCrnt(me string: label) <- {
        me timeValue: crntTime <- getCurrentTimeStamp()
        box <- initialize(crntTime)
        return(box)
    }
    their GUI_item: initialize(me timeValue: defaultTime) <- {
        Allocate(dateWidget)
	their GUI_Frame: dateBox <- makeYStack()
        dateBox <- dateWidget.initCrnt('')
        /- Fill the dateWidget

        Allocate(timeWidget)
	their GUI_Frame: timeBox <- makeYStack()
        timeBox <- timeWidget.initCrnt('')

        /- Fill the timeWidget

        /- set defaults

        box <- makeXStack()  
        addToContainer(box, dateBox)
        addToContainer(box, timeBox)
        return(box)
    }
    me DateTime: getValue() <- {
        me DateTime: retVal
        retVal.date <- dateWidget.getValue()
        retVal.time <- timeWidget.getValue()
        return(retVal)
    }
    void: setValue() <- {}
}
