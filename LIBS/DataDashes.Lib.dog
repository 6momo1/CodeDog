/- CodeDog graph dash for DashBoard

featuresNeeded = [Dashboard]


struct graphScale: inherits=dash{
    me bool:   isVisible
    me int:    ticksPerStep
    me bool:   textSlant
    me bool:   isDate

    me double: step
    me double: tickStep
    me double: yOrig
    me double: xOrig
    me double: lowVal
    me double: hiVal
    me double: span
    me int:    tickOffset
    const int: tickPadding  <- 3
    const int: titlePadding <- 7

    void: initScale(me string: titleStr, me bool: IsVisible, me int: TicksPerStep,  me bool: TextSlant, me bool: IsDate) <- {
	title        <- titleStr
	isVisible    <- IsVisible
	ticksPerStep <- TicksPerStep
	textSlant    <- TextSlant
	isDate	     <- IsDate
    }

    void: setScale(me double: Span, me double: LowVal, me double: HiVal, me double: Step, me double: XOrig, me double: YOrig, me int: TickOffset) <- {
	span         <- Span
	lowVal       <- LowVal
	hiVal        <- HiVal
	step         <- Step
	xOrig        <- XOrig
	yOrig        <- YOrig
	tickOffset   <- TickOffset
    }
}

struct verticalScale: inherits=graphScale{
    void: draw(me GUI_ctxt: cr) <- {
    me double: XPoint  <- 0
    me double: YPoint  <- 0
    me deltaSize: size
    me int: labelWidth <- 0
    me string: label
    me string: justify <- ""
    
    /- AXIS VALUE LABELS
    withEach val in RANGE(0.. (hiVal-lowVal)/step+1){
	label <- dblToString(val*step+lowVal, 2)
	size <- getTextSize(cr, label, styler.fontSmall)
	YPoint <- yOrig-(val*step*span/(hiVal-lowVal)-size.height/3)
	if(textSlant){
	    if (tickOffset > 0){XPoint <- xOrig+tickOffset+3*tickPadding+size.height/2}
	    else               {XPoint <- xOrig+tickOffset-3*tickPadding; justify <- "right"}
	    size <- renderTextRotate(cr, label, styler.fontSmall, XPoint, YPoint, -45, justify)
	}else{
	    if (tickOffset > 0){XPoint <- xOrig+tickOffset+3*tickPadding}
	    else               {XPoint <- xOrig+tickOffset-3*tickPadding-size.width}
	    renderText(cr, label, styler.fontSmall, XPoint, YPoint)
	}
	if(size.width > labelWidth){labelWidth <- size.width}
    }

    /- AXIS TICK MARKS
    if(ticksPerStep>0){
        tickStep <- step/ticksPerStep
        cr.setLineWidth(1)
        withEach val in RANGE(0.. (hiVal-lowVal)/tickStep+1){
	    if (tickOffset > 0){XPoint <- xOrig+3}
	    else               {XPoint <- xOrig-3}
	    YPoint <- yOrig - val*tickStep*span/(hiVal-lowVal)
	    cr.moveTo(XPoint, YPoint)
	    cr.lineTo(XPoint+tickOffset, YPoint)
        }
        cr.strokeNow()
    }

    /- SCALE TITLE
    me int: degree
    if (tickOffset > 0){XPoint <- xOrig+labelWidth+tickOffset+3*tickPadding+titlePadding; degree <- 90}
    else               {XPoint <- xOrig-labelWidth+tickOffset-3*tickPadding-titlePadding; degree <- -90}
    rotate(cr, XPoint, YPoint+span/2, degree)
    renderTextCentered(cr, title, styler.fontDefault, XPoint, YPoint+span/2)
    restore(cr)
    cr.strokeNow()
    }
}

struct horizontalScale: inherits=graphScale{
    void: draw(me GUI_ctxt: cr) <- {
    me double: XPoint <- 0
    me double: YPoint <- 0
    me deltaSize: size
    me int: labelHeight <- 0
    me int: tickHeight  <- 0
    me string: label
    me string: justify <- ""
    me sysLocale: loc
    me UErrorCode: status <- U_ZERO_ERROR
    
    /- AXIS VALUE LABELS
    withEach val in RANGE(0.. (hiVal-lowVal)/step+1){
	if(isDate){
	    loc <- unicodeMgr.SetLocale("pt")
	    label <- unicodeMgr.dateToIntlString(val*step+lowVal, hiVal-lowVal, loc, status)
	}
	else{label <- dblToString(val*step+lowVal, 2)}
	size <- getTextSize(cr, title, styler.fontSmall)
	if (tickOffset > 0){tickHeight  <- tickOffset+3*tickPadding; YPoint <- yOrig+tickHeight+size.height}
	else               {tickHeight  <- tickOffset-3*tickPadding; YPoint <- yOrig+tickHeight}
	if(textSlant){
	    if (tickOffset > 0){
		XPoint <- xOrig+val*step*span/(hiVal-lowVal)-5
		justify <- "right"
		YPoint <- YPoint - 10
	    }
	    else{XPoint <- xOrig+val*step*span/(hiVal-lowVal)}
	    size <- renderTextRotate(cr, label, styler.fontSmall, XPoint, YPoint, -45, justify)
	}else{
	    XPoint <- xOrig+val*step*span/(hiVal-lowVal)-5
	    size <- renderText(cr, label, styler.fontSmall, XPoint, YPoint)
	}
	if(size.height > labelHeight){labelHeight <- size.height}
	cr.strokeNow()
    }

    /- AXIS TICK MARKS
    if(ticksPerStep>0){
        tickStep <- step/ticksPerStep
        cr.setLineWidth(1)
        withEach val in RANGE(0.. (hiVal-lowVal)/tickStep+1){
	    if (tickOffset > 0){YPoint <- yOrig+tickPadding}
	    else               {YPoint <- yOrig-tickPadding}
	    XPoint <- xOrig + val*tickStep*span/(hiVal-lowVal)
	    cr.moveTo(XPoint, YPoint)
	    cr.lineTo(XPoint, YPoint+tickOffset)
        }
        cr.strokeNow()
    }

    /- SCALE TITLE
    size <- getTextSize(cr, title, styler.fontDefault)
    if(tickOffset > 0){YPoint <- yOrig+tickHeight+labelHeight+titlePadding+size.height}
    else               {YPoint <- yOrig+tickHeight-labelHeight-titlePadding}
    renderText(cr, title, styler.fontDefault, xOrig+span/2, YPoint)
    cr.strokeNow()
    }
}


struct GraphDataStream {
    me string: title
    me int64[me map timeValue]: dataMap
    me cdColor: lineColor
    me cdColor: fillColor
}

struct graph: inherits=dash{
    our GraphDataStream[me list]: dataStreams
    me int: highVal
    me int: lowVal
    me double: step
    me double: scnUnitSpan <- 100 /- Height of screen represents 100 units

    me verticalScale:   leftScale
    me horizontalScale: bottomScale
    me verticalScale:   rightScale
    me horizontalScale: topScale
    
    me mode[sAutomatic, sManual]:scrollMode
    me timeValue: timeInterval
    me timeValue: crntRightSide
    
    me zoomWidget: zoomToggle
    me int: zoomLevel
    me double[list]: zoomTable <- [1.0*1000*60*60*24, 3.0*1000*60*60*24, 7.0*1000*60*60*24, 14.0*1000*60*60*24, 30.0*1000*60*60*24, 60.0*1000*60*60*24]
    me string[list]: labelTable <- ["One Day", "Three Days", "One Week", "Two Weeks", "One Month", "Two Months"]

    void: update() <- {}

    void: setPos(me int:x, me int:y, me int: extCursor) <- {
	posIsSet <- true
        extC     <- extCursor
        extX     <- posX+width
        extY     <- posY+height
    }

    void: draw(me GUI_ctxt: cr) <- {
        me double: scnTimeSpan       <- timeInterval  /- Display 20 seconds of data on the screen
        me double: scnPixSpanW       <- width
        me double: pixelsPerMillisec <- scnPixSpanW / scnTimeSpan
        me double: scnUnitSpan <- 100 /- Height of screen represents 100 units
        me double: scnPixSpanH       <- height
        me double: pixelsPerUnit     <- scnPixSpanH / scnUnitSpan
        me timeValue: rightGraphTime
	me timeValue: leftGraphTime
	me bool: firstTime
        me double: XPoint
        me double: YPoint
        me double: YOrig

        withEach dataStream in dataStreams{
            /-cr.setColor(dataStream.lineColor)
            cr.setLineWidth(2)
	    if (crntRightSide > getCurrentTimeStamp()) {scrollMode <- sAutomatic}
	    if (scrollMode==sAutomatic) {crntRightSide  <- getCurrentTimeStamp()}
	    rightGraphTime <- crntRightSide
	    leftGraphTime  <- crntRightSide - timeInterval
            firstTime      <- true
            XPoint         <- 0
            YPoint         <- 0
            YOrig          <- posY + height

            withEach point in dataStream.dataMap from leftGraphTime to rightGraphTime {
                XPoint <- (point_key-leftGraphTime)*pixelsPerMillisec + posX
                YPoint <- point/pixelsPerUnit
                if(firstTime){cr.moveTo(XPoint, YOrig)  firstTime<-false}
                else {cr.lineTo(XPoint, YOrig - YPoint)}
            }
            cr.lineTo(XPoint, YOrig)

            /-//// GRADIENT
            /*their guiFillPattern: linGrad
            linGrad.init(2, 1, 2, YOrig)
            linGrad.AddColorStopRGBA(0, dataStream.lineColor, 255)
            linGrad.AddColorStopRGBA(0.4, dataStream.lineColor, 40)
            linGrad.AddColorStopRGBA(1.0, styler.bkGndColor, 255)
            cr.setFillPattern(linGrad)
            cr.fillKeep()*/
            cr.setColor(dataStream.lineColor)
            cr.strokeNow()
        }

        /-//// TEXT
        cr.setColor(styler.highlight2Color)
        if(leftScale.isVisible){
            leftScale.setScale(height, 10.0, 100.0, 10.0, posX, YOrig, -4)
            leftScale.draw(cr)
        }
        if(bottomScale.isVisible){
            bottomScale.setScale(width, leftGraphTime, rightGraphTime, (rightGraphTime-leftGraphTime)/5, posX, YOrig, 4)
            bottomScale.draw(cr)
        }
        if(rightScale.isVisible){
            rightScale.setScale(height, 0.0, 10000000.0, 1000000.0, posX+width, YOrig, 4)
            rightScale.draw(cr)
        }
        if(topScale.isVisible){
            topScale.setScale(width, 0.0, 100.0, 10.0, posX, posY, -4)
            topScale.draw(cr)
        }

        renderText(cr, title, styler.fontTitle, posX, posY-70)
        cr.strokeNow()
	
	zoomToggle.draw(cr, 10, 75)
    }

    me void: initGraph(me string: titleStr, me int: PosX, me int: PosY, me int: Width, me int: Height, me double: Step, me int: Alpha)<- {
        title        <- titleStr
        posX         <- PosX
        posY         <- PosY
        width        <- Width
        height       <- Height
        step         <- Step
	zoomLevel    <- 2
	
	timeInterval <- zoomTable[zoomLevel]
	zoomToggle.initZoomWidget(50, 50, labelTable[zoomLevel])
	crntRightSide <- getCurrentTimeStamp()

	/- (string titleStr, bool IsVisible, int TicksPerStep, bool TextSlant, bool IsDate)
        leftScale.initScale("leftScale", true, 1, true, false)
        rightScale.initScale("rightScale!", false, 1, true, false)
        bottomScale.initScale("bottomScale!", true, 1, true, true)
        topScale.initScale("topScale", false, 1, false, false)
    }
    
    void: incrementZoomLevel(me int: change) <- {
	if (zoomLevel + change >= 0 and zoomLevel + change < zoomTable.size()) {
	    zoomLevel <- zoomLevel + change
	    timeInterval <- zoomTable[zoomLevel]
	    zoomToggle.label <- labelTable[zoomLevel]
	}
    }

    /- //// SCROLL IN TIME
    me mode[still, fingerPressed, pullScrolling]: scrollState
    me int: prevX
    me int: deltaX <- 0
    me int: moveThreshold <- 2
    me int: crntX
    me int: crntY

    me bool: primaryDn(their GUI_ButtonEvent: event) <- {
	if (zoomToggle.zoomInBtn.primaryDn(event)) {}
	else if (zoomToggle.zoomOutBtn.primaryDn(event)) {}
	else {
	    crntX <- event.x - posX
	    crntY <- event.y - posY
	    if (crntX <= 0 or crntX >= width or crntY <= 0 or crntY >= height) {return(false)}
	    if (scrollState==still) {
		scrollState <- fingerPressed
		prevX <- event.x
	    }
	}
	return(true)
    }
    
    me bool: primaryUp(their GUI_ButtonEvent: event) <- {
	if (zoomToggle.zoomInBtn.primaryDn(event)) {incrementZoomLevel(-1)}
	else if (zoomToggle.zoomOutBtn.primaryDn(event)) {incrementZoomLevel(1)}
	else {scrollState <- still}
	return(true)
    }
    
    me bool: mouseMoved(their GUI_MotionEvent: event) <- {
	deltaX <- event.x - prevX
	prevX <- event.x
	if (scrollState==fingerPressed and abs(deltaX) > moveThreshold) {
	    scrollState <- pullScrolling
	    scrollMode <- sManual
	    deltaX <- 0
	} 
	if (scrollState==pullScrolling) {
	    crntRightSide <- crntRightSide - deltaX*timeInterval/width
	    requestRedraw()
	}
	return(true)
    }
}

struct zoomWidget: inherits=dash{
    me circleButton: zoomInBtn
    me circleButton: zoomOutBtn
    me string: label
    me int: radius
    me int: labelX
    me int: maxLabelLength
    
    void: draw(me GUI_ctxt: cr, me int: Radius, me int: MaxLabelLength) <- {
	radius <- Radius
	maxLabelLength <- MaxLabelLength
	labelX <- posX + 3*radius
	
	zoomOutBtn.initZoomBtn(posX, posY, radius, "-")
	zoomOutBtn.draw(cr)
	renderTextCentered(cr, label, styler.fontSmall, labelX + maxLabelLength/2, posY + 3*radius/2)
	cr.strokeNow()
	zoomInBtn.initZoomBtn(labelX + maxLabelLength + radius, posY, radius, "+")
	zoomInBtn.draw(cr)
    }
    
    void: initZoomWidget(me int: PosX, me int: PosY, me string: Label) <- {
	posX <- PosX
	posY <- PosY
	label <- Label
    }
}

struct circleButton: inherits=dash{
    me int: radius
    me string: symbol
    
    me void: draw(me GUI_ctxt: cr) <- {
	if (symbol=="+") {
	    cr.setLineWidth(1)
	    cr.moveTo(posX + radius, posY + radius/4)
	    cr.lineTo(posX + radius, posY + 7*radius/4)
	    cr.strokeNow()
	}
	if (symbol=="+" or symbol=="-") {
	    cr.setLineWidth(1)
	    cr.moveTo(posX + radius/4, posY + radius)
	    cr.lineTo(posX + 7*radius/4, posY + radius)
	    cr.strokeNow()
	}
	cr.circle(posX + radius, posY + radius, radius)
	cr.strokeNow()
    }
    
    me void: initZoomBtn(me int: PosX, me int: PosY, me int: Radius, me string: Symbol) <- {
	posX <- PosX
	posY <- PosY
	radius <- Radius
	width <- 2*radius
	height <- 2*radius
	symbol <- Symbol
    }
    
    /- Click functionality is inside graph
    me bool: primaryDn(their GUI_ButtonEvent: event) <- {
	if (isTouchingMe(event.x, event.y)) {return(true)}
	else {return(false)}
    }
    me bool: primaryUp(their GUI_ButtonEvent: event) <- {
	if (isTouchingMe(event.x, event.y)) {return(true)}
	else {return(false)}
    }
}
