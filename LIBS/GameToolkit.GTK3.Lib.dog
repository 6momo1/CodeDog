/-############  Add Game-Toolkit features using GTK3
requirements = [
    [tagOneOf, Platform, [Linux]]
]

interface={
    provides=[GameToolkit_implementation]
    libFiles=[`pkg-config --cflags --libs sdl2`, `pkg-config --cflags --libs cairo`, `pkg-config --cflags --libs pangocairo`]
    headers=[SDL.h, cairo.h, pango/pangocairo.h]
}

LibDescription ={
    useStatus   = dynamic
    description ='A CodeDog Toolkit for making games'
    features    =[]
    platforms   =[Linux]
    bindings    =[C, CPP]
    CPUs        =[i386, amd64, arm7]
}

initCode = ``

/-///////////////////////////////  STRUCT CONVERTERS
struct GRWindow{their SDL_Window: GRWindow}
struct GUI_ctxt{their cairo_t:GUI_ctxt}
struct GameEvent{their SDL_Event:GameEvent}
struct UserEvent{their SDL_UserEvent:UserEvent}
struct WindowEvent{their SDL_WindowEvent:WindowEvent}
/-///////////////////////////////  GLOBAL
struct GLOBAL{
    void: deallocateWindow(their GRWindow: window)      <- <%!%GSDL_DestroyWindow(%1)%>
    void: deallocateGraphicsSystem()                    <- <%!%GSDL_Quit()%>
    void: getTickCount()                                <- <%!%GSDL_GetTicks()%>
    me int: screenWidth
    me int: screenHeight
    const int: SCREEN_WIDTH  <- 900
    const int: SCREEN_HEIGHT <- 700
    their GUI_ctxt: initializeGraphics() <- <%{
        cairo_t *cr;
        //The surface contained by the window
        SDL_Surface* screenSurface = NULL;
        //Initialize SDL
        if( SDL_Init( SDL_INIT_VIDEO ) < 0 ){
            printf("SDL could not initialize! SDL_Error: %s\n", SDL_GetError());
        }else{
            //Create window
            window = SDL_CreateWindow( "SDL Tutorial", SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED, SCREEN_WIDTH, SCREEN_HEIGHT, SDL_WINDOW_SHOWN);
            SDL_GetWindowSize(window, &screenWidth, &screenHeight);
            if( window == NULL ){
                printf( "Window could not be created! SDL_Error: %s\n", SDL_GetError());
            }else{
                //Get window surface
                screenSurface = SDL_GetWindowSurface(window);
                cairo_surface_t *surface = cairo_image_surface_create_for_data((unsigned char*) screenSurface->pixels,CAIRO_FORMAT_RGB24,screenSurface->w,screenSurface->h,screenSurface->pitch);
                //Fill the surface white
                SDL_FillRect( screenSurface, NULL, SDL_MapRGB(screenSurface->format, 210, 210, 210));
                cr = cairo_create(surface);
                // set background color 0.9=light gray, (0.0=black, 1.0=white)
                cairo_set_source_rgb(cr, 0.9, 0.9, 0.9);
            }
        }
        return(cr);
    }%>

    me deltaSize: renderText(their GUI_ctxt: cr, me string: text, me fontSpec: font, me double: x, me double: y) <- <%{
        cairo_move_to(cr,x,y);
        PangoLayout *layout=pango_cairo_create_layout(cr);
        pango_layout_set_text(layout, text.data(), -1);

        string fontDesc=font.name+' '+ std::to_string(font.size);
        PangoFontDescription *desc = pango_font_description_from_string(fontDesc.data());
        pango_layout_set_font_description(layout, desc);
        pango_font_description_free(desc);

        cairo_set_line_width(cr, 0.5);
        pango_cairo_update_layout(cr, layout);
        pango_cairo_show_layout_line (cr, pango_layout_get_line (layout, 0));
       /- pango_cairo_layout_path(cr, layout);
        deltaSize size;
        pango_layout_get_pixel_size(layout, &size.width, &size.height);
        g_object_unref(layout);
        cairo_fill(cr);
        return(size);
    }%>

}
/-///////////////////////////////  GUI_ctxt
struct GUI_ctxt{
    /-me void: fetchAreaToBeDrawn(me GUI_rect: area) <- <%!cairo_clip_extents(%0, &%1.x1, &%1.y1, &%1.x2, &%1.y2)%>
    /-me void: reset() <- <%!%G %>
    /-me void: setRGBA(me double: red, me double: green, me double: blue, me double: alpha) <- <%!cairo_set_source_rgba(%0, (double)%1 /256, (double)%2 /256, (double)%3 /256, (double)%4 /256)%>
    /-me void: setRGB (me double: red, me double: green, me double: blue) <- <%!cairo_set_source_rgb(%0, (double)%1 /256, (double)%2 /256, (double)%3 /256)%>
    me void: setColor(me cdColor: color) <- <%!cairo_set_source_rgb(%0, (double)%1.red /256, (double)%1.green /256, (double)%1.blue /256)%>
    /-me void: setLineWidth(me double: width) <- <%!cairo_set_line_width(%0, %1)%>
    /-me void: finishPDF() <- <%!cairo_surface_finish(cairo_get_group_target(%0))%>
    /-me void: setScale() <- <%!cairo_scale(%0, %1, %2)%>
    me void: moveTo(me double: x, me double: y) <- <%!cairo_move_to(%0, %1, %2)%>
    me void: lineTo(me double: x, me double: y) <- <%!cairo_line_to(%0, %1, %2)%>
    /-me void: moveRel(me double: dx, me double: dy) <- <%!cairo_rel_move_to(%0, %1, %2)%>
    /-me void: lineRel(me double: dx, me double: dy) <- <%!cairo_rel_line_to(%0, %1, %2)%>
    /-me void: curveTo(me double: x1, me double: y1, me double: x2, me double: y2, me double: x3, me double: y3) <- <%!cairo_curve_to(%0, %1, %2, %3, %4, %5, %6)%>
    /-me void: curveRel(me double: dx1, me double: dy1, me double: dx2, me double: dy2, me double: dx3, me double: dy3) <- <%!cairo_rel_curve_to(%0, %1, %2, %3, %4, %5, %6)%>
    /-me void: closePath() <- <%!cairo_close_path(%0)%>
    /-me void: rectangle(me double: leftX, me double: topY, me double: width, me double: height) <- <%!cairo_rectangle(%0, %1, %2, %3, %4)%>
    /-me void: paintNow() <- <%!cairo_paint(%0)%>
    me void: strokeNow() <- <%!cairo_stroke(%0)%>
    /-me void: fillNow() <- <%!cairo_fill(%0)%>
    /-me void: strokeKeep() <- <%!cairo_stroke_preserve(%0)%>
    /-me void: fillKeep() <- <%!cairo_fill_preserve(%0)%>
    /-me void: setFillPattern() <- <%!cairo_set_source(%0, %1)%>
    /-me void: circle(me int: centerX, me int: centerY, me int: radius) <- <%!cairo_arc(%0, %1, %2, %3, 0, 2 * M_PI)%>
}
/-///////////////////////////////  GRWindow
struct GRWindow{
    void: requestRedraw()       <- <%!SDL_UpdateWindowSurface(%0)%>
}
struct GameEvent{
    me int32: type
    me UserEvent: user
    me WindowEvent: window
}
struct UserEvent{
    me int32: code
}
struct WindowEvent{
    me int32: event
}

