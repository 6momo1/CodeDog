// CodeDog Threads Library

requirements = [
   [tagOneOf, Lang, [Swift]]
]

interface={
    provides=[threads_implementation]
    libFiles=[]
    headers =[]
}

LibDescription  = {
    useStatus   = dynamic
    description = 'Library for multi-thread programming'
    features    = [Threads]
    Lang        = [Swift]
}

embedVeryHigh = `
func __threadedFunction(pointer: UnsafeMutableRawPointer!) -> UnsafeMutableRawPointer? {
    var threadParameter = pointer.load(as: _ThreadParameter.self)
    var pxT = threadParameter.pxT
    var threadIdentifier = threadParameter.threadIdentifier
    pxT.run()
    return nil
}
class __MutexMngr{
    // TODO: this should be pthread_mutex_t? but throws error in swift 5.4.1 on Linux
    var mtx: pthread_mutex_t!

    init(m: pthread_mutex_t!){
        mtx = m
        pthread_mutex_lock(&mtx)
    }
    deinit{pthread_mutex_unlock(&mtx)}
}
class __SyncLock{}
class _pxThread {
    var notDone:Bool = false
    let _id:String = ""
    // TODO: this should be pthread_t? but throws error in swift 5.4.1 on Linux
    var myThread: pthread_t! = nil

    func ID() -> String {return _id}
    func isActive() -> Bool{return true}
    func start(){
        var threadParameter  = _ThreadParameter(threadIdentifier: _ThreadIdentifier(id: _id), pxT: self)
        var pThreadParameter = UnsafeMutablePointer<_ThreadParameter>.allocate(capacity:1)
        pThreadParameter.pointee = threadParameter
        // TODO: Fix &myThread param so it doesn't throw Fatal error: Unexpectedly found nil while implicitly unwrapping an Optional value
        let result = pthread_create(&myThread, nil, __threadedFunction, pThreadParameter)
        if result != 0 {print("Error creating thread--"); exit(1);}
    }
    func waitForExit(){pthread_join(myThread!,nil)}
    func run(){}
}
struct _ThreadIdentifier {
  var id: String
}
class _ThreadParameter {
  var threadIdentifier: _ThreadIdentifier
  var pxT: _pxThread

  init(threadIdentifier: _ThreadIdentifier, pxT: _pxThread) {
    self.threadIdentifier = threadIdentifier
    self.pxT = pxT
  }
}

//typealias Unique_Lock_Mutex = unique_lock<mutex>

`
struct Threads: wraps = _pxThread{}
struct Mutex: wraps = pthread_mutex_t{
    void: lock()        <- <%!pthread_mutex_lock(%0)%>
    void: unlock()      <- <%!pthread_mutex_unlock(%0)%>
    bool: tryLock()     <- <%!pthread_mutex_tryLock(%0)%>
}

struct MutexMngr: wraps = __MutexMngr{
    void: lock()        <- <%!pthread_mutex_lock(&mtx)%>
    void: unlock()      <- <%!pthread_mutex_unlock(&mtx)%>
    bool: tryLock()     <- <%!pthread_mutex_tryLock(&mtx)%>
}

struct SyncLock: wraps = __SyncLock{
    void: wait(me MutexMngr: lock)   <- <%!wait(%1)%>
    void: notifyOne()                <- <%!notify_one()%>
    void: notifyAll()                <- <%!notify_all()%>
}

struct Semaphore: wraps=semaphore {
    void: post()        <- <%!signal()%>
    void: wait()        <- <%!wait()%>
}
