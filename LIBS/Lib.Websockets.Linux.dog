/-############  Add JSON Object Implementation
requirements = [
    [tagOneOf, Platform, [Linux]]
]

interface={
    provides=[webSockets_implementation]
    libFiles=[websockets]
    headers=[libwebsockets.h, LIBS/codeDogWebsockets.h]
}




LibDescription ={
    useStatus   ='dynamic'
    description ='Library for Websockets'
    features    =[Websockets]
    platforms   =[Linux, OS-X_Devices, Windows]
    bindings    =[C, CPP, perl, python]
    CPUs        =[i386, amd64, arm7]
}

struct GLOBAL{
    me bool: webSocketLibIsGoing <- false

}

struct webSocketConnection{
    me string: URL


     me bool: connect(me string: url) <- <%{
        URL = url;
        int  port = 7681, use_ssl = 0, ietf_version = -1;
        const char *prot, *p;
        string  protocol;
        char path[300];

        if(!webSocketLibIsGoing){
            webSocketLibIsGoing =initializeWebsocketSystem();
            if(!webSocketLibIsGoing){cout<<"Websockets failed to initialize\n"; exit(1);};
        }
        struct lws_client_connect_info clientInfo;
        memset(&clientInfo, 0, sizeof(clientInfo));
        clientInfo.port = port;

        if (lws_parse_uri((char*)URL.data(), &prot, &clientInfo.address, &clientInfo.port, &p))
            return(false);
        protocol=prot;
        path[0] = '/';
        strncpy(path + 1, p, sizeof(path) - 2);
        path[sizeof(path) - 1] = '\0';
        clientInfo.path = path;

    	if (protocol == "http" || protocol == "ws") use_ssl = 0;
    	else if (protocol == "https" || protocol == "wss") use_ssl =  LCCSCF_USE_SSL |  LCCSCF_ALLOW_SELFSIGNED | LCCSCF_SKIP_SERVER_CERT_HOSTNAME_CHECK; // 1;

        clientInfo.context = context;
    	clientInfo.ssl_connection = use_ssl;
    	clientInfo.host = clientInfo.address;
    	clientInfo.origin = clientInfo.address;
    	clientInfo.ietf_version_or_minus_one = ietf_version;
		clientInfo.protocol = protocols[PROTOCOL_GENERIC].name;
		clientInfo.pwsi = &wsi_generic;
        clientInfo.userdata = this;

        cout<<"protocol:"<<protocol<<"\n";
        cout<<"PORT:"<<clientInfo.port<<"\n";
        cout<<"PATH:"<<p<<"\n";
        cout<<"ADDR:"<<clientInfo.address<<"\n";
        cout<<"SSL:"<<clientInfo.ssl_connection<<"\n";

		lws_client_connect_via_info(&clientInfo);
        while (!force_exit) {lws_service(context, 500);}

        return(true);
    }%>

    void: disconnect() <-  <%{lws_context_destroy(context);}%>

    void: emit(their lws: wsi, me string: mesg) <-  <%{
        char buf[mesg.size() + LWS_PRE];
        strcpy(buf + LWS_PRE , mesg.data());
        lws_write(wsi,  (unsigned char *)&buf[LWS_PRE], mesg.size(), LWS_WRITE_TEXT);
    }%>
}
