//############  Add GUI-Toolkit features for IOS
requirements = [
    [tagOneOf, Platform, [IOS]]
]

interface={
    provides=[GUI_ToolKit_implementation]
//    libFiles=[`pkg-config --cflags --libs gtk-3.0`]
    headers=[UIKit]
}

LibDescription ={
    useStatus   = dynamic
    description ='Provides a GUI Toolkit or iPhone, iPad, etc.'
    features    =[GUI_ToolKit, Mouse, Keyboard, Audio]
    platforms   =[Linux, OS-X_Devices, Windows]
    bindings    =[C, CPP, Swift, ObjectiveC]
    CPUs        =[i386, amd64, arm7]
}
embedLow = `
@UIApplicationMain
class AppDelegate: UIResponder, UIApplicationDelegate{
    var window: UIWindow?

    func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplicationLaunchOptionsKey: Any]?) -> Bool {
        window = UIWindow(frame: UIScreen.main.bounds)
        let mainViewController = ViewController()
        window?.rootViewController = mainViewController
        window?.makeKeyAndVisible()
        return true
    }

    func applicationWillResignActive(_ application: UIApplication) -> Void {
        var application = application
    }
    func applicationDidEnterBackground(_ application: UIApplication) -> Void {
        var application = application
    }
    func applicationWillEnterForeground(_ application: UIApplication) -> Void {
        var application = application
    }
    func applicationDidBecomeActive(_ application: UIApplication) -> Void {
        var application = application
    }
    func applicationWillTerminate(_ application: UIApplication) -> Void {
        var application = application
    }
}
class ViewController: UIViewController {
// var appView: UIView!
var headerView: UIView!
var titleLabel: UILabel!
var appView: UIView!

    override func viewDidLoad() {
        super.viewDidLoad()
        appView = UIView()
        //thisApp.createAppArea(appView)
        setupHeader()
        setupTitleLabel()
        jg_function()
    }

    func setupHeader() {
        //      Initialize view
        headerView = UIView()

        //      set background color as a method
        headerView.backgroundColor = .gray

        self.view.addSubview(headerView)

        //      Set position of headerView view using constraints
        headerView.translatesAutoresizingMaskIntoConstraints = false
        headerView.leadingAnchor.constraint(equalTo: self.view.leadingAnchor).isActive = true
        headerView.topAnchor.constraint(equalTo: self.view.topAnchor).isActive = true
        headerView.widthAnchor.constraint(equalTo: self.view.widthAnchor, multiplier: 1).isActive = true
        headerView.heightAnchor.constraint(equalTo: self.view.heightAnchor, multiplier: 0.1).isActive = true
    }
    func setupTitleLabel() {
        //      Initialize view
        titleLabel = UILabel()

        //      set methods for the look of the titlelabel
        titleLabel.text = "FutureApp"
        titleLabel.textAlignment = .center
        titleLabel.font = UIFont(name: titleLabel.font.fontName, size: 20)
        titleLabel.textColor = .blue
        titleLabel.backgroundColor = .orange

        //      add titleLabel to the headerViews view
        headerView.addSubview(titleLabel)

        //      Set position of titleLabel using constraints
        titleLabel.translatesAutoresizingMaskIntoConstraints = false
        titleLabel.centerXAnchor.constraint(equalTo: headerView.centerXAnchor).isActive = true
        titleLabel.bottomAnchor.constraint(equalTo: headerView.bottomAnchor).isActive = true
        titleLabel.widthAnchor.constraint(equalTo: headerView.widthAnchor, multiplier: 0.4).isActive = true
        titleLabel.heightAnchor.constraint(equalTo: headerView.heightAnchor, multiplier: 0.5).isActive = true
    }

    func jg_function() {
        let tw = topAppWidget(frame: CGRect(x: 0,
        y: headerView.frame.height+70,
        width:UIScreen.main.bounds.size.width,
        height:UIScreen.main.bounds.size.height-70))

        //        Use some dot notation to assign methods to topAppWidget as tw
        tw.backgroundColor = .gray
        //        tw.clearsContextBeforeDrawing = true

        //      add class topAppWidget to the ViewController
        self.view.addSubview(tw)

        //      add more
        self.view.backgroundColor = .purple
        appView = topAppWidget()
        thisApp.createAppArea(appView)
        self.view.addSubview(appView)


    }
}

class topAppWidget: UIView {
    override func draw(_ rect: CGRect) {
    let context = UIGraphicsGetCurrentContext()
    context?.setStrokeColor(UIColor.white.cgColor)
    context?.__moveTo(x:0, y:0)
    context?.__addLineTo(x: self.frame.size.width, y:self.frame.size.height)
    context?.__moveTo(x:UIScreen.main.bounds.size.width, y:0)
    context?.__addLineTo(x:0, y:UIScreen.main.bounds.size.height-70)
    context?.strokePath()
    // EventDispatcher.topWidget?.draw()


    }

    //override func primaryClick(_ event: GdkEventButton?) -> Bool {
      //  var event = event

        //return(true);
    //}
    //override func secondaryClick(_ event: GdkEventButton?) -> Bool {
     //   var event = event

       // return(true);
    //}

}

`

/////////////////////////////////  STRUCT CONVERTERS
struct GUI_rect{me double: x1 me double: y1 me double: x2 me double: y2}
//struct GUI_offset{their GtkAdjustment:GUI_offset}
struct GUI_item{their UIView: GUI_item}
struct GUI_Frame{their UIView: GUI_Frame}
struct GUI_menuBar{their UIView: GUI_menuBar}
struct GUI_menu{their UIView: GUI_menu}
struct GUI_menuItem{their UIView: GUI_menuItem}
struct GUI_canvas{their UIView: GUI_canvas}
struct GUI_container{their UIView:GUI_container}
struct GUI_ScrollingWindow{their UIView: GUI_ScrollingWindow}
//struct INK_Image{their cairo_surface_t: INK_Image}      // How will the ink look?
struct GUI_callback{me GCallback: GUI_callback}
struct GUI_Scalar{me Int: GUI_Scalar}
//struct GUI_Label{their textView: GUI_Label}
struct listWidget{their HWND: listWidget}


/////////////////////////////////  HANDLE GUI
struct GUI{
    me uint32: GUI_Init()
    me uint32: GUI_Run()
    me void: GUI_Deinit()
}
struct GUI_rect{me CGRect:GUI_rect}
struct GUI_Frame{me UIView:GUI_Frame}

struct GUI{
    me void: showWidget(me GUI_item: widget)
    me GUI_item: newCanvas()
    me void: setWidgetSize(me GUI_item: widget, me uint32: width, me uint32: height)
    me GUI_item: newScrollingWindow()
    me void: addToContainer(me GUI_container: container, me GUI_item: widget)
    me void: addToContainerAndExpand(me GUI_container: container, me GUI_item: widget)
    //me void: addMenuBar(me GUI_menuBar: menubar)
    //me void: create_MenuItem(me GUI_menu: ParentMenu, me string: label)
    //me void: create_TopSubMenu(me GUI_menuBar: ParentMenu, me string: label)
    //me void: create_SubMenu(me GUI_menu: ParentMenu, me string: label)
    me void: setCallback()
    me GUI_ctxt: newPDF_ctxt(me sting: filename, me double: inchesWide, me double: inchesHigh)
}

struct GUI_ctxt {
    their CGContext:GUI_ctxt
    me void: fetchAreaToBeDrawn(me GUI_rect: area)
    me void: reset()
    me void: setRGBA(me double: red, me double: green, me double: blue, me double: alpha)
    me void: setRGB (me double: red, me double: green, me double: blue)
    me void: setLineWidth(me double: width)
    me void: finishPDF()
    me void: setScale()
    me void: moveTo(me double: x, me double: y)
    me void: lineTo(me double: x, me double: y)
    me void: moveRel(me double: dx, me double: dy)
    me void: lineRel(me double: dx, me double: dy)
    me void: curveTo(me double: x1, me double: y1, me double: x2, me double: y2, me double: x3, me double: y3)
    me void: curveRel(me double: dx1, me double: dy1, me double: dx2, me double: dy2, me double: dx3, me double: dy3)
    me void: closePath()
    me void: rectangle()
    me void: paintNow()
    me void: strokeNow()
    me void: fillNow()
    me void: strokeKeep()
    me void: fillKeep()
    me void: setFillPattern()
}

/*
struct AppDelegate: implements='UIResponder, UIApplicationDelegate' attrs='@UIApplicationMain'

{
    their UIWindow: window
    //struct AppDelegate: implements='UIResponder, UIApplicationDelegate' {
    //their UIWindow: window

    me bool: application(me UIApplication: application, their Any[list UIApplicationLaunchOptionsKey]:launchOptions) <- <%{

window = UIWindow(frame: UIScreen.main.bounds)
    window?.backgroundColor = UIColor.blue
    let mainViewController = ViewController()
    let mainView = UIView(frame: CGRect(x:0, y:0, width:320, height:568))
    mainViewController.view = mainView
    mainViewController.title = "Home View!"
    //    mainViewController.setToolbarHidden(false, animated: true)

    //    mainViewController.pushViewController(firstViewController, animated: true)
    //    window!.rootViewController = mainViewController
    //    window!.makeKeyAndVisible()
    window?.rootViewController = mainViewController
    window?.makeKeyAndVisible()
    thisApp.createAppArea(mainView)

    return true

    }%>

    void: applicationWillResignActive(UIApplication: application) <- {
        // Sent when the application is about to move from active to inactive state. This can occur for certain types of temporary interruptions (such as an incoming phone call or SMS message) or when the user quits the application and it begins the transition to the background state.
        // Use this method to pause ongoing tasks, disable timers, and invalidate graphics rendering callbacks. Games should use this method to pause the game.
    }

    void: applicationDidEnterBackground(UIApplication: application) <- {
        // Use this method to release shared resources, save user data, invalidate timers, and store enough application state information to restore your application to its current state in case it is terminated later.
        // If your application supports background execution, this method is called instead of applicationWillTerminate: when the user quits.
    }

    void: applicationWillEnterForeground(UIApplication: application) <- {
        // Called as part of the transition from the background to the active state; here you can undo many of the changes made on entering the background.
    }

    void: applicationDidBecomeActive(UIApplication: application) <- {
        // Restart any tasks that were paused (or not yet started) while the application was inactive. If the application was previously in the background, optionally refresh the user interface.
    }

    void: applicationWillTerminate(UIApplication: application) <- {
        // Called when the application is about to terminate. Save data if appropriate. See also applicationDidEnterBackground:.
    }

}
*/
/////////////////////////////////  HANDLE EVENTS
/////////////////////////////////  EVENT DISPATCHER
struct IOS_eventDispatcher{
their widget: topWidget
me bool: dispatchPointerMotionEvent(me UIView: event)
// me bool: dispatchKeyboardEvent(their GdkEventKey: event)
// me bool: dispatchWindowEvent(their GdkEventConfigure: event)
// Also: timer, data and user events
me void: registerWidgetForEventDispatcher(me GUI_item: Widget, their widget: masterWidget)
}

/////////////////////////////////   Event callbacks
struct GLOBAL{
    me IOS_eventDispatcher: EventDispatcher
}

struct GUI_MotionEvent{their GdkEventMotion: GUI_MotionEvent}

struct GUI_ButtonEvent{their GdkEventButton: GUI_ButtonEvent}
struct GUI_ButtonEvent{
me uint: type
// GdkWindow *window;
// gint8 send_event;
// guint32 time;
me double: x
me double: y
me uint: state
me uint: button
}
///////////////////////////////// TIME
struct tm{
    me tm: tm
    me int: tm_hour
    me int: tm_min
    me int: tm_sec
}

struct timeStringer{
    me tm: timeRec
    me none: timeStringer()

    me string: time12Hour()
}
struct guiFillPattern{
    //their cairo_pattern_t: guiFillPattern
    me void: init()
    me void: AddColorStopRGBA(me double: offset, their Color: color, me int: alpha)
    me void: AddColorStop(me double: offset, their Color: color)
}

struct APP{}

