/////////// Add Windows-specific routines for C++
requirements = [
    [tagOneOf, Lang, [CPP]],
    [tagOneOf, Platform, [Windows]]
]

interface={
    provides = [CPP_OS_tools]
    libFiles = []
    headers  = [direct.h, time.h, windows.h, array]
}


LibDescription ={
    useStatus   = dynamic
    description = 'Built in Windows-specific routines for CPP'
}

embedHigh = `
// platform dependent wrappers
int makedir(const char *dirname) {
	return(_mkdir(dirname));
}
void stringcopy(char *dest, size_t dest_size, const char *src) {
	strcpy_s(dest, dest_size, src);
}
FILE* pipeopen(const char *command, const char *type) {
	return(_popen(command, type));
}
int pipeclose(FILE* stream) {
	return(_pclose(stream));
}
`

struct GLOBAL {
	void: sleep(me int: milliseconds) <- <%{
       Sleep(milliseconds);
   }%>

	me string: execCmd(me string: command) <- <%{
      FILE* pipe;
      std::array<CHAR, 128> buffer;
      string result = "";
      pipe = pipeopen(command.data(), "r");
      if (pipe == NULL) {
        cout<<"Cannot execute command:'" << command<<"'\n";
        return "";
      }
      while(fgets(buffer.data(), 128, pipe) != NULL) {
        result = result+buffer.data();
      }
      pipeclose(pipe);
      return result;
    }%>

}
