// CodeDog List model

requirements = [
    [require, List_implementation]
]

model List<nodeType>{   //model is abstract class
    void: append()
    nodeType: at()
    me void: clear()
    me void: clipToSize()
    itr nodeType: deleteNth()
    itr nodeType: end()
    itr nodeType: erase()
    nodeType: first()
    itr nodeType: front()
    nodeType: __getAt()
    itr nodeType: insert()
    itr nodeType: insertIdx()
    me bool: isEmpty()
    nodeType: last()
    itr nodeType: nthItr()
    nodeType: popFirst()
    nodeType: popLast()
    me void: prepend()
    itr nodeType: __putAt()
    me uint: size()
    me void: pushFirst()
    me void: pushLast()
    me void: begin()
    me void: rEnd()
    nodeType: back()
}

model MapNode<keyType, valueType>{
    keyType: key
    valueType: value
    our RBNode<keyType, valueType>: goNext()
    our RBNode<keyType, valueType>: goPrev()
}
model Map<keyType, valueType>{
    valueType: at(keyType)
    void: clear()
    me bool: containsKey(keyType: key)
    itr nodeType: end()
    void: erase(keyType: key)
    itr nodeType: find(valueType: val)
    valueType: first()
    itr nodeType: front()
    itr nodeType: insert(keyType: key, valueType: value)
    me bool:  isEmpty()
    valueType: last()
    //itr valueType: lower_bound(keyType: key)
    me uint:  size()
}
/*
struct RBNode<keyType, valueType>: implements = MapNode{
    keyType: key
    valueType: value
    me bool: isBlack
    our RBNode<keyType, valueType>: left
    our RBNode<keyType, valueType>: right
    our RBNode<keyType, valueType>: parent
    our RBNode<keyType, valueType>: goNext() <- {return(right)}
    our RBNode<keyType, valueType>: goPrev() <- {return(left)}
    valueType: val()                         <- <%!%0.value%>
    none: RBNode(keyType: _key, valueType: _val) <-{
        key   <- _key
        value <- _val
    }
    none: RBNode() <-{}
}

struct RBTreeMap<keyType, valueType>: implements = Map {// specs = {insert = constant append = constant prepend = constant}{
    our RBNode<keyType, valueType>: Root
    our RBNode<keyType, valueType>: Leaf
    me int: mapSize

    valueType: at(keyType: searchKey) <- {
        our RBNode<keyType, valueType>: node
        node <- getNode(Root, searchKey)
        return(node.value)
    }
    void: clear() <- {
        Root <- NULL
        Leaf <- NULL
        mapSize <- 0
    }
    me bool: containsKey(keyType: key) <- {
        if(getNode(Root, key)){return(true)}
        else{return(false)}
    }
    our RBNode<keyType, valueType>: end() <- {
        our RBNode<keyType, valueType>: crntNode <- Root
        our RBNode<keyType, valueType>: prevNode
        while(!(crntNode === Leaf)){
            prevNode <- crntNode
            crntNode <- crntNode.right
        }
        return(prevNode)
    }
    me void: erase(keyType: key) <- {
        our RBNode<keyType, valueType>: node
        node <- getNode(Root, key)
        removeHelper(node, key)
    }
    our RBNode<keyType, valueType>: find(valueType: val) <- {
        return(getNode(Root, val))
    }
    valueType: first() <- {
        our RBNode<keyType, valueType>: smallestNode <- findSmallest(Root)
        return(smallestNode.value)
    }
    our RBNode<keyType, valueType>: front() <- {
        our RBNode<keyType, valueType>: smallestNode <- findSmallest(Root)
        return(smallestNode)
    }
    our RBNode<keyType, valueType>: insert(keyType: key, valueType: value) <- {
        our RBNode<keyType, valueType>: newNode
        if(Root == NULL){
            Allocate(Leaf)
            Leaf.isBlack <-true
            Allocate(newNode, key, value)
            newNode.isBlack <-true
            newNode.left <- Leaf
            newNode.right <- Leaf
            Root <- newNode
            mapSize <- mapSize + 1
            return(newNode)
        }
        Allocate(newNode, key, value)
        newNode.left <- Leaf
        newNode.right <- Leaf
        BSTInsert(Root, newNode)
        mapSize <- mapSize + 1
        checkColor(newNode)
        return(newNode)
    }
    me bool: isEmpty() <- {
        if(Root==NULL){return(true)}
        return(false)
    }
    valueType: last() <- {
        our RBNode<keyType, valueType>: crntNode <- Root
        our RBNode<keyType, valueType>: prevNode
        while(!(crntNode === Leaf)){
            prevNode <- crntNode
            crntNode <- crntNode.right
        }
        return(prevNode.value)
    }
    //itr valueType: lower_bound(keyType: key) <- {}
    me uint:  size() <- {return(mapSize)}
    ////////////////////////////////////////////////////////////////////
    me bool: isLeftChild(our RBNode<keyType, valueType>: node) <- {
        if(node.parent != NULL and node === node.parent.left){return(true)}
        {return(false)}
    }

    me void: leftRotate(our RBNode<keyType, valueType>: node, me bool: changeColor) <- {
        our RBNode<keyType, valueType>: temp <- node.right
        node.right <- temp.left
        node.right.parent <- node
        if(node.parent == NULL){
            Root <- temp
            temp.parent <- NULL
        }else{
            temp.parent <- node.parent
            if(isLeftChild(node)){temp.parent.left <- temp}
            else{temp.parent.right <- temp}
        }
        temp.left <- node
        node.parent <- temp
        if(changeColor == true){
            node.isBlack <- true
            node.parent.isBlack <- false
        }
    }

    me void: rightRotate(our RBNode<keyType, valueType>: node, me bool: changeColor) <- {
        our RBNode<keyType, valueType>: temp <- node.left
        node.left <- temp.right
        node.left.parent <- node
        if(node.parent == NULL){
            Root <- temp
            temp.parent <- NULL
        }else{
            temp.parent <- node.parent
            if(isLeftChild(node) == false){temp.parent.right <- temp}
            else{temp.parent.left <- temp}
        }
        temp.right <- node
        node.parent <- temp
        if(changeColor == true){
            node.isBlack <- true
            node.parent.isBlack <- false
        }
    }

    me void: rotate(our RBNode<keyType, valueType>: node)<-{
        if(isLeftChild(node) == true){
            if(isLeftChild(node.parent) == true){
            rightRotate(node.parent.parent, false)
            node.isBlack <-false
            node.parent.isBlack <- true
            node.parent.right.isBlack <- false
            return()
            }
            rightRotate(node.parent, false)
            leftRotate(node.parent.parent, false)
            node.isBlack <-true
            node.right.isBlack <- false
            node.left.isBlack <- false
            return()
        }
        //// rotate for right child
        if(isLeftChild(node.parent) == false){
            leftRotate(node.parent.parent, false)
            node.isBlack <-false
            node.parent.isBlack <- true
            node.parent.left.isBlack <- false
            return()
        }
        leftRotate(node.parent, false)
        rightRotate(node.parent.parent, false)
        node.isBlack <-true
        node.right.isBlack <- false
        node.left.isBlack <- false
        return()
    }

    me void: correctTree(our RBNode<keyType, valueType>: node)<-{
        if(node.parent===Root){
            print ("****************************** PARENT ", node.parent.key," is Root.  Node key is ", node.key, "\n")
            exit(1)
        }
        //// PARENT IS LEFT CHILD
        if(isLeftChild(node.parent) == true){
            //// BLACK AUNT ROTATE
            if(node.parent.parent.right.isBlack == true){
                rotate(node)
                return()
            }
            //// RED AUNT COLOR FLIP
            node.parent.parent.right.isBlack <- true
            node.parent.parent.isBlack <- false
            node.parent.isBlack <- true
            return()
        }
        //// PARENT IS RIGHT CHILD
        //// BLACK AUNT ROTATE
        if(node.parent.parent.left.isBlack == true){
            rotate(node)
            return()
        }
        //// RED AUNT COLOR FLIP
        node.parent.parent.left.isBlack <- true
        node.parent.parent.isBlack <- false
        node.parent.isBlack <- true
        return()
    }

    me void: checkColor(our RBNode<keyType, valueType>: node) <-{
        if(node === Root or node === Leaf){
            Root.isBlack <- true
            return()
        }
        if(node.isBlack == false and node.parent.isBlack == false){correctTree(node)}
        checkColor(node.parent)
    }

    me void: BSTInsert(our RBNode<keyType, valueType>: root, our RBNode<keyType, valueType>: newNode) <- {
        if(newNode.key > root.key){
            if(root.right === Leaf){
                root.right <- newNode
                newNode.parent <- root
                return()
            }
            BSTInsert(root.right, newNode)
            return()
        }
        if(root.left === Leaf){
            root.left <- newNode
            newNode.parent <-root
            return()
        }
        BSTInsert(root.left, newNode)
        return()
    }

    me int: height()<-{
        if(Root == NULL){return(0)}
        return(heightHelper(Root)-1)
    }

    me int: heightHelper(our RBNode<keyType, valueType>: node)<-{
        if(node == NULL){return(0)}
        me int: leftHeight <- heightHelper(node.left)+1
        me int: rightHeight <- heightHelper(node.right)+1
        if(leftHeight > rightHeight){return(leftHeight)}
        return(rightHeight)
    }

    me void: removeHelper(our RBNode<keyType, valueType>: node, their int: key) <- {
        if(node === Leaf or node == NULL){return()}
        if(node.key == key){
            if(node.right === Leaf or node.left === Leaf){deleteOneChild(node)}
            else{
                our RBNode<keyType, valueType>: inorderSuccessor <- findSmallest(node.right)
                node.key <- inorderSuccessor.key
                removeHelper(node.right, node.key)
            }
        }
        if(node.key < key){removeHelper(node.right, key)}
        else{removeHelper(node.left, key)}
    }

    me void: deleteOneChild(our RBNode<keyType, valueType>: nodeToBeDelete) <- {
        our RBNode<keyType, valueType>: child
        if(nodeToBeDelete.right === Leaf){child <- nodeToBeDelete.left}
        else{child <- nodeToBeDelete.right}
        replaceNode(nodeToBeDelete, child)
        if(nodeToBeDelete.isBlack == true){
            if(child.isBlack == false){child.isBlack <- true}
            else{deleteCase1(child)}
        }
    }

    me void: replaceNode(our RBNode<keyType, valueType>: node, our RBNode<keyType, valueType>: child) <- {
        child.parent <- node.parent
        if(node.parent == NULL){Root <-child}
        else{
            if(isLeftChild(node)){node.parent.left <- child}
            else{node.parent.right <- child}
        }
    }

    our RBNode<keyType, valueType>: findSmallest(our RBNode<keyType, valueType>: crntNode) <- {
        our RBNode<keyType, valueType>: prevNode <- NULL
        while(!(crntNode == NULL or crntNode === Leaf)){
            prevNode <- crntNode
            crntNode <- crntNode.left
        }
        if(prevNode != NULL){return(prevNode)}
        return(crntNode)
    }

    me void: deleteCase1(our RBNode<keyType, valueType>: doubleBlackNode) <- {
        print ("deleteCase1: ", doubleBlackNode.key, "\n")
        if(doubleBlackNode === Leaf){print("    Leaf\n")}
        if(doubleBlackNode.parent == NULL){
            Root <- doubleBlackNode
            return()
        }
        deleteCase2(doubleBlackNode)
    }

    me void: deleteCase2(our RBNode<keyType, valueType>: doubleBlackNode) <- {
        print ("deleteCase2: ", doubleBlackNode.key, "\n")
        our RBNode<keyType, valueType>: siblingNode
        siblingNode <- findSiblingNode(doubleBlackNode)
        if(siblingNode.isBlack == false){
            if(isLeftChild(siblingNode)){rightRotate(siblingNode, true)}
        else{leftRotate(siblingNode, true)}
            if(siblingNode.parent == NULL){Root <- siblingNode}
        }
        deleteCase3(doubleBlackNode)
    }

    me void: deleteCase3(our RBNode<keyType, valueType>: doubleBlackNode) <- {
        print ("deleteCase3: ", doubleBlackNode.key, "\n")
        our RBNode<keyType, valueType>: siblingNode <- findSiblingNode(doubleBlackNode)
        if(doubleBlackNode.parent.isBlack == true and siblingNode.isBlack == true and siblingNode.left.isBlack == true and siblingNode.right.isBlack == true){
            siblingNode.isBlack <- false
            deleteCase1(doubleBlackNode.parent)
        }else{deleteCase4(doubleBlackNode)}
    }

    me void: deleteCase4(our RBNode<keyType, valueType>: doubleBlackNode) <- {
        print ("deleteCase4: ", doubleBlackNode.key, "\n")
        our RBNode<keyType, valueType>: siblingNode <- findSiblingNode(doubleBlackNode)
        if(doubleBlackNode.parent.isBlack == false and siblingNode.isBlack == true and siblingNode.left.isBlack == true and siblingNode.right.isBlack == true){
            siblingNode.isBlack <- false
            doubleBlackNode.parent.isBlack <- true
            return()
        }else{deleteCase5(doubleBlackNode)}
    }

    me void: deleteCase5(our RBNode<keyType, valueType>: doubleBlackNode) <- {
        print ("deleteCase5: ", doubleBlackNode.key, "\n")
        our RBNode<keyType, valueType>: siblingNode <- findSiblingNode(doubleBlackNode)
        if(siblingNode.isBlack == true){
            if(isLeftChild(doubleBlackNode) == true and siblingNode.right.isBlack == true and siblingNode.left.isBlack == false){
                rightRotate(siblingNode.left, true)
            }else if(isLeftChild(doubleBlackNode) == false and siblingNode.left.isBlack == true and siblingNode.right.isBlack == false){
                leftRotate(siblingNode.right, true)
            }
        }
        deleteCase6(doubleBlackNode)
    }

    me void: deleteCase6(our RBNode<keyType, valueType>: doubleBlackNode) <- {
        print ("deleteCase6: ", doubleBlackNode.key, "\n")
        our RBNode<keyType, valueType>: siblingNode <- findSiblingNode(doubleBlackNode)
        siblingNode.isBlack <- siblingNode.parent.isBlack
        siblingNode.parent.isBlack <- true
        if(isLeftChild(doubleBlackNode) == true){
            siblingNode.right.isBlack <- true
            leftRotate(siblingNode, false)
        }else{
            siblingNode.left.isBlack <- true
            rightRotate(siblingNode, false)
        }
        if(siblingNode.parent == NULL){Root <- siblingNode}
    }

    our RBNode<keyType, valueType>: findSiblingNode(our RBNode<keyType, valueType>: node) <- {
        our RBNode<keyType, valueType>: parent<- node.parent
        if(isLeftChild(node) == true){return(parent.right)}
        else{return(parent.left)}
    }

    our RBNode<keyType, valueType>: getNode(our RBNode<keyType, valueType>: node, keyType: searchKey) <- {
        while(!(node === Leaf)){
            if(searchKey < node.key){node <- node.left}
            else if(searchKey > node.key){node <- node.right}
            else if(searchKey == node.key){return(node)}
        }
        return(NULL)
    }

    me void: traverse() <- {
        print("_____________________________________\n")
        print("height: ", height(), "\n")
        print("T R A V E R S E\n")
        traverseHelper(Root, "")
        print("_____________________________________\n")
    }

    me void: traverseHelper(our RBNode<keyType, valueType>: node, me string: indent) <- {
        me string: isBlackStr
        if(node === Leaf){return()}
        traverseHelper(node.left, indent+"    ")
        if(node.isBlack == true){isBlackStr<-"B"}
        else{isBlackStr<-"R"}
        print(indent, node.key, ":", isBlackStr, "\n")
        traverseHelper(node.right, indent+"    ")
    }

    me int: blackNodes(our RBNode<keyType, valueType>: node) <- {
        if(node === Root){return(1)}
        me int: rightBlackNodes <- blackNodes(node.right)
        me int: leftBlackNodes <- blackNodes(node.left)
        if(rightBlackNodes!=leftBlackNodes){print("ERROR blackNodes: ", rightBlackNodes, ", ", leftBlackNodes)}
        if(node.isBlack){leftBlackNodes <- leftBlackNodes + 1}
        return(leftBlackNodes)
    }

}
*/
