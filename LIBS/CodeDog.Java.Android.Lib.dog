////////// Add routines for Java
//TODO: make conversion for rand to GLOBAL.getRandInt & main return(0)
requirements = [
    [tagOneOf, Platform, [Android]]
]

interface={
    provides = [CodeDog_platform_implementation]
    libFiles = []
    headers  = []
}


LibDescription ={
    useStatus   = dynamic
    description = 'Built in routines for Java'
}

struct GLOBAL{

}

struct FileStream{
    me RandomAccessFile: RAFileStream <- NULL
    me bool: failureFlag <- false
    me AssetManager: assetMgr
    void: copyFile(me InputStream: inStream, me OutputStream: outStream) <- <%{
        try {
            byte[] buffer = new byte[1024];
            int read;
            while((read = inStream.read(buffer)) != -1){
               outStream.write(buffer, 0, read);
            }
        }
        catch(IOException e){Log.e("GLOBAL", "Failed to copyFile: ");}
   }%>
    me void: open(me string: filename) <- <%{
        //Log.d("GLOBAL", "    >>FileStream::open "+filename+"\n");
        if(filename.startsWith("assets/",0)){
            String inFileName = filename.substring(7, filename.length());
            File outputDir = GLOBAL.static_Global.getCacheDir();
            String dirStr = outputDir.getAbsolutePath();
            filename = dirStr +"/"+ inFileName;
            assetMgr = GLOBAL.static_Global.getAssets();
            try {
                InputStream inStream = assetMgr.open(inFileName);
                OutputStream outStream = new FileOutputStream(filename);
                copyFile(inStream, outStream);
                inStream.close();
                outStream.flush();
                outStream.close();
            }
            catch(IOException e){Log.e("GLOBAL", "    ERROR:Failed to copy asset file: " + filename);}
        }
        try{
            File usrFile = new File(filename);
            RAFileStream = new  RandomAccessFile(usrFile, "rw");
            failureFlag=false;
        }catch(IOException e){
            failureFlag=true;
            Log.e("GLOBAL", "    ERROR open("+filename+")\n");
        }
    }%>
    me void: openNew(me string: filename) <- {}
    me void: openAppend(me string: filename) <- <%{
        //Log.d("GLOBAL", "    >>FileStream::openAppend "+filename+"\n");
        try{
            File usrFile = new File(filename);
            RAFileStream = new  RandomAccessFile(usrFile, "rw");
            RAFileStream.seek(RAFileStream.length());
            failureFlag=false;
        }
        catch(IOException e){
            failureFlag=true;
            Log.e("GLOBAL", "    ERROR openAppend("+filename+")\n");
        }
    }%>
    me void: close() <- <%{try{RAFileStream.close();}catch(IOException e){failureFlag=true;}}%>
    me int:  getChar() <- <%{char ch=' '; try{ch = RAFileStream.readChar();}catch(IOException e){failureFlag=true;} return(ch);}%>
    me string: getLine() <- <%{
        String S="";
        try{S = RAFileStream.readLine();}
        catch(IOException e){
            failureFlag=true;
            Log.e("GLOBAL", "    ERROR getLine()\n");
        }
        return(S);
    }%>
    me void: write(me string: S) <- <%{
        try{RAFileStream.writeBytes(S);}
        catch(IOException e){failureFlag=true;}
    }%>
    me bool: EOF() <- <%{
        boolean result=false;
        try{
            result=(RAFileStream.getFilePointer() >= RAFileStream.length());
        }catch(IOException e){
            failureFlag=true;
            result = true;
        }
        return(result);
    }%>
    me bool: failure() <- <%{return(failureFlag);}%>
}

struct sessionFile{
    our FileStream: session <- NULL
    me void: openSession(me string: filename) <-{
        //Log.d("GLOBAL", "    >>sessionFile::openSession "+filename+"\n");
        Allocate(session)
        session.openAppend(filename)
    }
    me void: closeSession() <- {session.close()}
    me void: writeEntry(me string: entry) <- {
        entry<-entry+"\n";
        session.write(entry)
    }

    me bool: openToRead(me string: filename) <- {
        //Log.d("GLOBAL", "    >>sessionFile::openToRead \n");
        Allocate(session)
        session.open(filename)
        if(session.failure()){Log.d("GLOBAL", "ERROR session file "+filename+"\n"); return(true)}
        return(false)
    }
    me string: readEntry() <- {
        me string: retVal <- session.getLine();
        return(retVal)
    }
    me bool: eof() <- <%{
        boolean result = session.EOF();
        return(result);
    }%>
    me void: closeReading() <- {session.close()}
}
