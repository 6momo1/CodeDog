/- CodeDog GUI DashBoard

/- Widgets for constructing a dashboard

featuresNeeded = [GUI_ToolKit]

struct styleProvider{
    const int: backgroundColor <- 1
    const int: foregroundColor <- 2
    const int: highlightColor  <- 3

    me Color: foreground <- GUI.Black
    me Color: background <- GUI.White
    me Color: highlight  <- GUI.Blue

    their Color: getColor(their void: ID, me int: attributeCode)  <- {
        background <- GUI.Green
        switch(attributeCode){
            case foregroundColor: {return(foreground)}
            case backgroundColor: {return(background)}
            case highlightColor:  {return(highlight)}
            default: {}
        }
        return(NULL)
    }
}

struct dashboard: inherits = 'widget'{
    me int: extX        /- right-most extent
    me int: extY        /- lowest extent
    our dash[list]: children
    our dash[map string]: dependentItems
    our decor[list]: decorations
    our styleProvider: styler


    our dash: dependentIsRegistered(me string: key) <- {
        if(dependentItems.containsKey(key)){
            return(dependentItems.get(key))
        }
        return(NULL)
    }

    me void: addDependent(me string: key, our dash: dashPtr) <- {
        if(! dependentItems.containsKey(key)){
            dashPtr.isHidden <- true
            dependentItems[key] <- dashPtr
        }
    }

    me void: addArrow(their dash: from, their dash: to) <- {
        me int: fromX    <- from.posX+155
        me int: fromY    <- from.posY+12
        me int: smallToX <- to.posX
        me int: largeToX <- to.posX + to.width
        me int: smallToY <- to.posY
        me int: largeToY <- to.posY + to.height
        our arrow:: Arrow(fromX, fromY, intersectPoint(fromX, smallToX, largeToX), intersectPoint(fromY, smallToY, largeToY))
        decorations.pushLast(Arrow)
    }

    me bool: primaryClick(their GUI_ButtonEvent: event) <- {
        if(! isTouchingMe(event.x, event.y)){return(false)}
        withEach Dash in children:{
            Dash.primaryClick(event)
        }
        withEach Dash in dependentItems:{
            if(! Dash.isHidden){
                Dash.primaryClick(event)
            }
        }
        setPos(15, 15, 35)
        markDirtyArea(drawing_area, 0,0, widgetWidth(thisApp.scrollerRef), widgetHeight(thisApp.scrollerRef))
        return(true)
    }

    me void: drawToPDF(me string: filename, me double: inchesWide, me double: inchesHigh, me double: scale) <- {
  /*      me GUI_ctxt: PDF <- gui_tk.newPDF_ctxt(filename, inchesWide, inchesHigh)
        PDF.setScale(scale, scale)
        draw(PDF)
        PDF.finishPDF()*/
    }

    me bool: secondaryClick(their GUI_ButtonEvent: event) <- {print("RIGHT BUTTON!\n"); drawToPDF('infonView.pdf', 11.0, 8.5, 0.4); return(true)}

    void: update() <- {
    }

    void: setPos(me int:x, me int:y, me int: extCursor) <- {
        me int: YCursor <- y
        decorations.clear()
        width <- 10
        height <- 10
        withEach Dash in dependentItems:{
            Dash.isHidden<-true
            Dash.posIsSet<-false
        }
        withEach Dash in children:{
            extY <- YCursor+25
            Dash.setPos(x, YCursor, extY)
            width<-max(width, Dash.extX)
            height<-max(height, Dash.height+YCursor)
            YCursor <- Dash.extY + 30
        }
        withEach depDash in dependentItems:{
            if(!depDash.isHidden){
                width<-max(width, depDash.extX)
                height<-max(height, depDash.extY)
            }
        }
        width <- width +30
        height <- height +30
    }

    void: draw(me GUI_ctxt: cr) <- {
        if (isHidden){return()}
        me Color: bkCol <- styler.getColor(NULL, styleProvider.backgroundColor)
        me Color: fgCol <- styler.getColor(NULL, styleProvider.foregroundColor)
        /-displayImage(cr, "blue-sky.png", 0, 0, 1.0)
        cr.setColor(bkCol)
        cr.paintNow()

        cr.setLineWidth(2)
        withEach Dash in children:{
            cr.setColor(fgCol)
            Dash.draw(cr)
        }
        withEach depDash in dependentItems:{
            if(!depDash.isHidden){
                depDash.draw(cr)
            }
        }
        withEach decoration in decorations:{
            decoration.draw(cr)
        }
    }
}

struct dash: inherits = 'widget'{
    me int: extX        /- Dashes right-most extent
    me int: extY        /- Dashes lowest extent
    me int: extC        /- The current position where the next external item should be drawn
    void: setPos(me int:x, me int:y, me int: extCursor) <- {print("SETPOS BASE!!\n")}
    me bool: isNullLike
    me bool: posIsSet
    void: activatePropertyEditor()<- {}
}

struct dataField: inherits = 'dash' {
    me string: label
    me string: value
    me int: midPos
    void: update(me int:MidPos, me int:minWidth, me string: Label, me string: Value, me bool: hideThis) <- {
        isNullLike<-hideThis
        midPos<-MidPos; label<-Label; value<-Value;
    }

   void: setPos(me int:x, me int:y, me int: extCursor) <- {
        posIsSet <- true
        posX <- x;
        posY <- y;
        extC <- extCursor
    /-    me deltaSize: DS <- getTextSize(me GUI_ctxt: cr, me string: text, me string: fontName, me int: fontSize)
        height <- 15
        width <- 180
        extX <- posX+width
        extY <- posY+height
    }

    void: draw(me GUI_ctxt: cr) <- {
        if (isHidden){return()}
        renderText(cr, label, "Ariel",  fontSize, posX, posY+15)
        renderText(cr, value, "Ariel",  fontSize, posX+midPos, posY+15)
    }
}

struct ptrToItem: inherits = 'dash' {
    me dataField: header
    me bool: refHidden
    me string: symbol
    our dash: dashPtr

    void: update(me string: Label, me string: textValue, me bool: hideThis) <- {
        isNullLike<-hideThis
        symbol <- textValue
        dashPtr<-dashBoard.dependentIsRegistered(textValue)
        header.update(100, 180, Label, textValue, false)
    }

    void: setPos(me int:x, me int:y, me int: extCursor) <- {
        posIsSet <- true
        posX <- x;
        posY <- y;
        extC <- extCursor
        header.setPos(x, y, extY)
        height <- header.height
        width <- header.width
        dashPtr <- dashBoard.dependentIsRegistered(symbol)
        if((!refHidden) and dashPtr!=NULL and dashPtr.isHidden){
            dashPtr.isHidden<-false
        }
        extX <- posX+width
        extY <- posY+height
    }

    me bool: primaryClick(their GUI_ButtonEvent: event) <- {
        if(!isTouchingMe(event.x, event.y)){return(false)}
        if(refHidden){refHidden<-false}
        else {refHidden<-true}
        return(true)
    }

    void: draw(me GUI_ctxt: cr) <- {
        if (isHidden){return()}
        header.isHidden <- false
        header.draw(cr)

    }
}


struct listOfItems: inherits = 'dash' {
    me mode[headerOnly, fullDisplay, noZeros]: displayMode
    me mode[vertical, horizontal]: orientation
    me dataField: header
    our dash[our list]: elements

    void: update(me string: Label, me string: textValue, me bool: hideThis, me bool: clear <- true) <- {
        isNullLike<-hideThis
        header.update(100, 180, Label, textValue, false)
        if(clear){
            Allocate(elements)
        }
    }

    void: updatePush(our dash: element) <- {
        elements.pushLast(element)
    }

    void: setPos(me int:x, me int:y, me int: extCursor) <- {
        posIsSet <- true
        posX <- x;
        posY <- y;
        extC <- extCursor
        header.setPos(x, y, y)
        y <- y+header.height
        width <- header.width
        height <- y-posY
        extX <- header.extX
        extY <- max(y, extC)
        if(displayMode!=headerOnly){
            if(orientation==vertical){
                x <- x+8
                withEach element in elements:{
                    element.setPos(x,y,extC)
                    y <- y+element.height
                    width <- max(width, element.width+8)
                    extX <- max(extX, element.extX)
                    extY <- max(extY, element.extY)
                }
                height <- y-posY
            } else if(orientation==horizontal){
                me int: listX <- posX + header.width+30    /- This 30 should really be calculated to compensate for nested items. Actual distance should be 40.
                me int: listY <- extC
                me int: listC <- extC+40;
                withEach element in elements:{
                    element.isHidden <- false
                    element.setPos(listX,listY,listC)
                    extC  <- max(extC, element.extY)
                    extY  <- max(extY, extC)
                    listX <- element.extX + 20
                    extX  <- element.extX
                }
                if(extC > listC){
                    extC <- extC+40
                    extY <- max(extY, extC)
                }
            }
        }
    }

   me bool: primaryClick(their GUI_ButtonEvent: event) <- {
        me GUI_scalar: eventX <- event.x
        me GUI_scalar: eventY <- event.y
     /-   if(!isTouchingMe(eventX, eventY)){return(false)}
        if( header.isTouchingMe(eventX, eventY)){
            if(displayMode==headerOnly){displayMode <- fullDisplay; orientation <- vertical}
            else if(displayMode==fullDisplay and orientation==vertical){
                orientation<-horizontal
            } else {displayMode <- headerOnly}
        }
        return(true)
    }

    void: draw(me GUI_ctxt: cr) <- {
        if (isHidden){return()}
        header.isHidden <- false
        header.draw(cr)
        if(displayMode!=headerOnly){
            withEach element in elements:{
                element.isHidden <- false
                element.draw(cr)
            }
            if(orientation==horizontal){
                me int:lastElIdx <- elements.size()
                if(lastElIdx>=1){
                    dashBoard.addArrow(this, elements[0])
                    lastElIdx <- lastElIdx-1
                    cr.moveTo(elements[0].posX, elements[0].posY)
                    cr.lineTo(elements[lastElIdx].posX + elements[lastElIdx].width, elements[lastElIdx].posY)
                    cr.moveTo(elements[0].posX, elements[0].posY+18)
                    cr.lineTo(elements[lastElIdx].posX + elements[lastElIdx].width, elements[lastElIdx].posY+18)
                    cr.strokeNow()
                }
            }
        }
    }
}

struct GLOBAL{

    me int: intersectPoint(me int:outsidePt, me int:smallPt, me int: largePt) <- {
        me int: ret
        if(outsidePt<smallPt){ret<-smallPt}
        else if(outsidePt>largePt){ret<-largePt}
        else{ret<-outsidePt}
        return(ret)
    }
}
