/- CodeDog GUI DashBoard

/- Widgets for constructing a dashboard

featuresNeeded = [GUI_ToolKit]

struct styleProvider{
    const int: backgroundColor <- 1
    const int: foregroundColor <- 2
    const int: highlightColor  <- 3

    me fontSpec: fontDefault
    me fontSpec: fontTitle
    me fontSpec: fontSmall

    me cdColor: foreground  <- GUI.White
    me cdColor: background  <- GUI.Black
    me cdColor: textPrimary <- GUI.White
    me cdColor: highlight1  <- GUI.Cornflower
    me cdColor: highlight2  <- GUI.OrangeRed
    
    void: init()<-{
	fontDefault.name <- "Ariel"
	fontDefault.size <- 10
	fontTitle.name   <- "Ariel"
	fontTitle.size   <- 16
	fontSmall.name   <- "Ariel"
	fontSmall.size   <- 8
    }

}

struct graphScale: inherits = 'dash'{
    me bool:   isVisible
    me int:    ticksPerStep
    me bool:   textSlant

    me double: step
    me double: tickStep
    me double: yOrig
    me double: xOrig
    me double: lowVal
    me double: hiVal
    me double: span
    me int:    tickOffset
    const int: tickPadding  <- 3
    const int: titlePadding <- 7

    void: initScale(me string: titleStr, me bool: IsVisible, me int: TicksPerStep,  me bool: TextSlant) <- {
    title        <- titleStr
    isVisible    <- IsVisible
    ticksPerStep <- TicksPerStep
    textSlant    <- TextSlant
    }

    void: setScale(me double: Span, me double: LowVal, me double: HiVal, me double: Step, me double: XOrig, me double: YOrig, me int: TickOffset) <- {
    span         <- Span
    lowVal       <- LowVal
    hiVal        <- HiVal
    step         <- Step
    xOrig        <- XOrig
    yOrig        <- YOrig
    tickOffset   <- TickOffset
    }
}

struct verticalScale: inherits = 'graphScale'{
    void: draw(me GUI_ctxt: cr) <- {
    me double: XPos    <- 0
    me double: YPos    <- 0
    me deltaSize: size
    me int: labelWidth <- 0
    me string: label
    me string: justify <- ""

    /- AXIS VALUE LABELS
    withEach val in RANGE(0.. (hiVal-lowVal)/step+1){
        label <- dblToString(val*step+lowVal, 2)
        size <- getTextSize(cr, label, styler.fontSmall)
        YPos <- yOrig-(val*step*span/(hiVal-lowVal)-size.height/3)
        if(textSlant){
        if (tickOffset > 0){XPos <- xOrig+tickOffset+3*tickPadding+size.height/2}
        else               {XPos <- xOrig+tickOffset-3*tickPadding; justify <- "right"}
        size <- renderTextRotate(cr, label, styler.fontSmall, XPos, YPos, -45, justify)
        }else{
        if (tickOffset > 0){XPos <- xOrig+tickOffset+3*tickPadding}
        else               {XPos <- xOrig+tickOffset-3*tickPadding-size.width}
        renderText(cr, label, styler.fontSmall, XPos, YPos)
        }
        if(size.width > labelWidth){labelWidth <- size.width}
    }

    /- AXIS TICK MARKS
    if(ticksPerStep>0){
        tickStep <- step/ticksPerStep
        cr.setLineWidth(1)
        withEach val in RANGE(0.. (hiVal-lowVal)/tickStep+1){
        if (tickOffset > 0){XPos <- xOrig+3}
        else               {XPos <- xOrig-3}
        YPos <- yOrig - val*tickStep*span/(hiVal-lowVal)
        cr.moveTo(XPos, YPos)
        cr.lineTo(XPos+tickOffset, YPos)
        }
        cr.strokeNow()
    }

    /- SCALE TITLE
    me int: degree
    if (tickOffset > 0){XPos <- xOrig+labelWidth+tickOffset+3*tickPadding+titlePadding; degree <- 90}
    else               {XPos <- xOrig-labelWidth+tickOffset-3*tickPadding-titlePadding; degree <- -90}
    rotate(cr, XPos, YPos+span/2, degree)
    renderTextCentered(cr, title, styler.fontDefault, XPos, YPos+span/2)
    restore(cr)
    cr.strokeNow()
    }
}

struct horizontalScale: inherits = 'graphScale'{
    void: draw(me GUI_ctxt: cr) <- {
    me double: XPos <- 0
    me double: YPos <- 0
    me deltaSize: size
    me int: labelHeight <- 0
    me int: tickHeight  <- 0
    me string: label
    me string: justify <- ""

    /- AXIS VALUE LABELS
    withEach val in RANGE(0.. (hiVal-lowVal)/step+1){
        label <- dblToString(val*step+lowVal, 2)
        size <- getTextSize(cr, title, styler.fontSmall)
        if (tickOffset > 0){tickHeight  <- tickOffset+3*tickPadding; YPos <- yOrig+tickHeight+size.height}
        else               {tickHeight  <- tickOffset-3*tickPadding; YPos <- yOrig+tickHeight}
        if(textSlant){
        if (tickOffset > 0){
            XPos <- xOrig+val*step*span/(hiVal-lowVal)-5
            justify <- "right"
            YPos <- YPos - 10
        }
        else{XPos <- xOrig+val*step*span/(hiVal-lowVal)}
        size <- renderTextRotate(cr, label, styler.fontSmall, XPos, YPos, -45, justify)
        }else{
        XPos <- xOrig+val*step*span/(hiVal-lowVal)-5
        size <- renderText(cr, label, styler.fontSmall, XPos, YPos)
        }
        if(size.height > labelHeight){labelHeight <- size.height}
        cr.strokeNow()
    }

    /- AXIS TICK MARKS
    if(ticksPerStep>0){
        tickStep <- step/ticksPerStep
        cr.setLineWidth(1)
        withEach val in RANGE(0.. (hiVal-lowVal)/tickStep+1){
        if (tickOffset > 0){YPos <- yOrig+tickPadding}
        else               {YPos <- yOrig-tickPadding}
        XPos <- xOrig + val*tickStep*span/(hiVal-lowVal)
        cr.moveTo(XPos, YPos)
        cr.lineTo(XPos, YPos+tickOffset)
        }
        cr.strokeNow()
    }

    /- SCALE TITLE
    size <- getTextSize(cr, title, styler.fontDefault)
    if(tickOffset > 0){YPos <- yOrig+tickHeight+labelHeight+titlePadding+size.height}
    else               {YPos <- yOrig+tickHeight-labelHeight-titlePadding}
    renderText(cr, title, styler.fontDefault, xOrig+span/2, YPos)
    cr.strokeNow()
    }
}

struct Dashboard: inherits = 'dash'{
    our dash[list]: dashChildren
    their dash[map string]: dependentItems
    our decor[list]: decorations

    their dash: dependentIsRegistered(me string: key) <- {
        if(dependentItems.containsKey(key)){
            return(dependentItems.get(key))
        }
        return(NULL)
    }

    me void: addChild(our dash: child) <- {child.dashParent<-self; dashChildren.pushLast(child)}

    me void: addDependent(me string: key, their dash: dashPtr) <- {
        if(! dependentItems.containsKey(key)){
            dashPtr.isHidden <- true
            dependentItems[key] <- dashPtr
        }
    }

    me void: addArrow(their dash: from, their dash: to) <- {
        me int: fromX    <- from.posX+155
        me int: fromY    <- from.posY+12
        me int: smallToX <- to.posX
        me int: largeToX <- to.posX + to.width
        me int: smallToY <- to.posY
        me int: largeToY <- to.posY + to.height
        our arrow: Arrow <- (fromX, fromY, intersectPoint(fromX, smallToX, largeToX), intersectPoint(fromY, smallToY, largeToY))
        decorations.pushLast(Arrow)
    }

    void: addRelation(me string: relationType, their dash: from, their dash: to) <- {
        if(relationType=='arrow'){
            addArrow(from, to)
        }
    }

    void: requestRedraw() <- {isDirty<-true; dashParent.requestRedraw()}

    me bool: primaryClick(their GUI_ButtonEvent: event) <- {
        if(! isTouchingMe(event.x, event.y)){return(false)}
        withEach Dash in dashChildren{
            Dash.primaryClick(event)
        }
        withEach Dash in dependentItems{
            if(! Dash.isHidden){
                Dash.primaryClick(event)
            }
        }
        setPos(15, 15, 35)
        requestRedraw()
        return(true)
    }

    me void: drawToPDF(me string: filename, me double: inchesWide, me double: inchesHigh, me double: scale) <- {
  /*      me GUI_ctxt: PDF <- gui_tk.newPDF_ctxt(filename, inchesWide, inchesHigh)
        PDF.setScale(scale, scale)
        draw(PDF)
        PDF.finishPDF()*/
    }

    me bool: secondaryClick(their GUI_ButtonEvent: event) <- {print("RIGHT BUTTON!\n"); drawToPDF('infonView.pdf', 11.0, 8.5, 0.4); return(true)}

    void: init() <- {isHidden <- false}

    void: update() <- {}

    void: setPos(me int:x, me int:y, me int: extCursor) <- {
        me int: YCursor <- y
        decorations.clear()
        width <- 10
        height <- 10
        withEach Dash in dependentItems{
            Dash.isHidden<-false
            Dash.posIsSet<-false
        }
        withEach Dash in dashChildren{
            extY <- YCursor+25
            Dash.setPos(x, YCursor, extY)
            width<-max(width, Dash.extX)
            height<-max(height, Dash.height+YCursor)
            YCursor <- Dash.extY + 30
        }
        withEach depDash in dependentItems{
            if(!depDash.isHidden){
                width<-max(width, depDash.extX)
                height<-max(height, depDash.extY)
            }
        }
        width <- width +30
        height <- height +30
    }

    void: draw(me GUI_ctxt: cr) <- {
        if (isHidden){return()}
        me cdColor: bkCol <- styler.background
        me cdColor: fgCol <- styler.foreground
        /-displayImage(cr, "blue-sky.png", 0, 0, 1.0)
        cr.setColor(bkCol)
        cr.paintNow()

        cr.setLineWidth(2)
        withEach childDash in dashChildren{
            cr.setColor(fgCol)
            childDash.draw(cr)
        }
        withEach depDash in dependentItems{
            if(!depDash.isHidden){
                depDash.draw(cr)
            }
        }
        withEach decoration in decorations{
            decoration.draw(cr)
        }
    }
}

struct dash: inherits = 'widget'{
    me string: title
    me int: extX        /- Dashes right-most extent
    me int: extY        /- Dashes lowest extent
    me int: extC        /- The current position where the next external item should be drawn
    their dash: dashParent
    void: setPos(me int:x, me int:y, me int: extCursor) <- {print("SETPOS BASE!!\n")}
    me bool: isNullLike
    me bool: posIsSet
    me bool: isDirty
    void: addDependent(me string: key, their dash: dashPtr) <- {
        if(dashPtr.dashParent==NULL){dashPtr.dashParent<-self}
        dashParent.addDependent(key, dashPtr)
    }
    their dash: dependentIsRegistered(me string: key) <- {
        if(dashParent==NULL){log("In dash.dependentIsRegistered("+key+") dashParent was NULL")}
        return(dashParent.dependentIsRegistered(key))
    }
    void: requestRedraw() <- {
        if(dashParent==NULL){log("In Dash.requestRedraw() dashParent was NULL")}
        isDirty<-true; dashParent.requestRedraw()
    }
    void: activatePropertyEditor()<- {}
    void: addRelation(me string: relationType, their dash: from, their dash: to) <- {
        if(dashParent==NULL){log("In Dash.addRelation() dashParent was NULL")}
        dashParent.addRelation(relationType, from, to)
    }
}

struct dataField: inherits = 'dash' {
    me string: label
    me string: value
    me int: midPos
    void: update(me int:MidPos, me int:minWidth, me string: Label, me string: Value, me bool: hideThis) <- {
        isNullLike<-hideThis
        midPos<-MidPos; label<-Label; value<-Value;
    }

   void: setPos(me int:x, me int:y, me int: extCursor) <- {
        posIsSet <- true
        posX <- x;
        posY <- y;
        extC <- extCursor
        height <- 15
        width <- 180
        extX <- posX+width
        extY <- posY+height
    }

    void: draw(me GUI_ctxt: cr) <- {
        if (isHidden){return()}
        renderText(cr, label, styler.fontDefault, posX, posY+15)
        renderText(cr, value, styler.fontDefault, posX+midPos, posY+15)
    }
}

struct ptrToItem: inherits = 'dash' {
    me dataField: header
    me bool: refHidden
    me string: symbol
    their dash: dashPtr

    void: update(me string: Label, me string: textValue, me bool: hideThis) <- {
        isNullLike<-hideThis
        symbol <- textValue
        header.update(100, 180, Label, textValue, false)
    }

    void: setPos(me int:x, me int:y, me int: extCursor) <- {
        posIsSet <- true
        posX <- x;
        posY <- y;
        extC <- extCursor
        header.setPos(x, y, extY)
        height <- header.height
        width <- header.width
        dashPtr <- dependentIsRegistered(symbol)
        if((!refHidden) and dashPtr!=NULL and dashPtr.isHidden){
            dashPtr.isHidden<-false
        }
        extX <- posX+width
        extY <- posY+height
    }

    me bool: primaryClick(their GUI_ButtonEvent: event) <- {
        if(!isTouchingMe(event.x, event.y)){return(false)}
        if(refHidden){refHidden<-false}
        else {refHidden<-true}
        return(true)
    }

    void: draw(me GUI_ctxt: cr) <- {
        if (isHidden){return()}
        header.isHidden <- false
        header.draw(cr)
    }

    void: INIT()<-{refHidden<-true}
}


struct listOfItems: inherits = 'dash' {
    me mode[headerOnly, fullDisplay, noZeros]: displayMode
    me mode[vertical, horizontal]: orientation
    me dataField: header
    our dash[our list]: elements

    void: update(me string: Label, me string: textValue, me bool: hideThis, me bool: clear <- true) <- {
        isNullLike<-hideThis
        header.update(100, 180, Label, textValue, false)
        if(clear){
            Allocate(elements)
        }
    }

    void: updatePush(our dash: element) <- {
        elements.pushLast(element)
    }

    void: setPos(me int:x, me int:y, me int: extCursor) <- {
        posIsSet <- true
        posX <- x;
        posY <- y;
        extC <- extCursor
        header.setPos(x, y, y)
        y <- y+header.height
        width <- header.width
        height <- y-posY
        extX <- header.extX
        extY <- max(y, extC)
        if(displayMode!=headerOnly){
            if(orientation==vertical){
                x <- x+8
                withEach element in elements{
                    element.dashParent <- self
                    element.setPos(x,y,extC)
                    y <- y+element.height
                    width <- max(width, element.width+8)
                    extX <- max(extX, element.extX)
                    extY <- max(extY, element.extY)
                }
                height <- y-posY
            } else if(orientation==horizontal){
                me int: listX <- posX + header.width+30    /- This 30 should really be calculated to compensate for nested items. Actual distance should be 40.
                me int: listY <- extC
                me int: listC <- extC+40;
                withEach element in elements{
                    element.dashParent <- self
                    element.isHidden <- false
                    element.setPos(listX,listY,listC)
                    extC  <- max(extC, element.extY)
                    extY  <- max(extY, extC)
                    listX <- element.extX + 20
                    extX  <- element.extX
                }
                addRelation("arrow", self, elements[0])
                if(extC > listC){
                    extC <- extC+40
                    extY <- max(extY, extC)
                }
            }
        }
    }

   me bool: primaryClick(their GUI_ButtonEvent: event) <- {
        me GUI_scalar: eventX <- event.x
        me GUI_scalar: eventY <- event.y
        if( header.isTouchingMe(eventX, eventY)){
            if(displayMode==headerOnly){displayMode <- fullDisplay; orientation <- vertical}
            else if(displayMode==fullDisplay and orientation==vertical){
                orientation<-horizontal
            } else {displayMode <- headerOnly}
        } else {return(false)}
        return(true)
    }

    void: draw(me GUI_ctxt: cr) <- {
        if (isHidden){return()}
        header.isHidden <- false
        header.draw(cr)
        if(displayMode!=headerOnly){
            withEach element in elements{
                element.isHidden <- false
                element.draw(cr)
            }
            if(orientation==horizontal){
                me int:lastElIdx <- elements.size()
                if(lastElIdx>=1){
                    lastElIdx <- lastElIdx-1
                    cr.moveTo(elements[0].posX, elements[0].posY)
                    cr.lineTo(elements[lastElIdx].posX + elements[lastElIdx].width, elements[lastElIdx].posY)
                    cr.moveTo(elements[0].posX, elements[0].posY+18)
                    cr.lineTo(elements[lastElIdx].posX + elements[lastElIdx].width, elements[lastElIdx].posY+18)
                    cr.strokeNow()
                }
            }
        }
    }
}

struct DashboardWidget: inherits='dash' {
    our Dashboard: dashboardDBW
    me GUI_canvas: canvas
    their GUI_item: managedWidget
    void: requestRedraw() <- {markDirtyArea(canvas, 0,0, dashboardDBW.width, dashboardDBW.height)}
    their GUI_item: init() <- {
        Allocate(dashboardDBW)
        dashboardDBW.dashParent <- self
        canvas  <- thisApp.gui.newCanvas()
	thisApp.gui.setWidgetSize(canvas, 1200, 1200)
	EventDispatcher.registerWidgetForEventDispatcher(canvas, dashboardDBW)
        their scrollerWidget:: scrollView  <- ()
        their GUI_ScrollingWindow: scrollerFrame <- scrollView.makeScrollerWidget(canvas)
        managedWidget <- scrollerFrame
        return(managedWidget)
    }
    void: draw(me GUI_ctxt: cr) <- {
        dashboardDBW.draw(cr)
    }
}

struct GLOBAL{
    our styleProvider: styler

    me int: intersectPoint(me int:outsidePt, me int:smallPt, me int: largePt) <- {
        me int: ret
        if(outsidePt<smallPt){ret<-smallPt}
        else if(outsidePt>largePt){ret<-largePt}
        else{ret<-outsidePt}
        return(ret)
    }
}
