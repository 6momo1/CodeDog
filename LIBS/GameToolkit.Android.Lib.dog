//////////////  Add Game-Toolkit features using Android
requirements = [
    [tagOneOf, Platform, [Android]]
]

interface={
    provides=[GameToolkit_implementation]
    libFiles=[]
        headers=[android.app.Activity, android.os.Bundle, android.view.Window, android.view.WindowManager,
        android.content.Context,
        android.graphics.Canvas, android.view.MotionEvent, android.view.SurfaceView,
        android.view.SurfaceHolder, android.graphics.Color, android.graphics.Paint, android.content.res.AssetManager, android.graphics.Bitmap, android.graphics.BitmapFactory,
        android.graphics.Path, android.os.SystemClock
    ]
}

LibDescription ={
    useStatus   = dynamic
    description ='A CodeDog Toolkit for making games'
    features    =[]
    platforms   =[Android]
    bindings    =[Java]
}

initCode = ``

/////////////////////////////////  STRUCT CONVERTERS
struct GRWindow{their WindowManager: GRWindow}
struct GameEvent{their MotionEvent:GameEvent}
struct UserEvent{their MotionEvent:UserEvent}
struct WindowEvent{their MotionEvent:WindowEvent}
struct KeyboardEvent{their MotionEvent:KeyboardEvent}
struct MouseButtonEvent{their MotionEvent:MouseButtonEvent}
struct MouseMotionEvent{their MotionEvent:MouseMotionEvent}
struct MouseWheelEvent{their MotionEvent:MouseWheelEvent}
struct KeyInfo{their MotionEvent:KeyInfo}
struct Keycode{their MotionEvent:Keycode}
struct INK_Image{their Paint: INK_Image}
struct SoundData{their Mix_Chunk: SoundData}
struct GameSurface{their SurfaceView: GameSurface}
/////////////////////////////////  GLOBAL
struct GLOBAL: inherits=Activity{
    void: deallocateWindow(their GRWindow: window)      <- <%!%GTODO:deallocateWindow%>
    void: deallocateGraphicsSystem()                    <- <%!%GTODO:deallocateGraphicsSystem%>
    void: getTickCount()                                <- <%!%GSystemClock.uptimeMillis()%>
    void: sleep()                                       <- <%!%GSystemClock.sleep(%1)%>
    their GUI_ctxt: createGUI_ctxt()                    <- <%!%G new GUI_ctxt()%>
    their GameSurface: screenSurface
    their INK_Image:   canvas
    me int: screenWidth
    me int: screenHeight
    const int: SCREEN_WIDTH  <- 900
    const int: SCREEN_HEIGHT <- 700

    void: onCreate(me Bundle: savedInstanceState) <- <%{
        super.onCreate(savedInstanceState);
        GLOBAL.static_Global = this;
        getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN, WindowManager.LayoutParams.FLAG_FULLSCREEN);
        this.requestWindowFeature(Window.FEATURE_NO_TITLE);
        setContentView(new GameMode(GLOBAL.static_Global));
    }%>
    me bool: getFullScreenMode() <- <%{
        return(false);
    }%>

    void: fullScreenModeOn() <- <%{
        getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN, WindowManager.LayoutParams.FLAG_FULLSCREEN);
        this.requestWindowFeature(Window.FEATURE_NO_TITLE);
    }%>

    void: fullScreenModeOff() <- <%{}%>

    void: initializeGraphics(me bool: startFullScreen) <- <%{}%>

    void: resetWindowSize(me int: width, me int: height) <- <%{}%>

    // //DRAWING ROUTINES:
    /*me deltaSize: renderText(their GUI_ctxt: cr, me string: text, me fontSpec: font, me double: x, me double: y) <- <%{
        cr.paint.setStyle(Paint.Style.FILL);
        cr.paint.setTextSize(font.size);
        cr.paint.setTypeface(Typeface.create(font.name, Typeface.NORMAL));
        cr.GCanvas.drawText(text, (float)x, (float)y, cr.paint);
        deltaSize size = getTextSize(cr, text, font);
        return(size);
    }%>

    me deltaSize: renderTextCentered(their GUI_ctxt: cr, me string: text, me fontSpec: font, me double: x, me double: y) <- <%{
        deltaSize size = getTextSize(cr, text, font);
        cr.paint.setTextSize(font.size);
        cr.paint.setTypeface(Typeface.create(font.name, Typeface.NORMAL));
        renderText(cr, text, font, x-size.width/2, y);
        return(size);
    }%>

    me deltaSize: renderTextRotate(their GUI_ctxt: cr, me string: text, me fontSpec: font, me double: x, me double: y, me double: degrees, me string: justify) <- <%{
        double radians    = degrees*(Math.PI/180.);
        deltaSize size    = getTextSize(cr, text, font);
        double hypotenuse = size.width;
        deltaSize tmpSize = new deltaSize(0,0);

        if(justify == "right"){x=x-hypotenuse;}
        else if(justify == "center"){x=x-hypotenuse/2;}
        cr.GCanvas.save();
        cr.GCanvas.rotate(45, (float)x, (float)y);
        renderText (cr, text, font, x, y);
        cr.GCanvas.restore();
        //TODO: calculate height and width more accurately
        tmpSize.width = size.width;
        tmpSize.height = size.width;
        return(tmpSize);
    }%>

    me void: rotate(their GUI_ctxt: cr, me double: x, me double: y, me int: degrees) <- <%{
        cr.GCanvas.save();
        cr.GCanvas.rotate(degrees, (float)x, (float)y);
    }%>

    me void: restore(me GUI_ctxt: cr) <- <%!%G%1.GCanvas.restore()%>

    me deltaSize: getTextSize(their GUI_ctxt: cr, me string: text, me fontSpec: font) <- <%{
        Rect bounds = new Rect();
        deltaSize size = new deltaSize(0,0);
        cr.paint.setTextSize(font.size);
        cr.paint.setTypeface(Typeface.create(font.name, Typeface.NORMAL));
        cr.paint.getTextBounds(text, 0, text.length(), bounds);
        size.height = bounds.height();
        size.width = bounds.width();
        return(size);
    } %>

    me void: roundedRectangle(their GUI_ctxt: cr, me double: x, me double: y, me double: w, me double: h, me double: r) <- <%{} %>

    void: displayImage(their GUI_ctxt: cr, me string: filename, me double: x, me double: y, me double: xScale, me double: yScale) <- <%{
        boolean filter = false;
        try {
            assetManager = getAssets();
            InputStream is = assetManager.open(filename);
            Bitmap  bitmap = BitmapFactory.decodeStream(is);
            int width  = Math.round((float)scale * bitmap.getWidth());
            int height = Math.round((float)scale * bitmap.getHeight());
            Bitmap newBitmap = Bitmap.createScaledBitmap(bitmap, width,height, filter);
            cr.GCanvas.drawBitmap(newBitmap, (float)x, (float)y, cr.paint);
            Log.v("TAG", "display image: " + filename);
        } catch (IOException e) {Log.e("TAG", e.getMessage());}
    }%>*/
    void: displayBackgroundImage(their GUI_ctxt: cr, me string: filename) <- <%{}%>
}
/////////////////////////////////  GUI_ctxt
struct GUI_ctxt: inherits=Canvas{
    me Paint: paint
    me Path: GPath
    me double: cur_x
    me double: cur_y
    me Canvas: GCanvas

    me none: GUI_ctxt () <- {
        Allocate(paint)
        Allocate(GPath)
    }

    me none: GUI_ctxt(me Canvas: canvas) <- {
        Allocate(paint)
        Allocate(GPath)
        GCanvas <- canvas
    }

    //me void: fetchAreaToBeDrawn(me GUI_rect: area) <- <%!%>
    //me void: reset() <- <%!GPath = new Path()%>
    //me void: setRGBA(me double: red, me double: green, me double: blue, me double: alpha) <- <%!paint.setColor(Color.argb((int)%4, %1, %2, %3))%>
    //me void: setRGB (me double: red, me double: green, me double: blue) <- <%!paint.setColor(Color.rgb(%1, %2, %3))%>
    me void: setColor(me cdColor: color) <- <%!%0.paint.setColor( Color.rgb(%1.red, %1.green, %1.blue))%>
    //me void: setLineWidth(me double: width) <- <%!paint.setStrokeWidth(%1)%>
    //me void: setScale() <- <%!%>
    //me void: moveTo(me double: x, me double: y) <- <%!%0.cur_x=%1; %0.cur_y=%2; %0.GPath.moveTo((float)(%1), (float)(%2))%>
    //me void: lineTo(me double: x, me double: y) <- <%!%0.cur_x=%1; %0.cur_y=%2; %0.GPath.lineTo((float)(%1), (float)(%2))%>
    //me void: moveRel(me double: dx, me double: dy) <- <%!GPath.moveTo((float)(cr.cur_x+%1), (float)(cr.cur_y+%2))%>
    //me void: lineRel(me double: dx, me double: dy) <- <%!GPath.lineTo((float)(cr.cur_x+%1), (float)(cr.cur_y+%2))%>
    //me void: curveTo(me double: x1, me double: y1, me double: x2, me double: y2, me double: x3, me double: y3) <- <%!GPath.curve_to(cr, %1, %2, %3, %4, %5, %6)%>
    //me void: curveRel(me double: dx1, me double: dy1, me double: dx2, me double: dy2, me double: dx3, me double: dy3) <- <%!rel_curve_to(cr, %1, %2, %3, %4, %5, %6)%>
    //me void: closePath()      <- <%!GPath.close()%>
    me void: rectangle()      <- <%!%0.drawRect((float)%1, (float)%2, (float)%3, (float)%4, cr.paint)%>
    //me void: paintNow()       <- <%!paint.setStyle(Paint.Style.FILL);cr.GCanvas.drawPaint(cr.paint)%>
    me void: strokeNow()      <- <%!%0.paint.setStyle(Paint.Style.STROKE); %0.GCanvas.drawPath(cr.GPath, cr.paint); cr.GPath.rewind()%>
    me void: fillNow()        <- <%!%0.paint.setStyle(Paint.Style.FILL);   %0.GCanvas.drawPath(cr.GPath, cr.paint); cr.GPath.rewind()%>
    //me void: strokeKeep()     <- <%!%0.paint.setStyle(Paint.Style.STROKE); %0.GCanvas.drawPath(cr.GPath, cr.paint)%>
    //me void: fillKeep()       <- <%!%0.paint.setStyle(Paint.Style.FILL);   %0.GCanvas.drawPath(cr.GPath, cr.paint)%>
    //me void: renderFrame()    <- <%!repaint()%>
    //me void: setFillPattern() <- <%!%>
    //me void: circle(me int: centerX, me int: centerY, me int: radius) <- <%!%0.paint.setStyle(Paint.Style.STROKE);%0.paint.setStrokeWidth(2);%0.GCanvas.drawCircle(%1, %2, %3, cr.paint)%>
}

/////////////////////////////////  GRWindow
struct GRWindow{
    void: requestRedraw()       <- <%!%G%>
}
struct GameEvent{
    me int32: type
    me UserEvent: user
    me WindowEvent: window
    me KeyboardEvent: key
    me MouseButtonEvent: button
    me MouseMotionEvent: motion
    me MouseWheelEvent: wheel
}
/*
struct UserEvent{
    me int32: code
}
struct WindowEvent{
    me int32: event
    me int32: data1
    me int32: data2
}
struct KeyboardEvent{
    me KeyInfo: keysym
}
struct KeyInfo{
    me Keycode: sym
}
struct MouseButtonEvent{
    me int32: type
    me int32: x
    me int32: y
}*/
struct GameLooper: inherits=Thread{
    my SurfaceHolder: surfaceHolder

    me bool: PollForEvent(their GameEvent: event)       <- <%!SDL_PollEvent(%1)%>
    none: GameLooper(me SurfaceHolder: holder, our GameMode: gameMode) <- <%{
        super();
        this.surfaceHolder = holder;
        this.crntGameMode = gameMode;
    }%>
}
/*struct GameImage{
    void: loadFromFile(me string: fileName) <- <%{
        name = fileName;
    }%>
    void: draw(their GUI_ctxt: cr, me double: x, me double: y, me double: scale) <- <%{}%>
}
struct GameSound{
    void: loadFromFile(me string: fileName) <- <%{
        name = fileName;
        data=Mix_LoadWAV(name.data());
    }%>
    void: play() <-  <%{}%>
}*/

struct GameMode: inherits=SurfaceView implements=SurfaceHolder.Callback{
    our GameLooper: looper
    void: update() <- {}
    //@Override
    none: GameMode(me Context: context) <- <%{
        super(context);
        getHolder().addCallback(this);
        setFocusable(true);
        looper = new GameLooper(getHolder(), GLOBAL.static_Global);
        setFocusable(true);
    }%>
    //@Override
    void: surfaceChanged(me SurfaceHolder: holder, me int: format, me int: width, me int: height) <- {}

    //@Override
    void: surfaceDestroyed(me SurfaceHolder: holder) <- <%{
        boolean retry = true;
        while (retry) {
            try {
                looper.running=false;
                looper.join();
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            retry = false;
        }
    }%>

    //@Override
    void: surfaceCreated(me SurfaceHolder: holder) <- <%{
        looper.running=true;
        looper.start();
    }%>
}
